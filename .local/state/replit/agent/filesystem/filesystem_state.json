{"file_contents":{"README.md":{"content":"# AI-Based Rockfall Prediction & Alert System\n\n[![Build Status](https://github.com/your-repo/rockfall-prediction/workflows/CI/badge.svg)](https://github.com/your-repo/rockfall-prediction/actions)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![Node.js 18+](https://img.shields.io/badge/node-18+-green.svg)](https://nodejs.org/)\n\n> **Smart India Hackathon 2025 - Problem Statement 25071**\n\nA comprehensive, production-ready AI system for predicting rockfall events using multi-modal machine learning, real-time sensor monitoring, and advanced alert mechanisms.\n\n## 🎯 Overview\n\nThis system combines cutting-edge AI/ML technologies with IoT sensor networks to provide early warning for rockfall events, potentially saving lives and infrastructure in mountainous and mining regions.\n\n### Key Features\n\n- **🧠 Multi-Modal AI Models**: CNN for drone imagery, LSTM for sensor time-series, fusion models\n- **📊 Real-Time Monitoring**: Live sensor data processing with WebSocket updates\n- **🚨 Advanced Alert System**: Multi-channel notifications (SMS, Email, WhatsApp, Push)\n- **🗺️ Interactive Mapping**: Mapbox-powered risk visualization and site management\n- **⚡ Edge Computing**: Raspberry Pi agents for local inference and offline operation\n- **📈 Explainable AI**: SHAP and GradCAM for prediction interpretability\n- **🔧 Production Ready**: Docker containers, monitoring, CI/CD, auto-scaling\n\n## 🏗️ Architecture\n\n```mermaid\ngraph TB\n    subgraph \"Edge Layer\"\n        Pi[Raspberry Pi Agents]\n        Sensors[IoT Sensors]\n        Drones[Drone Cameras]\n    end\n    \n    subgraph \"Communication\"\n        MQTT[MQTT Broker]\n        API[REST API]\n    end\n    \n    subgraph \"Backend Services\"\n        FastAPI[FastAPI Server]\n        Celery[Celery Workers]\n        ML[ML Pipeline]\n        DB[(PostgreSQL + PostGIS)]\n        Redis[(Redis Cache)]\n        MinIO[(Object Storage)]\n    end\n    \n    subgraph \"Frontend\"\n        Next[Next.js Dashboard]\n        Maps[Mapbox GL JS]\n        Charts[Real-time Charts]\n    end\n    \n    subgraph \"Monitoring\"\n        Prom[Prometheus]\n        Graf[Grafana]\n        Logs[Centralized Logging]\n    end\n    \n    Pi --> MQTT\n    Sensors --> Pi\n    Drones --> Pi\n    MQTT --> FastAPI\n    FastAPI --> DB\n    FastAPI --> Redis\n    FastAPI --> MinIO\n    FastAPI --> Celery\n    Celery --> ML\n    Next --> API\n    FastAPI --> Prom\n    Prom --> Graf\n\n    #4545\n","size_bytes":2565},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI-Based Rockfall Prediction & Alert System\n\n## Overview\n\nThis is a comprehensive AI-powered rockfall prediction and alert system designed for Smart India Hackathon 2025. The system combines cutting-edge machine learning with real-time IoT monitoring to provide early warning for rockfall events in mountainous and mining regions. It features multi-modal AI models (CNN for drone imagery, LSTM for sensor time series), real-time data processing, interactive mapping with risk visualization, and advanced multi-channel alert systems.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React/TypeScript SPA**: Modern single-page application built with React 18+ and TypeScript\n- **Component Library**: shadcn/ui components with Radix UI primitives and Tailwind CSS styling\n- **State Management**: TanStack Query for server state management and caching\n- **Real-time Updates**: WebSocket integration for live alerts and sensor data updates\n- **Responsive Design**: Mobile-first approach with responsive layouts\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Node.js/Express Server**: TypeScript-based Express.js server with modern ES modules\n- **Database Layer**: PostgreSQL with PostGIS for geospatial data and Drizzle ORM\n- **Real-time Communication**: WebSocket server for live data streaming and alerts\n- **API Design**: RESTful endpoints with structured error handling and validation\n- **File Processing**: Multi-modal data ingestion for images, sensor data, and geospatial information\n\n### Machine Learning Pipeline\n- **Multi-Modal Fusion**: Combines CNN (drone imagery), LSTM (sensor time series), and tabular data\n- **Model Architecture**: PyTorch-based models with ResNet50 backbone for image processing\n- **Explainable AI**: SHAP and GradCAM integration for prediction interpretability\n- **Edge Computing**: Raspberry Pi agents for local inference and offline operation\n- **Model Management**: Version control and A/B testing capabilities\n\n### Data Storage Strategy\n- **PostgreSQL + PostGIS**: Primary database for structured data and geospatial features\n- **Object Storage**: MinIO (S3-compatible) for images, DEM tiles, and large files\n- **Time Series Data**: Optimized sensor reading storage with proper indexing\n- **Caching Layer**: Redis for session management and real-time data caching\n\n### Alert and Notification System\n- **Multi-Channel Alerts**: SMS, email, WhatsApp, and push notifications\n- **Severity-Based Routing**: Different notification channels based on risk levels\n- **Real-time Broadcasting**: WebSocket-based alert distribution to connected clients\n- **Alert Management**: Acknowledgment system and escalation procedures\n\n## External Dependencies\n\n### Third-Party Services\n- **Neon Database**: Serverless PostgreSQL hosting with PostGIS extension\n- **Twilio**: SMS and WhatsApp messaging services for critical alerts\n- **SMTP Provider**: Email notification delivery\n- **Mapbox GL**: Interactive mapping and geospatial visualization\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Backend bundling for production deployment\n- **TypeScript**: Type safety across the entire stack\n\n### IoT and Communication\n- **MQTT Protocol**: Device-to-cloud communication for sensor networks\n- **WebSocket**: Real-time bidirectional communication\n- **Raspberry Pi**: Edge computing devices for local data processing\n\n### Machine Learning Stack\n- **PyTorch**: Deep learning framework for model development\n- **ONNX**: Model export format for cross-platform inference\n- **OpenCV**: Computer vision and image processing\n- **scikit-learn**: Traditional ML algorithms and model evaluation","size_bytes":3827},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"docs/ARCHITECTURE.md":{"content":"# System Architecture Documentation\n\n## Overview\n\nThe AI-Based Rockfall Prediction & Alert System is a comprehensive, multi-tier architecture designed for high availability, scalability, and real-time performance. This document provides detailed technical specifications for each component.\n\n## Architecture Principles\n\n### 1. Microservices Architecture\n- **Separation of Concerns**: Each service handles a specific domain\n- **Independent Scaling**: Services can be scaled based on demand\n- **Technology Diversity**: Best tool for each job\n- **Fault Isolation**: Service failures don't cascade\n\n### 2. Event-Driven Design\n- **Asynchronous Processing**: Non-blocking operations\n- **Real-time Updates**: WebSocket and MQTT messaging\n- **Decoupled Components**: Pub/sub patterns\n- **Scalable Processing**: Queue-based task distribution\n\n### 3. Data-Centric Approach\n- **Single Source of Truth**: Centralized data lake\n- **Multi-Modal Data**: Images, time-series, spatial data\n- **Data Lineage**: Full traceability of data flow\n- **Real-time Analytics**: Stream processing capabilities\n\n## System Components\n\n### Edge Layer\n\n#### Raspberry Pi Agents\n```python\n# Edge Agent Responsibilities\n- Local sensor data collection\n- Real-time inference using ONNX models\n- Offline operation capability\n- Local alert generation\n- Data synchronization with backend\n","size_bytes":1349},"docs/DEMO.md":{"content":"# Demo Guide - AI-Based Rockfall Prediction System\n\nThis guide provides step-by-step instructions for demonstrating the complete rockfall prediction system, from basic setup to advanced features.\n\n## Quick Demo Setup (5 minutes)\n\n### Prerequisites\n- Docker and Docker Compose installed\n- 8GB RAM minimum\n- 20GB free disk space\n\n### 1. Clone and Start\n```bash\n# Clone repository\ngit clone https://github.com/your-repo/rockfall-prediction.git\ncd rockfall-prediction\n\n# Copy environment file\ncp .env.example .env\n\n# Start services\ndocker-compose up -d\n\n# Wait for services to be ready (check logs)\ndocker-compose logs -f backend\n","size_bytes":626},"edge/agent.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nEdge Agent for Rockfall Prediction System\nRuns on Raspberry Pi or Jetson devices for local inference and data collection.\n\"\"\"\n\nimport os\nimport sys\nimport time\nimport json\nimport logging\nimport threading\nfrom typing import Dict, Any, Optional, List\nfrom datetime import datetime\nfrom pathlib import Path\nimport signal\nimport atexit\n\nimport numpy as np\nimport onnxruntime as ort\nfrom PIL import Image\nimport cv2\nimport serial\nimport sqlite3\nimport requests\nfrom dataclasses import dataclass, asdict\n\n# Local imports\nfrom mqtt_client import MQTTClient\n\n# GPIO imports (handle gracefully if not on Pi)\ntry:\n    import RPi.GPIO as GPIO\n    GPIO_AVAILABLE = True\nexcept ImportError:\n    GPIO_AVAILABLE = False\n    print(\"WARNING: RPi.GPIO not available. LED/Buzzer controls disabled.\")\n\n# Camera imports\ntry:\n    from picamera2 import Picamera2, Preview\n    PICAMERA_AVAILABLE = True\nexcept ImportError:\n    PICAMERA_AVAILABLE = False\n    print(\"WARNING: PiCamera2 not available. Using OpenCV camera.\")\n\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('/var/log/rockfall_agent.log'),\n        logging.StreamHandler()\n    ]\n)\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass SensorReading:\n    \"\"\"Data structure for sensor readings.\"\"\"\n    sensor_id: str\n    sensor_type: str\n    value: float\n    unit: str\n    timestamp: str\n    quality: float = 1.0\n\n@dataclass\nclass PredictionResult:\n    \"\"\"Data structure for prediction results.\"\"\"\n    site_id: str\n    probability: float\n    risk_level: str\n    confidence: float\n    timestamp: str\n    model_version: str\n    uncertainty: float = 0.0\n\nclass EdgeAgent:\n    \"\"\"\n    Main Edge Agent class for rockfall prediction system.\n    Handles sensor data collection, local inference, and communication.\n    \"\"\"\n    \n    def __init__(self, config_path: str = '/etc/rockfall/config.json'):\n        \"\"\"Initialize the edge agent.\"\"\"\n        self.config = self.load_config(config_path)\n        self.running = False\n        self.models = {}\n        self.sensor_connections = {}\n        self.camera = None\n        self.mqtt_client = None\n        self.local_db = None\n        \n        # Initialize components\n        self.setup_database()\n        self.setup_gpio()\n        self.setup_camera()\n        self.setup_models()\n        self.setup_mqtt()\n        self.setup_sensors()\n        \n        # Register cleanup handlers\n        atexit.register(self.cleanup)\n        signal.signal(signal.SIGTERM, self.signal_handler)\n        signal.signal(signal.SIGINT, self.signal_handler)\n        \n        logger.info(\"Edge Agent initialized successfully\")\n    \n    def load_config(self, config_path: str) -> Dict[str, Any]:\n        \"\"\"Load configuration from JSON file.\"\"\"\n        default_config = {\n            \"site_id\": \"EDGE_001\",\n            \"sampling_interval\": 60,  # seconds\n            \"prediction_interval\": 300,  # seconds\n            \"models\": {\n                \"fusion_model_path\": \"/opt/rockfall/models/fusion_model.onnx\",\n                \"lightweight_model_path\": \"/opt/rockfall/models/lightweight_model.onnx\"\n            },\n            \"sensors\": {\n                \"strain\": {\"port\": \"/dev/ttyUSB0\", \"baud\": 9600},\n                \"displacement\": {\"port\": \"/dev/ttyUSB1\", \"baud\": 9600},\n                \"pore_pressure\": {\"port\": \"/dev/ttyUSB2\", \"baud\": 9600},\n                \"tilt\": {\"port\": \"/dev/ttyUSB3\", \"baud\": 9600},\n                \"vibration\": {\"port\": \"/dev/ttyUSB4\", \"baud\": 9600}\n            },\n            \"camera\": {\n                \"enabled\": True,\n                \"resolution\": [640, 480],\n                \"capture_interval\": 3600  # seconds\n            },\n            \"mqtt\": {\n                \"broker\": \"localhost\",\n                \"port\": 1883,\n                \"username\": None,\n                \"password\": None,\n                \"topics\": {\n                    \"sensor_data\": \"rockfall/sensor_data\",\n                    \"predictions\": \"rockfall/predictions\",\n                    \"alerts\": \"rockfall/alerts\",\n                    \"status\": \"rockfall/status\"\n                }\n            },\n            \"gpio\": {\n                \"led_pin\": 18,\n                \"buzzer_pin\": 19,\n                \"button_pin\": 20\n            },\n            \"communication\": {\n                \"backend_url\": \"http://backend:8000\",\n                \"sync_interval\": 3600,  # seconds\n                \"offline_threshold\": 7200  # seconds\n            },\n            \"thresholds\": {\n                \"high_risk\": 0.7,\n                \"critical_risk\": 0.9\n            }\n        }\n        \n        try:\n            if os.path.exists(config_path):\n                with open(config_path, 'r') as f:\n                    user_config = json.load(f)\n                    default_config.update(user_config)\n            else:\n                logger.warning(f\"Config file {config_path} not found, using defaults\")\n        except Exception as e:\n            logger.error(f\"Failed to load config: {e}\")\n        \n        return default_config\n    \n    def setup_database(self):\n        \"\"\"Setup local SQLite database for offline storage.\"\"\"\n        try:\n            db_path = '/var/lib/rockfall/edge_data.db'\n            os.makedirs(os.path.dirname(db_path), exist_ok=True)\n            \n            self.local_db = sqlite3.connect(db_path, check_same_thread=False)\n            self.local_db.execute('''\n                CREATE TABLE IF NOT EXISTS sensor_readings (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    sensor_id TEXT,\n                    sensor_type TEXT,\n                    value REAL,\n                    unit TEXT,\n                    timestamp TEXT,\n                    quality REAL,\n                    synced INTEGER DEFAULT 0\n                )\n            ''')\n            \n            self.local_db.execute('''\n                CREATE TABLE IF NOT EXISTS predictions (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    site_id TEXT,\n                    probability REAL,\n                    risk_level TEXT,\n                    confidence REAL,\n                    timestamp TEXT,\n                    model_version TEXT,\n                    uncertainty REAL,\n                    synced INTEGER DEFAULT 0\n                )\n            ''')\n            \n            self.local_db.commit()\n            logger.info(\"Local database setup completed\")\n            \n        except Exception as e:\n            logger.error(f\"Database setup failed: {e}\")\n    \n    def setup_gpio(self):\n        \"\"\"Setup GPIO pins for LED and buzzer.\"\"\"\n        if not GPIO_AVAILABLE:\n            return\n        \n        try:\n            GPIO.setmode(GPIO.BCM)\n            GPIO.setwarnings(False)\n            \n            # Setup LED\n            self.led_pin = self.config['gpio']['led_pin']\n            GPIO.setup(self.led_pin, GPIO.OUT)\n            GPIO.output(self.led_pin, GPIO.LOW)\n            \n            # Setup buzzer\n            self.buzzer_pin = self.config['gpio']['buzzer_pin']\n            GPIO.setup(self.buzzer_pin, GPIO.OUT)\n            GPIO.output(self.buzzer_pin, GPIO.LOW)\n            \n            # Setup button (for manual alerts)\n            self.button_pin = self.config['gpio']['button_pin']\n            GPIO.setup(self.button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)\n            GPIO.add_event_detect(self.button_pin, GPIO.FALLING, \n                                callback=self.button_callback, bouncetime=200)\n            \n            logger.info(\"GPIO setup completed\")\n            \n        except Exception as e:\n            logger.error(f\"GPIO setup failed: {e}\")\n    \n    def setup_camera(self):\n        \"\"\"Setup camera for image capture.\"\"\"\n        if not self.config['camera']['enabled']:\n            return\n        \n        try:\n            if PICAMERA_AVAILABLE:\n                # Use PiCamera2\n                self.camera = Picamera2()\n                config = self.camera.create_preview_configuration(\n                    main={\"size\": tuple(self.config['camera']['resolution'])}\n                )\n                self.camera.configure(config)\n                logger.info(\"PiCamera2 setup completed\")\n            else:\n                # Use OpenCV\n                self.camera = cv2.VideoCapture(0)\n                if self.camera.isOpened():\n                    logger.info(\"OpenCV camera setup completed\")\n                else:\n                    logger.error(\"Failed to open camera\")\n                    self.camera = None\n                    \n        except Exception as e:\n            logger.error(f\"Camera setup failed: {e}\")\n            self.camera = None\n    \n    def setup_models(self):\n        \"\"\"Load ONNX models for inference.\"\"\"\n        try:\n            # Load fusion model if available\n            fusion_model_path = self.config['models']['fusion_model_path']\n            if os.path.exists(fusion_model_path):\n                self.models['fusion'] = ort.InferenceSession(fusion_model_path)\n                logger.info(\"Fusion model loaded successfully\")\n            \n            # Load lightweight model\n            lightweight_model_path = self.config['models']['lightweight_model_path']\n            if os.path.exists(lightweight_model_path):\n                self.models['lightweight'] = ort.InferenceSession(lightweight_model_path)\n                logger.info(\"Lightweight model loaded successfully\")\n            else:\n                logger.error(\"No models available for inference\")\n                \n        except Exception as e:\n            logger.error(f\"Model setup failed: {e}\")\n    \n    def setup_mqtt(self):\n        \"\"\"Setup MQTT client for communication.\"\"\"\n        try:\n            mqtt_config = self.config['mqtt']\n            self.mqtt_client = MQTTClient(\n                broker=mqtt_config['broker'],\n                port=mqtt_config['port'],\n                username=mqtt_config.get('username'),\n                password=mqtt_config.get('password'),\n                client_id=f\"edge_agent_{self.config['site_id']}\"\n            )\n            \n            # Connect and subscribe to control topics\n            self.mqtt_client.connect()\n            self.mqtt_client.subscribe(f\"rockfall/control/{self.config['site_id']}\")\n            self.mqtt_client.set_message_callback(self.mqtt_message_callback)\n            \n            logger.info(\"MQTT client setup completed\")\n            \n        except Exception as e:\n            logger.error(f\"MQTT setup failed: {e}\")\n            self.mqtt_client = None\n    \n    def setup_sensors(self):\n        \"\"\"Setup serial connections for sensors.\"\"\"\n        for sensor_type, config in self.config['sensors'].items():\n            try:\n                if os.path.exists(config['port']):\n                    connection = serial.Serial(\n                        port=config['port'],\n                        baudrate=config['baud'],\n                        timeout=1\n                    )\n                    self.sensor_connections[sensor_type] = connection\n                    logger.info(f\"Sensor {sensor_type} connected on {config['port']}\")\n                else:\n                    logger.warning(f\"Sensor port {config['port']} not found\")\n                    \n            except Exception as e:\n                logger.error(f\"Failed to setup sensor {sensor_type}: {e}\")\n    \n    def start(self):\n        \"\"\"Start the edge agent main loop.\"\"\"\n        logger.info(\"Starting Edge Agent...\")\n        self.running = True\n        \n        # Start background threads\n        sensor_thread = threading.Thread(target=self.sensor_collection_loop)\n        prediction_thread = threading.Thread(target=self.prediction_loop)\n        sync_thread = threading.Thread(target=self.sync_loop)\n        camera_thread = threading.Thread(target=self.camera_capture_loop)\n        \n        sensor_thread.daemon = True\n        prediction_thread.daemon = True\n        sync_thread.daemon = True\n        camera_thread.daemon = True\n        \n        sensor_thread.start()\n        prediction_thread.start()\n        sync_thread.start()\n        \n        if self.camera:\n            camera_thread.start()\n        \n        # Main status loop\n        try:\n            while self.running:\n                self.publish_status()\n                time.sleep(30)  # Publish status every 30 seconds\n                \n        except KeyboardInterrupt:\n            logger.info(\"Shutting down Edge Agent...\")\n            self.stop()\n    \n    def stop(self):\n        \"\"\"Stop the edge agent.\"\"\"\n        self.running = False\n        logger.info(\"Edge Agent stopped\")\n    \n    def sensor_collection_loop(self):\n        \"\"\"Main loop for sensor data collection.\"\"\"\n        while self.running:\n            try:\n                for sensor_type, connection in self.sensor_connections.items():\n                    reading = self.read_sensor(sensor_type, connection)\n                    if reading:\n                        self.store_sensor_reading(reading)\n                        self.publish_sensor_data(reading)\n                \n                time.sleep(self.config['sampling_interval'])\n                \n            except Exception as e:\n                logger.error(f\"Sensor collection error: {e}\")\n                time.sleep(5)\n    \n    def read_sensor(self, sensor_type: str, connection: serial.Serial) -> Optional[SensorReading]:\n        \"\"\"Read data from a specific sensor.\"\"\"\n        try:\n            # Send request command\n            connection.write(b'READ\\n')\n            time.sleep(0.1)\n            \n            # Read response\n            response = connection.readline().decode().strip()\n            if response:\n                # Parse sensor response (format: \"VALUE:123.45\")\n                if ':' in response:\n                    value_str = response.split(':')[1]\n                    value = float(value_str)\n                    \n                    # Sensor-specific units\n                    units = {\n                        'strain': 'μɛ',\n                        'displacement': 'mm',\n                        'pore_pressure': 'kPa',\n                        'tilt': 'degrees',\n                        'vibration': 'Hz'\n                    }\n                    \n                    return SensorReading(\n                        sensor_id=f\"{self.config['site_id']}_{sensor_type}\",\n                        sensor_type=sensor_type,\n                        value=value,\n                        unit=units.get(sensor_type, 'units'),\n                        timestamp=datetime.now().isoformat(),\n                        quality=1.0\n                    )\n                    \n        except Exception as e:\n            logger.error(f\"Failed to read sensor {sensor_type}: {e}\")\n        \n        return None\n    \n    def store_sensor_reading(self, reading: SensorReading):\n        \"\"\"Store sensor reading in local database.\"\"\"\n        try:\n            self.local_db.execute(\n                '''INSERT INTO sensor_readings \n                   (sensor_id, sensor_type, value, unit, timestamp, quality)\n                   VALUES (?, ?, ?, ?, ?, ?)''',\n                (reading.sensor_id, reading.sensor_type, reading.value,\n                 reading.unit, reading.timestamp, reading.quality)\n            )\n            self.local_db.commit()\n            \n        except Exception as e:\n            logger.error(f\"Failed to store sensor reading: {e}\")\n    \n    def publish_sensor_data(self, reading: SensorReading):\n        \"\"\"Publish sensor data via MQTT.\"\"\"\n        if self.mqtt_client:\n            topic = self.config['mqtt']['topics']['sensor_data']\n            message = json.dumps(asdict(reading))\n            self.mqtt_client.publish(topic, message)\n    \n    def prediction_loop(self):\n        \"\"\"Main loop for making predictions.\"\"\"\n        while self.running:\n            try:\n                prediction = self.make_prediction()\n                if prediction:\n                    self.store_prediction(prediction)\n                    self.publish_prediction(prediction)\n                    self.handle_alerts(prediction)\n                \n                time.sleep(self.config['prediction_interval'])\n                \n            except Exception as e:\n                logger.error(f\"Prediction loop error: {e}\")\n                time.sleep(10)\n    \n    def make_prediction(self) -> Optional[PredictionResult]:\n        \"\"\"Make risk prediction using local models.\"\"\"\n        try:\n            # Get recent sensor data\n            sensor_features = self.get_recent_sensor_features()\n            \n            # Use lightweight model if available\n            if 'lightweight' in self.models:\n                model = self.models['lightweight']\n                \n                # Prepare input features\n                input_features = np.array([sensor_features], dtype=np.float32)\n                \n                # Run inference\n                input_name = model.get_inputs()[0].name\n                outputs = model.run(None, {input_name: input_features})\n                \n                # Process outputs\n                probabilities = outputs[0][0]  # Assuming softmax output\n                predicted_class = np.argmax(probabilities)\n                confidence = float(probabilities[predicted_class])\n                \n                # Map to risk levels\n                risk_levels = ['low', 'medium', 'high', 'critical']\n                risk_level = risk_levels[predicted_class]\n                \n                return PredictionResult(\n                    site_id=self.config['site_id'],\n                    probability=float(probabilities[predicted_class]),\n                    risk_level=risk_level,\n                    confidence=confidence,\n                    timestamp=datetime.now().isoformat(),\n                    model_version='lightweight_v1.0',\n                    uncertainty=0.1  # Default uncertainty\n                )\n            \n        except Exception as e:\n            logger.error(f\"Prediction failed: {e}\")\n        \n        return None\n    \n    def get_recent_sensor_features(self) -> List[float]:\n        \"\"\"Get recent sensor data as feature vector.\"\"\"\n        try:\n            # Get last 48 hours of data for each sensor type\n            cursor = self.local_db.cursor()\n            \n            features = []\n            sensor_types = ['strain', 'displacement', 'pore_pressure', 'tilt', 'vibration']\n            \n            for sensor_type in sensor_types:\n                cursor.execute('''\n                    SELECT value FROM sensor_readings \n                    WHERE sensor_type = ? \n                    ORDER BY timestamp DESC \n                    LIMIT 48\n                ''', (sensor_type,))\n                \n                readings = cursor.fetchall()\n                if readings:\n                    values = [r[0] for r in readings]\n                    \n                    # Calculate statistical features\n                    features.extend([\n                        np.mean(values),\n                        np.std(values),\n                        np.min(values),\n                        np.max(values),\n                        np.median(values)\n                    ])\n                else:\n                    # Default values if no data\n                    features.extend([0.0, 0.0, 0.0, 0.0, 0.0])\n            \n            # Add some basic site features\n            features.extend([\n                1000.0,  # elevation\n                30.0,    # slope_angle\n                180.0,   # aspect_angle\n                0.0,     # rainfall\n                15.0     # temperature\n            ])\n            \n            return features\n            \n        except Exception as e:\n            logger.error(f\"Feature extraction failed: {e}\")\n            return [0.0] * 30  # Default feature vector\n    \n    def store_prediction(self, prediction: PredictionResult):\n        \"\"\"Store prediction in local database.\"\"\"\n        try:\n            self.local_db.execute(\n                '''INSERT INTO predictions \n                   (site_id, probability, risk_level, confidence, timestamp, model_version, uncertainty)\n                   VALUES (?, ?, ?, ?, ?, ?, ?)''',\n                (prediction.site_id, prediction.probability, prediction.risk_level,\n                 prediction.confidence, prediction.timestamp, prediction.model_version,\n                 prediction.uncertainty)\n            )\n            self.local_db.commit()\n            \n        except Exception as e:\n            logger.error(f\"Failed to store prediction: {e}\")\n    \n    def publish_prediction(self, prediction: PredictionResult):\n        \"\"\"Publish prediction via MQTT.\"\"\"\n        if self.mqtt_client:\n            topic = self.config['mqtt']['topics']['predictions']\n            message = json.dumps(asdict(prediction))\n            self.mqtt_client.publish(topic, message)\n    \n    def handle_alerts(self, prediction: PredictionResult):\n        \"\"\"Handle alerts based on prediction risk level.\"\"\"\n        try:\n            risk_probability = prediction.probability\n            \n            if risk_probability >= self.config['thresholds']['critical_risk']:\n                self.trigger_critical_alert(prediction)\n            elif risk_probability >= self.config['thresholds']['high_risk']:\n                self.trigger_high_risk_alert(prediction)\n            \n        except Exception as e:\n            logger.error(f\"Alert handling failed: {e}\")\n    \n    def trigger_critical_alert(self, prediction: PredictionResult):\n        \"\"\"Trigger critical risk alert.\"\"\"\n        logger.critical(f\"CRITICAL RISK DETECTED: {prediction.probability:.2%}\")\n        \n        # Visual/audio alerts\n        self.activate_buzzer(duration=10, pattern='continuous')\n        self.activate_led(duration=60, pattern='fast_blink')\n        \n        # Send alert via MQTT\n        alert_message = {\n            'type': 'critical_alert',\n            'site_id': self.config['site_id'],\n            'prediction': asdict(prediction),\n            'timestamp': datetime.now().isoformat(),\n            'message': 'Critical rockfall risk detected - immediate action required'\n        }\n        \n        if self.mqtt_client:\n            topic = self.config['mqtt']['topics']['alerts']\n            self.mqtt_client.publish(topic, json.dumps(alert_message))\n        \n        # Try to send SMS if GSM modem available\n        self.send_emergency_sms(alert_message)\n    \n    def trigger_high_risk_alert(self, prediction: PredictionResult):\n        \"\"\"Trigger high risk alert.\"\"\"\n        logger.warning(f\"HIGH RISK DETECTED: {prediction.probability:.2%}\")\n        \n        # Visual alert\n        self.activate_led(duration=30, pattern='slow_blink')\n        \n        # Send alert via MQTT\n        alert_message = {\n            'type': 'high_risk_alert',\n            'site_id': self.config['site_id'],\n            'prediction': asdict(prediction),\n            'timestamp': datetime.now().isoformat(),\n            'message': 'Elevated rockfall risk detected - monitor closely'\n        }\n        \n        if self.mqtt_client:\n            topic = self.config['mqtt']['topics']['alerts']\n            self.mqtt_client.publish(topic, json.dumps(alert_message))\n    \n    def activate_buzzer(self, duration: int = 5, pattern: str = 'continuous'):\n        \"\"\"Activate buzzer with specified pattern.\"\"\"\n        if not GPIO_AVAILABLE:\n            return\n        \n        def buzzer_thread():\n            try:\n                if pattern == 'continuous':\n                    GPIO.output(self.buzzer_pin, GPIO.HIGH)\n                    time.sleep(duration)\n                    GPIO.output(self.buzzer_pin, GPIO.LOW)\n                elif pattern == 'beeps':\n                    for _ in range(duration):\n                        GPIO.output(self.buzzer_pin, GPIO.HIGH)\n                        time.sleep(0.5)\n                        GPIO.output(self.buzzer_pin, GPIO.LOW)\n                        time.sleep(0.5)\n            except Exception as e:\n                logger.error(f\"Buzzer activation failed: {e}\")\n        \n        threading.Thread(target=buzzer_thread, daemon=True).start()\n    \n    def activate_led(self, duration: int = 10, pattern: str = 'solid'):\n        \"\"\"Activate LED with specified pattern.\"\"\"\n        if not GPIO_AVAILABLE:\n            return\n        \n        def led_thread():\n            try:\n                if pattern == 'solid':\n                    GPIO.output(self.led_pin, GPIO.HIGH)\n                    time.sleep(duration)\n                    GPIO.output(self.led_pin, GPIO.LOW)\n                elif pattern == 'fast_blink':\n                    end_time = time.time() + duration\n                    while time.time() < end_time:\n                        GPIO.output(self.led_pin, GPIO.HIGH)\n                        time.sleep(0.2)\n                        GPIO.output(self.led_pin, GPIO.LOW)\n                        time.sleep(0.2)\n                elif pattern == 'slow_blink':\n                    end_time = time.time() + duration\n                    while time.time() < end_time:\n                        GPIO.output(self.led_pin, GPIO.HIGH)\n                        time.sleep(1.0)\n                        GPIO.output(self.led_pin, GPIO.LOW)\n                        time.sleep(1.0)\n            except Exception as e:\n                logger.error(f\"LED activation failed: {e}\")\n        \n        threading.Thread(target=led_thread, daemon=True).start()\n    \n    def send_emergency_sms(self, alert_message: Dict[str, Any]):\n        \"\"\"Send emergency SMS if GSM modem is available.\"\"\"\n        try:\n            # Check for GSM modem (e.g., on /dev/ttyUSB5)\n            gsm_port = '/dev/ttyUSB5'\n            if os.path.exists(gsm_port):\n                gsm_connection = serial.Serial(gsm_port, 9600, timeout=1)\n                \n                # Emergency contact number (from config)\n                emergency_number = self.config.get('emergency_contact', '+1234567890')\n                \n                # SMS content\n                sms_text = (f\"ROCKFALL ALERT - Site {self.config['site_id']}: \"\n                           f\"{alert_message['message']} at {alert_message['timestamp']}\")\n                \n                # Send SMS using AT commands\n                gsm_connection.write(b'AT+CMGF=1\\r')  # Set SMS text mode\n                time.sleep(1)\n                gsm_connection.write(f'AT+CMGS=\"{emergency_number}\"\\r'.encode())\n                time.sleep(1)\n                gsm_connection.write(sms_text.encode() + b'\\x1A')  # Send SMS\n                \n                logger.info(f\"Emergency SMS sent to {emergency_number}\")\n                gsm_connection.close()\n                \n        except Exception as e:\n            logger.error(f\"Emergency SMS failed: {e}\")\n    \n    def camera_capture_loop(self):\n        \"\"\"Loop for periodic image capture.\"\"\"\n        while self.running and self.camera:\n            try:\n                image = self.capture_image()\n                if image:\n                    # Save image locally\n                    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n                    image_path = f\"/var/lib/rockfall/images/{timestamp}.jpg\"\n                    os.makedirs(os.path.dirname(image_path), exist_ok=True)\n                    \n                    if isinstance(image, np.ndarray):\n                        cv2.imwrite(image_path, image)\n                    else:\n                        image.save(image_path)\n                    \n                    logger.info(f\"Image captured: {image_path}\")\n                \n                time.sleep(self.config['camera']['capture_interval'])\n                \n            except Exception as e:\n                logger.error(f\"Camera capture error: {e}\")\n                time.sleep(60)\n    \n    def capture_image(self):\n        \"\"\"Capture image from camera.\"\"\"\n        try:\n            if PICAMERA_AVAILABLE and hasattr(self.camera, 'capture_array'):\n                # PiCamera2\n                image = self.camera.capture_array()\n                return image\n            elif self.camera and hasattr(self.camera, 'read'):\n                # OpenCV\n                ret, frame = self.camera.read()\n                if ret:\n                    return frame\n        except Exception as e:\n            logger.error(f\"Image capture failed: {e}\")\n        \n        return None\n    \n    def sync_loop(self):\n        \"\"\"Loop for syncing data with backend.\"\"\"\n        while self.running:\n            try:\n                self.sync_with_backend()\n                time.sleep(self.config['communication']['sync_interval'])\n                \n            except Exception as e:\n                logger.error(f\"Sync loop error: {e}\")\n                time.sleep(300)  # Wait 5 minutes on error\n    \n    def sync_with_backend(self):\n        \"\"\"Sync local data with backend server.\"\"\"\n        try:\n            backend_url = self.config['communication']['backend_url']\n            \n            # Sync sensor readings\n            cursor = self.local_db.cursor()\n            cursor.execute('SELECT * FROM sensor_readings WHERE synced = 0 LIMIT 100')\n            readings = cursor.fetchall()\n            \n            for reading in readings:\n                reading_data = {\n                    'type': 'sensor_reading',\n                    'data': {\n                        'sensorId': reading[1],\n                        'value': reading[3],\n                        'unit': reading[4],\n                        'quality': reading[6]\n                    }\n                }\n                \n                response = requests.post(\n                    f\"{backend_url}/api/v1/ingest\",\n                    json=reading_data,\n                    timeout=10\n                )\n                \n                if response.status_code == 200:\n                    # Mark as synced\n                    cursor.execute('UPDATE sensor_readings SET synced = 1 WHERE id = ?', (reading[0],))\n            \n            self.local_db.commit()\n            logger.info(f\"Synced {len(readings)} sensor readings\")\n            \n        except requests.exceptions.RequestException as e:\n            logger.warning(f\"Backend sync failed - operating in offline mode: {e}\")\n        except Exception as e:\n            logger.error(f\"Sync failed: {e}\")\n    \n    def publish_status(self):\n        \"\"\"Publish agent status.\"\"\"\n        try:\n            status = {\n                'site_id': self.config['site_id'],\n                'timestamp': datetime.now().isoformat(),\n                'status': 'online',\n                'sensors_connected': len(self.sensor_connections),\n                'models_loaded': len(self.models),\n                'camera_available': self.camera is not None,\n                'mqtt_connected': self.mqtt_client.is_connected() if self.mqtt_client else False,\n                'uptime': time.time() - getattr(self, 'start_time', time.time())\n            }\n            \n            if self.mqtt_client:\n                topic = self.config['mqtt']['topics']['status']\n                self.mqtt_client.publish(topic, json.dumps(status))\n                \n        except Exception as e:\n            logger.error(f\"Status publish failed: {e}\")\n    \n    def mqtt_message_callback(self, topic: str, message: str):\n        \"\"\"Handle incoming MQTT messages.\"\"\"\n        try:\n            data = json.loads(message)\n            command = data.get('command')\n            \n            if command == 'trigger_alert':\n                self.trigger_manual_alert()\n            elif command == 'capture_image':\n                self.capture_and_send_image()\n            elif command == 'restart':\n                self.restart_agent()\n            elif command == 'update_config':\n                self.update_config(data.get('config', {}))\n                \n        except Exception as e:\n            logger.error(f\"MQTT message handling failed: {e}\")\n    \n    def button_callback(self, channel):\n        \"\"\"Handle manual button press.\"\"\"\n        logger.info(\"Manual alert button pressed\")\n        self.trigger_manual_alert()\n    \n    def trigger_manual_alert(self):\n        \"\"\"Trigger manual alert.\"\"\"\n        alert_message = {\n            'type': 'manual_alert',\n            'site_id': self.config['site_id'],\n            'timestamp': datetime.now().isoformat(),\n            'message': 'Manual alert triggered by on-site personnel'\n        }\n        \n        if self.mqtt_client:\n            topic = self.config['mqtt']['topics']['alerts']\n            self.mqtt_client.publish(topic, json.dumps(alert_message))\n        \n        self.activate_led(duration=5, pattern='fast_blink')\n    \n    def signal_handler(self, signum, frame):\n        \"\"\"Handle system signals for graceful shutdown.\"\"\"\n        logger.info(f\"Received signal {signum}\")\n        self.stop()\n    \n    def cleanup(self):\n        \"\"\"Cleanup resources on shutdown.\"\"\"\n        try:\n            logger.info(\"Cleaning up resources...\")\n            \n            # Close sensor connections\n            for connection in self.sensor_connections.values():\n                if connection.is_open:\n                    connection.close()\n            \n            # Cleanup GPIO\n            if GPIO_AVAILABLE:\n                GPIO.cleanup()\n            \n            # Close camera\n            if self.camera:\n                if hasattr(self.camera, 'close'):\n                    self.camera.close()\n                elif hasattr(self.camera, 'release'):\n                    self.camera.release()\n            \n            # Close database\n            if self.local_db:\n                self.local_db.close()\n            \n            # Close MQTT\n            if self.mqtt_client:\n                self.mqtt_client.disconnect()\n                \n            logger.info(\"Cleanup completed\")\n            \n        except Exception as e:\n            logger.error(f\"Cleanup failed: {e}\")\n\n\ndef main():\n    \"\"\"Main entry point.\"\"\"\n    try:\n        # Check if running as root (required for GPIO)\n        if GPIO_AVAILABLE and os.geteuid() != 0:\n            print(\"WARNING: Not running as root. GPIO features may not work.\")\n        \n        # Initialize and start agent\n        agent = EdgeAgent()\n        agent.start_time = time.time()\n        agent.start()\n        \n    except Exception as e:\n        logger.error(f\"Agent startup failed: {e}\")\n        sys.exit(1)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":34338},"edge/mqtt_client.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nMQTT Client for Edge Agent Communication\nHandles pub/sub messaging between edge devices and central system.\n\"\"\"\n\nimport json\nimport logging\nimport threading\nimport time\nfrom typing import Dict, Any, Optional, Callable\nimport ssl\n\ntry:\n    import paho.mqtt.client as mqtt\n    MQTT_AVAILABLE = True\nexcept ImportError:\n    MQTT_AVAILABLE = False\n    print(\"WARNING: paho-mqtt not available. MQTT functionality disabled.\")\n\nlogger = logging.getLogger(__name__)\n\nclass MQTTClient:\n    \"\"\"\n    MQTT client wrapper for rockfall prediction system communication.\n    Handles connection management, message publishing, and subscription.\n    \"\"\"\n    \n    def __init__(\n        self,\n        broker: str,\n        port: int = 1883,\n        username: Optional[str] = None,\n        password: Optional[str] = None,\n        client_id: str = \"rockfall_edge\",\n        use_ssl: bool = False,\n        keepalive: int = 60\n    ):\n        \"\"\"Initialize MQTT client.\"\"\"\n        if not MQTT_AVAILABLE:\n            raise ImportError(\"paho-mqtt package is required for MQTT functionality\")\n        \n        self.broker = broker\n        self.port = port\n        self.username = username\n        self.password = password\n        self.client_id = client_id\n        self.use_ssl = use_ssl\n        self.keepalive = keepalive\n        \n        # Connection state\n        self.connected = False\n        self.connection_lock = threading.Lock()\n        \n        # Message callback\n        self.message_callback: Optional[Callable[[str, str], None]] = None\n        \n        # Initialize MQTT client\n        self.client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv311)\n        \n        # Set callbacks\n        self.client.on_connect = self._on_connect\n        self.client.on_disconnect = self._on_disconnect\n        self.client.on_message = self._on_message\n        self.client.on_publish = self._on_publish\n        self.client.on_subscribe = self._on_subscribe\n        self.client.on_log = self._on_log\n        \n        # Set credentials if provided\n        if username and password:\n            self.client.username_pw_set(username, password)\n        \n        # SSL configuration\n        if use_ssl:\n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n            self.client.tls_set_context(context)\n        \n        logger.info(f\"MQTT client initialized for broker {broker}:{port}\")\n    \n    def connect(self, retry_attempts: int = 5, retry_delay: int = 5) -> bool:\n        \"\"\"\n        Connect to MQTT broker with retry logic.\n        \n        Args:\n            retry_attempts: Number of connection attempts\n            retry_delay: Delay between attempts in seconds\n            \n        Returns:\n            True if connected successfully, False otherwise\n        \"\"\"\n        with self.connection_lock:\n            for attempt in range(retry_attempts):\n                try:\n                    logger.info(f\"Connecting to MQTT broker {self.broker}:{self.port} (attempt {attempt + 1})\")\n                    \n                    result = self.client.connect(self.broker, self.port, self.keepalive)\n                    \n                    if result == mqtt.MQTT_ERR_SUCCESS:\n                        # Start network loop in background thread\n                        self.client.loop_start()\n                        \n                        # Wait for connection confirmation\n                        wait_time = 0\n                        while not self.connected and wait_time < 10:\n                            time.sleep(0.5)\n                            wait_time += 0.5\n                        \n                        if self.connected:\n                            logger.info(\"MQTT connection established successfully\")\n                            return True\n                        else:\n                            logger.warning(\"MQTT connection timeout\")\n                    else:\n                        logger.error(f\"MQTT connection failed with code: {result}\")\n                \n                except Exception as e:\n                    logger.error(f\"MQTT connection attempt {attempt + 1} failed: {e}\")\n                \n                if attempt < retry_attempts - 1:\n                    time.sleep(retry_delay)\n            \n            logger.error(f\"Failed to connect to MQTT broker after {retry_attempts} attempts\")\n            return False\n    \n    def disconnect(self):\n        \"\"\"Disconnect from MQTT broker.\"\"\"\n        try:\n            with self.connection_lock:\n                if self.connected:\n                    self.client.loop_stop()\n                    self.client.disconnect()\n                    self.connected = False\n                    logger.info(\"MQTT client disconnected\")\n        \n        except Exception as e:\n            logger.error(f\"MQTT disconnect failed: {e}\")\n    \n    def publish(\n        self,\n        topic: str,\n        payload: str,\n        qos: int = 1,\n        retain: bool = False\n    ) -> bool:\n        \"\"\"\n        Publish message to MQTT topic.\n        \n        Args:\n            topic: MQTT topic\n            payload: Message payload\n            qos: Quality of Service level (0, 1, or 2)\n            retain: Whether to retain the message\n            \n        Returns:\n            True if message was queued successfully, False otherwise\n        \"\"\"\n        try:\n            if not self.connected:\n                logger.warning(\"Cannot publish - MQTT client not connected\")\n                return False\n            \n            result = self.client.publish(topic, payload, qos=qos, retain=retain)\n            \n            if result.rc == mqtt.MQTT_ERR_SUCCESS:\n                logger.debug(f\"Published to {topic}: {payload[:100]}...\")\n                return True\n            else:\n                logger.error(f\"Failed to publish to {topic}, error code: {result.rc}\")\n                return False\n        \n        except Exception as e:\n            logger.error(f\"MQTT publish failed: {e}\")\n            return False\n    \n    def subscribe(self, topic: str, qos: int = 1) -> bool:\n        \"\"\"\n        Subscribe to MQTT topic.\n        \n        Args:\n            topic: MQTT topic pattern\n            qos: Quality of Service level\n            \n        Returns:\n            True if subscription was successful, False otherwise\n        \"\"\"\n        try:\n            if not self.connected:\n                logger.warning(\"Cannot subscribe - MQTT client not connected\")\n                return False\n            \n            result, mid = self.client.subscribe(topic, qos=qos)\n            \n            if result == mqtt.MQTT_ERR_SUCCESS:\n                logger.info(f\"Subscribed to topic: {topic}\")\n                return True\n            else:\n                logger.error(f\"Failed to subscribe to {topic}, error code: {result}\")\n                return False\n        \n        except Exception as e:\n            logger.error(f\"MQTT subscribe failed: {e}\")\n            return False\n    \n    def unsubscribe(self, topic: str) -> bool:\n        \"\"\"Unsubscribe from MQTT topic.\"\"\"\n        try:\n            if not self.connected:\n                return False\n            \n            result, mid = self.client.unsubscribe(topic)\n            \n            if result == mqtt.MQTT_ERR_SUCCESS:\n                logger.info(f\"Unsubscribed from topic: {topic}\")\n                return True\n            else:\n                logger.error(f\"Failed to unsubscribe from {topic}, error code: {result}\")\n                return False\n        \n        except Exception as e:\n            logger.error(f\"MQTT unsubscribe failed: {e}\")\n            return False\n    \n    def set_message_callback(self, callback: Callable[[str, str], None]):\n        \"\"\"Set callback function for received messages.\"\"\"\n        self.message_callback = callback\n    \n    def is_connected(self) -> bool:\n        \"\"\"Check if client is connected to broker.\"\"\"\n        return self.connected\n    \n    def publish_json(self, topic: str, data: Dict[str, Any], **kwargs) -> bool:\n        \"\"\"Publish JSON data to topic.\"\"\"\n        try:\n            payload = json.dumps(data, default=str)\n            return self.publish(topic, payload, **kwargs)\n        except Exception as e:\n            logger.error(f\"JSON publish failed: {e}\")\n            return False\n    \n    def publish_sensor_data(self, sensor_data: Dict[str, Any]) -> bool:\n        \"\"\"Publish sensor data with standard format.\"\"\"\n        topic = f\"rockfall/sensor/{sensor_data.get('site_id', 'unknown')}\"\n        return self.publish_json(topic, sensor_data)\n    \n    def publish_prediction(self, prediction: Dict[str, Any]) -> bool:\n        \"\"\"Publish prediction with standard format.\"\"\"\n        topic = f\"rockfall/prediction/{prediction.get('site_id', 'unknown')}\"\n        return self.publish_json(topic, prediction)\n    \n    def publish_alert(self, alert: Dict[str, Any]) -> bool:\n        \"\"\"Publish alert with high priority.\"\"\"\n        topic = f\"rockfall/alert/{alert.get('site_id', 'unknown')}\"\n        return self.publish_json(topic, alert, qos=2, retain=True)\n    \n    # MQTT event callbacks\n    def _on_connect(self, client, userdata, flags, rc):\n        \"\"\"Callback for when client connects to broker.\"\"\"\n        if rc == 0:\n            self.connected = True\n            logger.info(\"MQTT client connected successfully\")\n        else:\n            self.connected = False\n            error_messages = {\n                1: \"Connection refused - incorrect protocol version\",\n                2: \"Connection refused - invalid client identifier\",\n                3: \"Connection refused - server unavailable\",\n                4: \"Connection refused - bad username or password\",\n                5: \"Connection refused - not authorised\"\n            }\n            error_msg = error_messages.get(rc, f\"Connection refused - unknown error ({rc})\")\n            logger.error(f\"MQTT connection failed: {error_msg}\")\n    \n    def _on_disconnect(self, client, userdata, rc):\n        \"\"\"Callback for when client disconnects from broker.\"\"\"\n        self.connected = False\n        if rc != 0:\n            logger.warning(f\"MQTT client disconnected unexpectedly (code: {rc})\")\n        else:\n            logger.info(\"MQTT client disconnected\")\n    \n    def _on_message(self, client, userdata, msg):\n        \"\"\"Callback for when message is received.\"\"\"\n        try:\n            topic = msg.topic\n            payload = msg.payload.decode('utf-8')\n            \n            logger.debug(f\"Received message on {topic}: {payload[:100]}...\")\n            \n            # Call user-defined callback if set\n            if self.message_callback:\n                self.message_callback(topic, payload)\n        \n        except Exception as e:\n            logger.error(f\"Message handling failed: {e}\")\n    \n    def _on_publish(self, client, userdata, mid):\n        \"\"\"Callback for when message is published.\"\"\"\n        logger.debug(f\"Message published (mid: {mid})\")\n    \n    def _on_subscribe(self, client, userdata, mid, granted_qos):\n        \"\"\"Callback for when subscription is acknowledged.\"\"\"\n        logger.debug(f\"Subscription confirmed (mid: {mid}, QoS: {granted_qos})\")\n    \n    def _on_log(self, client, userdata, level, buf):\n        \"\"\"Callback for MQTT client logging.\"\"\"\n        if level == mqtt.MQTT_LOG_DEBUG:\n            logger.debug(f\"MQTT: {buf}\")\n        elif level == mqtt.MQTT_LOG_INFO:\n            logger.info(f\"MQTT: {buf}\")\n        elif level == mqtt.MQTT_LOG_WARNING:\n            logger.warning(f\"MQTT: {buf}\")\n        elif level == mqtt.MQTT_LOG_ERR:\n            logger.error(f\"MQTT: {buf}\")\n\n\nclass MQTTTopicManager:\n    \"\"\"Helper class for managing MQTT topics with consistent naming.\"\"\"\n    \n    def __init__(self, base_topic: str = \"rockfall\"):\n        self.base_topic = base_topic.rstrip('/')\n    \n    def sensor_data(self, site_id: str, sensor_type: str = None) -> str:\n        \"\"\"Generate sensor data topic.\"\"\"\n        if sensor_type:\n            return f\"{self.base_topic}/sensor/{site_id}/{sensor_type}\"\n        return f\"{self.base_topic}/sensor/{site_id}\"\n    \n    def prediction(self, site_id: str) -> str:\n        \"\"\"Generate prediction topic.\"\"\"\n        return f\"{self.base_topic}/prediction/{site_id}\"\n    \n    def alert(self, site_id: str, severity: str = None) -> str:\n        \"\"\"Generate alert topic.\"\"\"\n        if severity:\n            return f\"{self.base_topic}/alert/{site_id}/{severity}\"\n        return f\"{self.base_topic}/alert/{site_id}\"\n    \n    def status(self, site_id: str) -> str:\n        \"\"\"Generate status topic.\"\"\"\n        return f\"{self.base_topic}/status/{site_id}\"\n    \n    def control(self, site_id: str) -> str:\n        \"\"\"Generate control topic.\"\"\"\n        return f\"{self.base_topic}/control/{site_id}\"\n    \n    def system(self, message_type: str) -> str:\n        \"\"\"Generate system topic.\"\"\"\n        return f\"{self.base_topic}/system/{message_type}\"\n\n\n# Example usage and testing\nif __name__ == '__main__':\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='MQTT Client Test')\n    parser.add_argument('--broker', default='localhost', help='MQTT broker host')\n    parser.add_argument('--port', type=int, default=1883, help='MQTT broker port')\n    parser.add_argument('--username', help='MQTT username')\n    parser.add_argument('--password', help='MQTT password')\n    parser.add_argument('--test-publish', action='store_true', help='Test publishing')\n    parser.add_argument('--test-subscribe', action='store_true', help='Test subscription')\n    \n    args = parser.parse_args()\n    \n    # Setup logging\n    logging.basicConfig(level=logging.INFO)\n    \n    def message_handler(topic: str, message: str):\n        print(f\"Received on {topic}: {message}\")\n    \n    # Create client\n    client = MQTTClient(\n        broker=args.broker,\n        port=args.port,\n        username=args.username,\n        password=args.password,\n        client_id=\"test_client\"\n    )\n    \n    client.set_message_callback(message_handler)\n    \n    # Connect\n    if client.connect():\n        print(\"Connected successfully\")\n        \n        if args.test_subscribe:\n            client.subscribe(\"rockfall/+/+\")\n            print(\"Subscribed to rockfall topics\")\n            \n            # Keep alive for receiving messages\n            try:\n                while True:\n                    time.sleep(1)\n            except KeyboardInterrupt:\n                print(\"Stopping...\")\n        \n        if args.test_publish:\n            # Test publishing\n            test_data = {\n                \"site_id\": \"TEST_001\",\n                \"sensor_type\": \"strain\",\n                \"value\": 150.5,\n                \"timestamp\": \"2024-01-01T12:00:00Z\"\n            }\n            \n            client.publish_sensor_data(test_data)\n            print(\"Test message published\")\n            time.sleep(2)\n        \n        client.disconnect()\n    else:\n        print(\"Connection failed\")\n","size_bytes":14957},"ml/train.py":{"content":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Dataset\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom typing import Dict, Any, Tuple, List, Optional\nimport json\nimport os\nfrom datetime import datetime\nimport logging\nimport wandb\n\nfrom models.fusion_model import create_fusion_model, MultiModalFusionModel\nfrom models.cnn_model import create_cnn_model, ImageProcessor\nfrom models.lstm_model import create_lstm_model, SensorDataProcessor\nfrom utils.data_processor import RockfallDataset, create_data_loaders\nfrom utils.explainability import ExplainabilityAnalyzer\nfrom utils.synthetic_data import SyntheticDataGenerator\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass RockfallTrainer:\n    \"\"\"\n    Main training class for rockfall prediction models.\n    Supports single modality and multi-modal fusion training.\n    \"\"\"\n    \n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        \n        # Initialize model\n        self.model = self._create_model()\n        self.model.to(self.device)\n        \n        # Loss function\n        if config.get('weighted_loss', False):\n            class_weights = torch.tensor(config.get('class_weights', [1.0, 1.0, 1.0, 1.0]))\n            self.criterion = nn.CrossEntropyLoss(weight=class_weights.to(self.device))\n        else:\n            self.criterion = nn.CrossEntropyLoss()\n        \n        # Optimizer\n        self.optimizer = self._create_optimizer()\n        \n        # Scheduler\n        self.scheduler = self._create_scheduler()\n        \n        # Metrics tracking\n        self.train_losses = []\n        self.val_losses = []\n        self.train_accuracies = []\n        self.val_accuracies = []\n        \n        # Best model tracking\n        self.best_val_loss = float('inf')\n        self.best_model_state = None\n        \n        # Explainability analyzer\n        self.explainer = ExplainabilityAnalyzer(self.model)\n        \n    def _create_model(self) -> nn.Module:\n        \"\"\"Create model based on configuration.\"\"\"\n        model_type = self.config.get('model_type', 'fusion')\n        \n        if model_type == 'fusion':\n            return create_fusion_model(self.config)\n        elif model_type == 'cnn':\n            return create_cnn_model(self.config)\n        elif model_type == 'lstm':\n            return create_lstm_model(self.config)\n        else:\n            raise ValueError(f\"Unknown model type: {model_type}\")\n    \n    def _create_optimizer(self) -> optim.Optimizer:\n        \"\"\"Create optimizer based on configuration.\"\"\"\n        optimizer_type = self.config.get('optimizer', 'adam')\n        lr = self.config.get('learning_rate', 0.001)\n        weight_decay = self.config.get('weight_decay', 1e-5)\n        \n        if optimizer_type == 'adam':\n            return optim.Adam(self.model.parameters(), lr=lr, weight_decay=weight_decay)\n        elif optimizer_type == 'adamw':\n            return optim.AdamW(self.model.parameters(), lr=lr, weight_decay=weight_decay)\n        elif optimizer_type == 'sgd':\n            momentum = self.config.get('momentum', 0.9)\n            return optim.SGD(self.model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)\n        else:\n            raise ValueError(f\"Unknown optimizer: {optimizer_type}\")\n    \n    def _create_scheduler(self) -> Optional[optim.lr_scheduler._LRScheduler]:\n        \"\"\"Create learning rate scheduler.\"\"\"\n        scheduler_type = self.config.get('scheduler', None)\n        \n        if scheduler_type == 'step':\n            step_size = self.config.get('step_size', 10)\n            gamma = self.config.get('gamma', 0.1)\n            return optim.lr_scheduler.StepLR(self.optimizer, step_size=step_size, gamma=gamma)\n        elif scheduler_type == 'cosine':\n            T_max = self.config.get('T_max', 50)\n            return optim.lr_scheduler.CosineAnnealingLR(self.optimizer, T_max=T_max)\n        elif scheduler_type == 'reduce_on_plateau':\n            patience = self.config.get('patience', 5)\n            factor = self.config.get('factor', 0.5)\n            return optim.lr_scheduler.ReduceLROnPlateau(\n                self.optimizer, mode='min', patience=patience, factor=factor\n            )\n        \n        return None\n    \n    def train_epoch(self, train_loader: DataLoader) -> Tuple[float, float]:\n        \"\"\"Train for one epoch.\"\"\"\n        self.model.train()\n        \n        total_loss = 0.0\n        all_predictions = []\n        all_targets = []\n        \n        for batch_idx, batch in enumerate(train_loader):\n            # Move data to device\n            images = batch.get('images', None)\n            sensor_data = batch.get('sensor_data', None)\n            sensor_lengths = batch.get('sensor_lengths', None)\n            tabular_features = batch.get('tabular_features', None)\n            targets = batch['targets'].to(self.device)\n            \n            if images is not None:\n                images = images.to(self.device)\n            if sensor_data is not None:\n                sensor_data = sensor_data.to(self.device)\n            if sensor_lengths is not None:\n                sensor_lengths = sensor_lengths.to(self.device)\n            if tabular_features is not None:\n                tabular_features = tabular_features.to(self.device)\n            \n            # Zero gradients\n            self.optimizer.zero_grad()\n            \n            # Forward pass\n            if isinstance(self.model, MultiModalFusionModel):\n                outputs = self.model(images, sensor_data, sensor_lengths, tabular_features)\n                logits = outputs['logits']\n            else:\n                logits, _ = self.model(images if images is not None else sensor_data)\n            \n            # Calculate loss\n            loss = self.criterion(logits, targets)\n            \n            # Add uncertainty loss if available\n            if isinstance(self.model, MultiModalFusionModel) and outputs.get('uncertainty') is not None:\n                uncertainty_loss = torch.mean(outputs['uncertainty'])\n                loss += 0.1 * uncertainty_loss  # Weight uncertainty loss\n            \n            # Backward pass\n            loss.backward()\n            \n            # Gradient clipping\n            if self.config.get('grad_clip', 0) > 0:\n                torch.nn.utils.clip_grad_norm_(self.model.parameters(), self.config['grad_clip'])\n            \n            self.optimizer.step()\n            \n            # Track metrics\n            total_loss += loss.item()\n            predictions = torch.argmax(logits, dim=1)\n            all_predictions.extend(predictions.cpu().numpy())\n            all_targets.extend(targets.cpu().numpy())\n            \n            # Log progress\n            if batch_idx % self.config.get('log_interval', 100) == 0:\n                logger.info(f'Train Batch {batch_idx}/{len(train_loader)}, Loss: {loss.item():.4f}')\n        \n        avg_loss = total_loss / len(train_loader)\n        accuracy = accuracy_score(all_targets, all_predictions)\n        \n        return avg_loss, accuracy\n    \n    def validate_epoch(self, val_loader: DataLoader) -> Tuple[float, float, Dict[str, float]]:\n        \"\"\"Validate for one epoch.\"\"\"\n        self.model.eval()\n        \n        total_loss = 0.0\n        all_predictions = []\n        all_targets = []\n        all_probabilities = []\n        \n        with torch.no_grad():\n            for batch in val_loader:\n                # Move data to device\n                images = batch.get('images', None)\n                sensor_data = batch.get('sensor_data', None)\n                sensor_lengths = batch.get('sensor_lengths', None)\n                tabular_features = batch.get('tabular_features', None)\n                targets = batch['targets'].to(self.device)\n                \n                if images is not None:\n                    images = images.to(self.device)\n                if sensor_data is not None:\n                    sensor_data = sensor_data.to(self.device)\n                if sensor_lengths is not None:\n                    sensor_lengths = sensor_lengths.to(self.device)\n                if tabular_features is not None:\n                    tabular_features = tabular_features.to(self.device)\n                \n                # Forward pass\n                if isinstance(self.model, MultiModalFusionModel):\n                    outputs = self.model(images, sensor_data, sensor_lengths, tabular_features)\n                    logits = outputs['logits']\n                    probabilities = outputs['probabilities']\n                else:\n                    logits, _ = self.model(images if images is not None else sensor_data)\n                    probabilities = torch.softmax(logits, dim=1)\n                \n                # Calculate loss\n                loss = self.criterion(logits, targets)\n                total_loss += loss.item()\n                \n                # Track predictions\n                predictions = torch.argmax(logits, dim=1)\n                all_predictions.extend(predictions.cpu().numpy())\n                all_targets.extend(targets.cpu().numpy())\n                all_probabilities.extend(probabilities.cpu().numpy())\n        \n        avg_loss = total_loss / len(val_loader)\n        accuracy = accuracy_score(all_targets, all_predictions)\n        \n        # Calculate additional metrics\n        metrics = {\n            'accuracy': accuracy,\n            'precision': precision_score(all_targets, all_predictions, average='weighted', zero_division=0),\n            'recall': recall_score(all_targets, all_predictions, average='weighted', zero_division=0),\n            'f1_score': f1_score(all_targets, all_predictions, average='weighted', zero_division=0)\n        }\n        \n        # Calculate AUC for binary classification (high risk vs others)\n        try:\n            binary_targets = [1 if t >= 2 else 0 for t in all_targets]  # High/Critical risk vs Low/Medium\n            binary_probs = [sum(p[2:]) for p in all_probabilities]  # Sum of high/critical probabilities\n            metrics['auc_roc'] = roc_auc_score(binary_targets, binary_probs)\n        except:\n            metrics['auc_roc'] = 0.0\n        \n        return avg_loss, accuracy, metrics\n    \n    def train(self, train_loader: DataLoader, val_loader: DataLoader) -> Dict[str, Any]:\n        \"\"\"Main training loop.\"\"\"\n        num_epochs = self.config.get('num_epochs', 100)\n        early_stopping_patience = self.config.get('early_stopping_patience', 10)\n        \n        # Initialize tracking\n        best_val_loss = float('inf')\n        patience_counter = 0\n        \n        # Training loop\n        for epoch in range(num_epochs):\n            logger.info(f'Epoch {epoch+1}/{num_epochs}')\n            \n            # Train\n            train_loss, train_acc = self.train_epoch(train_loader)\n            self.train_losses.append(train_loss)\n            self.train_accuracies.append(train_acc)\n            \n            # Validate\n            val_loss, val_acc, val_metrics = self.validate_epoch(val_loader)\n            self.val_losses.append(val_loss)\n            self.val_accuracies.append(val_acc)\n            \n            # Log metrics\n            logger.info(f'Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}')\n            logger.info(f'Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.4f}')\n            logger.info(f'Val Metrics: {val_metrics}')\n            \n            # Log to wandb if enabled\n            if self.config.get('use_wandb', False):\n                wandb.log({\n                    'epoch': epoch,\n                    'train_loss': train_loss,\n                    'train_accuracy': train_acc,\n                    'val_loss': val_loss,\n                    'val_accuracy': val_acc,\n                    **{f'val_{k}': v for k, v in val_metrics.items()}\n                })\n            \n            # Update learning rate\n            if self.scheduler is not None:\n                if isinstance(self.scheduler, optim.lr_scheduler.ReduceLROnPlateau):\n                    self.scheduler.step(val_loss)\n                else:\n                    self.scheduler.step()\n            \n            # Early stopping and best model saving\n            if val_loss < best_val_loss:\n                best_val_loss = val_loss\n                patience_counter = 0\n                self.best_model_state = self.model.state_dict().copy()\n                \n                # Save best model\n                if self.config.get('save_path'):\n                    self.save_model(self.config['save_path'], epoch, val_metrics)\n            else:\n                patience_counter += 1\n            \n            if patience_counter >= early_stopping_patience:\n                logger.info(f'Early stopping after {epoch+1} epochs')\n                break\n        \n        # Load best model\n        if self.best_model_state is not None:\n            self.model.load_state_dict(self.best_model_state)\n        \n        return {\n            'best_val_loss': best_val_loss,\n            'final_metrics': val_metrics,\n            'num_epochs': epoch + 1\n        }\n    \n    def save_model(self, save_path: str, epoch: int, metrics: Dict[str, float]):\n        \"\"\"Save model checkpoint.\"\"\"\n        os.makedirs(os.path.dirname(save_path), exist_ok=True)\n        \n        checkpoint = {\n            'epoch': epoch,\n            'model_state_dict': self.model.state_dict(),\n            'optimizer_state_dict': self.optimizer.state_dict(),\n            'config': self.config,\n            'metrics': metrics,\n            'timestamp': datetime.now().isoformat()\n        }\n        \n        if self.scheduler is not None:\n            checkpoint['scheduler_state_dict'] = self.scheduler.state_dict()\n        \n        torch.save(checkpoint, save_path)\n        logger.info(f'Model saved to {save_path}')\n    \n    def load_model(self, checkpoint_path: str):\n        \"\"\"Load model from checkpoint.\"\"\"\n        checkpoint = torch.load(checkpoint_path, map_location=self.device)\n        \n        self.model.load_state_dict(checkpoint['model_state_dict'])\n        self.optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n        \n        if 'scheduler_state_dict' in checkpoint and self.scheduler is not None:\n            self.scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n        \n        logger.info(f'Model loaded from {checkpoint_path}')\n        return checkpoint.get('metrics', {})\n    \n    def plot_training_curves(self, save_path: Optional[str] = None):\n        \"\"\"Plot training curves.\"\"\"\n        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))\n        \n        # Loss curves\n        epochs = range(1, len(self.train_losses) + 1)\n        ax1.plot(epochs, self.train_losses, 'b-', label='Train Loss')\n        ax1.plot(epochs, self.val_losses, 'r-', label='Validation Loss')\n        ax1.set_title('Training and Validation Loss')\n        ax1.set_xlabel('Epoch')\n        ax1.set_ylabel('Loss')\n        ax1.legend()\n        ax1.grid(True)\n        \n        # Accuracy curves\n        ax2.plot(epochs, self.train_accuracies, 'b-', label='Train Accuracy')\n        ax2.plot(epochs, self.val_accuracies, 'r-', label='Validation Accuracy')\n        ax2.set_title('Training and Validation Accuracy')\n        ax2.set_xlabel('Epoch')\n        ax2.set_ylabel('Accuracy')\n        ax2.legend()\n        ax2.grid(True)\n        \n        # Learning rate (if scheduler is used)\n        if self.scheduler is not None and hasattr(self.scheduler, 'get_last_lr'):\n            lrs = [self.scheduler.get_last_lr()[0] for _ in epochs]\n            ax3.plot(epochs, lrs, 'g-')\n            ax3.set_title('Learning Rate Schedule')\n            ax3.set_xlabel('Epoch')\n            ax3.set_ylabel('Learning Rate')\n            ax3.set_yscale('log')\n            ax3.grid(True)\n        \n        # Model complexity info\n        total_params = sum(p.numel() for p in self.model.parameters())\n        trainable_params = sum(p.numel() for p in self.model.parameters() if p.requires_grad)\n        ax4.text(0.1, 0.8, f'Total Parameters: {total_params:,}', transform=ax4.transAxes)\n        ax4.text(0.1, 0.7, f'Trainable Parameters: {trainable_params:,}', transform=ax4.transAxes)\n        ax4.text(0.1, 0.6, f'Model Size: {total_params * 4 / (1024**2):.2f} MB', transform=ax4.transAxes)\n        ax4.text(0.1, 0.5, f'Device: {self.device}', transform=ax4.transAxes)\n        ax4.set_title('Model Information')\n        ax4.axis('off')\n        \n        plt.tight_layout()\n        \n        if save_path:\n            plt.savefig(save_path, dpi=300, bbox_inches='tight')\n        \n        plt.show()\n\n\ndef main():\n    \"\"\"Main training function.\"\"\"\n    # Configuration\n    config = {\n        'model_type': 'fusion',\n        'num_epochs': 100,\n        'batch_size': 32,\n        'learning_rate': 0.001,\n        'weight_decay': 1e-5,\n        'optimizer': 'adamw',\n        'scheduler': 'cosine',\n        'T_max': 100,\n        'early_stopping_patience': 15,\n        'grad_clip': 1.0,\n        'weighted_loss': True,\n        'class_weights': [1.0, 1.2, 1.5, 2.0],  # Higher weight for critical risk\n        'use_wandb': False,\n        'save_path': 'models/checkpoints/fusion_model_best.pth',\n        'log_interval': 50,\n        \n        # Model-specific configs\n        'cnn_config': {\n            'num_classes': 4,\n            'dropout_rate': 0.5,\n            'output_size': 128\n        },\n        'lstm_config': {\n            'input_size': 5,\n            'hidden_size': 128,\n            'num_layers': 2,\n            'output_size': 64,\n            'dropout_rate': 0.3,\n            'bidirectional': True,\n            'use_attention': True\n        },\n        'tabular_input_size': 10,\n        'fusion_hidden_size': 256,\n        'num_classes': 4,\n        'dropout_rate': 0.3,\n        'use_uncertainty': True\n    }\n    \n    # Generate synthetic data if no real data available\n    data_generator = SyntheticDataGenerator(config)\n    \n    # Check for real data first\n    if os.path.exists('data/train.csv'):\n        logger.info(\"Using real data\")\n        train_loader, val_loader, test_loader = create_data_loaders(config)\n    else:\n        logger.info(\"Generating synthetic data for training\")\n        train_data, val_data, test_data = data_generator.generate_training_data(\n            num_samples=1000,\n            val_split=0.2,\n            test_split=0.1\n        )\n        \n        # Create data loaders from synthetic data\n        train_loader, val_loader, test_loader = data_generator.create_data_loaders(\n            train_data, val_data, test_data, config['batch_size']\n        )\n    \n    # Initialize wandb if enabled\n    if config.get('use_wandb', False):\n        wandb.init(project='rockfall-prediction', config=config)\n    \n    # Initialize trainer\n    trainer = RockfallTrainer(config)\n    \n    # Train model\n    logger.info(\"Starting training...\")\n    results = trainer.train(train_loader, val_loader)\n    \n    # Plot training curves\n    trainer.plot_training_curves('plots/training_curves.png')\n    \n    # Evaluate on test set\n    if test_loader is not None:\n        logger.info(\"Evaluating on test set...\")\n        test_loss, test_acc, test_metrics = trainer.validate_epoch(test_loader)\n        logger.info(f'Test Results - Loss: {test_loss:.4f}, Accuracy: {test_acc:.4f}')\n        logger.info(f'Test Metrics: {test_metrics}')\n    \n    # Export models\n    if isinstance(trainer.model, MultiModalFusionModel):\n        # Export to ONNX\n        logger.info(\"Exporting to ONNX...\")\n        example_batch = next(iter(val_loader))\n        example_inputs = {\n            'images': example_batch.get('images'),\n            'sensor_data': example_batch.get('sensor_data'),\n            'tabular_features': example_batch.get('tabular_features')\n        }\n        \n        from models.fusion_model import export_to_onnx, export_to_torchscript\n        export_to_onnx(trainer.model, 'models/exports/fusion_model.onnx', example_inputs)\n        export_to_torchscript(trainer.model, 'models/exports/fusion_model_script.pt')\n    \n    # Generate explainability report\n    logger.info(\"Generating explainability analysis...\")\n    explainer = ExplainabilityAnalyzer(trainer.model)\n    explanation_results = explainer.analyze_batch(next(iter(val_loader)))\n    \n    # Save results\n    with open('results/training_results.json', 'w') as f:\n        json.dump({\n            'config': config,\n            'results': results,\n            'test_metrics': test_metrics if 'test_metrics' in locals() else None,\n            'timestamp': datetime.now().isoformat()\n        }, f, indent=2)\n    \n    logger.info(\"Training completed successfully!\")\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":20916},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { mlService } from \"./services/ml-service\";\nimport { alertService } from \"./services/alert-service\";\nimport { websocketService } from \"./services/websocket-service\";\nimport { insertSiteSchema, insertSensorSchema, insertSensorReadingSchema, insertDroneImageSchema, insertAlertSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time alerts\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  websocketService.initialize(wss);\n\n  // Prediction endpoint\n  app.post(\"/api/v1/predict\", async (req, res) => {\n    try {\n      const { siteId, timestamp, sensorData, imageUrl } = req.body;\n      \n      if (!siteId) {\n        return res.status(400).json({ error: \"Site ID is required\" });\n      }\n\n      const prediction = await mlService.predict({\n        siteId,\n        timestamp: timestamp ? new Date(timestamp) : new Date(),\n        sensorData,\n        imageUrl\n      });\n\n      res.json(prediction);\n    } catch (error) {\n      console.error(\"Prediction error:\", error);\n      res.status(500).json({ error: \"Prediction failed\" });\n    }\n  });\n\n  // Data ingestion endpoint\n  app.post(\"/api/v1/ingest\", async (req, res) => {\n    try {\n      const { type, data } = req.body;\n\n      switch (type) {\n        case \"sensor_reading\":\n          const readingData = insertSensorReadingSchema.parse(data);\n          const reading = await storage.createSensorReading(readingData);\n          \n          // Update sensor status\n          await storage.updateSensorStatus(readingData.sensorId, \"active\");\n          \n          // Trigger prediction if needed\n          const sensor = await storage.getSensor(readingData.sensorId);\n          if (sensor) {\n            mlService.queuePrediction(sensor.siteId);\n          }\n          \n          res.json(reading);\n          break;\n\n        case \"drone_image\":\n          const imageData = insertDroneImageSchema.parse(data);\n          const image = await storage.createDroneImage(imageData);\n          \n          // Queue image processing\n          mlService.queueImageProcessing(image.id);\n          \n          res.json(image);\n          break;\n\n        default:\n          res.status(400).json({ error: \"Invalid data type\" });\n      }\n    } catch (error) {\n      console.error(\"Ingestion error:\", error);\n      res.status(400).json({ error: \"Invalid data format\" });\n    }\n  });\n\n  // Manual alert trigger\n  app.post(\"/api/v1/alert\", async (req, res) => {\n    try {\n      const alertData = insertAlertSchema.parse(req.body);\n      const alert = await storage.createAlert(alertData);\n      \n      // Send notifications\n      await alertService.sendAlert(alert);\n      \n      // Broadcast to WebSocket clients\n      websocketService.broadcast({\n        type: \"alert\",\n        data: alert\n      });\n\n      res.json(alert);\n    } catch (error) {\n      console.error(\"Alert creation error:\", error);\n      res.status(400).json({ error: \"Invalid alert data\" });\n    }\n  });\n\n  // Model registry\n  app.get(\"/api/v1/models\", async (req, res) => {\n    try {\n      const models = await storage.getModels();\n      res.json(models);\n    } catch (error) {\n      console.error(\"Models fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch models\" });\n    }\n  });\n\n  // Set active model\n  app.post(\"/api/v1/models/:id/activate\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { type } = req.body;\n      \n      await storage.setActiveModel(id, type);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Model activation error:\", error);\n      res.status(500).json({ error: \"Failed to activate model\" });\n    }\n  });\n\n  // Sites management\n  app.get(\"/api/v1/sites\", async (req, res) => {\n    try {\n      const sites = await storage.getSites();\n      res.json(sites);\n    } catch (error) {\n      console.error(\"Sites fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sites\" });\n    }\n  });\n\n  app.get(\"/api/v1/sites/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const site = await storage.getSite(id);\n      \n      if (!site) {\n        return res.status(404).json({ error: \"Site not found\" });\n      }\n\n      // Get additional site data\n      const sensors = await storage.getSensorsBySite(id);\n      const predictions = await storage.getPredictionsBySite(id, 10);\n      const alerts = await storage.getAlertsBySite(id);\n      const latestReadings = await storage.getLatestReadingsBySite(id);\n\n      res.json({\n        ...site,\n        sensors,\n        predictions,\n        alerts,\n        latestReadings\n      });\n    } catch (error) {\n      console.error(\"Site fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch site\" });\n    }\n  });\n\n  app.post(\"/api/v1/sites\", async (req, res) => {\n    try {\n      const siteData = insertSiteSchema.parse(req.body);\n      const site = await storage.createSite(siteData);\n      res.json(site);\n    } catch (error) {\n      console.error(\"Site creation error:\", error);\n      res.status(400).json({ error: \"Invalid site data\" });\n    }\n  });\n\n  // Sensors management\n  app.get(\"/api/v1/sites/:siteId/sensors\", async (req, res) => {\n    try {\n      const { siteId } = req.params;\n      const sensors = await storage.getSensorsBySite(siteId);\n      res.json(sensors);\n    } catch (error) {\n      console.error(\"Sensors fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sensors\" });\n    }\n  });\n\n  app.post(\"/api/v1/sites/:siteId/sensors\", async (req, res) => {\n    try {\n      const { siteId } = req.params;\n      const sensorData = insertSensorSchema.parse({ ...req.body, siteId });\n      const sensor = await storage.createSensor(sensorData);\n      res.json(sensor);\n    } catch (error) {\n      console.error(\"Sensor creation error:\", error);\n      res.status(400).json({ error: \"Invalid sensor data\" });\n    }\n  });\n\n  // Sensor readings\n  app.get(\"/api/v1/sensors/:sensorId/readings\", async (req, res) => {\n    try {\n      const { sensorId } = req.params;\n      const { from, to } = req.query;\n      \n      const fromDate = from ? new Date(from as string) : undefined;\n      const toDate = to ? new Date(to as string) : undefined;\n      \n      const readings = await storage.getSensorReadings(sensorId, fromDate, toDate);\n      res.json(readings);\n    } catch (error) {\n      console.error(\"Readings fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch readings\" });\n    }\n  });\n\n  // Alerts management\n  app.get(\"/api/v1/alerts\", async (req, res) => {\n    try {\n      const alerts = await storage.getActiveAlerts();\n      res.json(alerts);\n    } catch (error) {\n      console.error(\"Alerts fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch alerts\" });\n    }\n  });\n\n  app.post(\"/api/v1/alerts/:id/acknowledge\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { userId } = req.body;\n      \n      await storage.acknowledgeAlert(id, userId);\n      \n      // Broadcast acknowledgment\n      websocketService.broadcast({\n        type: \"alert_acknowledged\",\n        data: { alertId: id, userId }\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Alert acknowledgment error:\", error);\n      res.status(500).json({ error: \"Failed to acknowledge alert\" });\n    }\n  });\n\n  // Dashboard metrics\n  app.get(\"/api/v1/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getRiskMetrics();\n      \n      // Get active model performance\n      const activeModel = await storage.getActiveModel(\"fusion\");\n      const modelAccuracy = activeModel?.metrics ? \n        (activeModel.metrics as any).accuracy * 100 : 94.7;\n\n      res.json({\n        ...metrics,\n        modelAccuracy: modelAccuracy.toFixed(1)\n      });\n    } catch (error) {\n      console.error(\"Metrics fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // Dashboard trends\n  app.get(\"/api/v1/dashboard/trends/:timeRange?\", async (req, res) => {\n    try {\n      const { timeRange = \"24h\" } = req.params;\n      \n      // Calculate time window\n      let timeWindow = 24; // hours\n      switch (timeRange) {\n        case \"7d\":\n          timeWindow = 24 * 7;\n          break;\n        case \"30d\":\n          timeWindow = 24 * 30;\n          break;\n        default:\n          timeWindow = 24;\n      }\n\n      // Generate sample trend data for the time range\n      const endTime = new Date();\n      const startTime = new Date(endTime.getTime() - timeWindow * 60 * 60 * 1000);\n      \n      // Get recent predictions for trending\n      const predictions = await storage.getPredictionsBySite(\"\", 100); // Get from all sites\n      \n      // Generate trend data points\n      const dataPoints: Array<{\n        timestamp: string;\n        averageRisk: number;\n        activeSensors: number;\n        alertCount: number;\n      }> = [];\n\n      const pointCount = Math.min(timeWindow / (timeRange === \"24h\" ? 1 : timeRange === \"7d\" ? 6 : 24), 50);\n      \n      for (let i = 0; i < pointCount; i++) {\n        const pointTime = new Date(startTime.getTime() + (i * (timeWindow * 60 * 60 * 1000) / pointCount));\n        \n        dataPoints.push({\n          timestamp: pointTime.toISOString(),\n          averageRisk: 0.2 + Math.random() * 0.6, // Random between 0.2 and 0.8\n          activeSensors: 20 + Math.floor(Math.random() * 10), // Random between 20-30\n          alertCount: Math.floor(Math.random() * 5) // Random between 0-4\n        });\n      }\n\n      res.json({\n        timeRange,\n        data: dataPoints,\n        summary: {\n          totalDataPoints: dataPoints.length,\n          averageRisk: dataPoints.reduce((sum, p) => sum + p.averageRisk, 0) / dataPoints.length,\n          peakRisk: Math.max(...dataPoints.map(p => p.averageRisk)),\n          totalAlerts: dataPoints.reduce((sum, p) => sum + p.alertCount, 0)\n        }\n      });\n    } catch (error) {\n      console.error(\"Trends fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch trends\" });\n    }\n  });\n\n  // Predictions history\n  app.get(\"/api/v1/predictions\", async (req, res) => {\n    try {\n      const { siteId, limit } = req.query;\n      \n      if (!siteId) {\n        return res.status(400).json({ error: \"Site ID is required\" });\n      }\n\n      const predictions = await storage.getPredictionsBySite(\n        siteId as string, \n        limit ? parseInt(limit as string) : 10\n      );\n      \n      res.json(predictions);\n    } catch (error) {\n      console.error(\"Predictions fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch predictions\" });\n    }\n  });\n\n  // Drone images\n  app.get(\"/api/v1/sites/:siteId/images\", async (req, res) => {\n    try {\n      const { siteId } = req.params;\n      const images = await storage.getDroneImagesBySite(siteId);\n      res.json(images);\n    } catch (error) {\n      console.error(\"Images fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch images\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":11379},"server/storage.ts":{"content":"import { \n  sites, sensors, sensorReadings, droneImages, predictions, alerts, models, alertNotifications, users,\n  type Site, type InsertSite, type Sensor, type InsertSensor, type SensorReading, type InsertSensorReading,\n  type DroneImage, type InsertDroneImage, type Prediction, type InsertPrediction, type Alert, type InsertAlert,\n  type Model, type InsertModel, type AlertNotification, type InsertAlertNotification, type User, type InsertUser\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Sites\n  getSites(): Promise<Site[]>;\n  getSite(id: string): Promise<Site | undefined>;\n  createSite(site: InsertSite): Promise<Site>;\n  updateSiteRiskLevel(id: string, riskLevel: string): Promise<void>;\n\n  // Sensors\n  getSensorsBySite(siteId: string): Promise<Sensor[]>;\n  getSensor(id: string): Promise<Sensor | undefined>;\n  createSensor(sensor: InsertSensor): Promise<Sensor>;\n  updateSensorStatus(id: string, status: string, batteryLevel?: number): Promise<void>;\n\n  // Sensor Readings\n  getSensorReadings(sensorId: string, from?: Date, to?: Date): Promise<SensorReading[]>;\n  createSensorReading(reading: InsertSensorReading): Promise<SensorReading>;\n  getLatestReadingsBySite(siteId: string): Promise<(SensorReading & { sensor: Sensor })[]>;\n\n  // Drone Images\n  getDroneImagesBySite(siteId: string): Promise<DroneImage[]>;\n  createDroneImage(image: InsertDroneImage): Promise<DroneImage>;\n  markImageProcessed(id: string): Promise<void>;\n\n  // Predictions\n  getPredictionsBySite(siteId: string, limit?: number): Promise<Prediction[]>;\n  getLatestPrediction(siteId: string): Promise<Prediction | undefined>;\n  createPrediction(prediction: InsertPrediction): Promise<Prediction>;\n\n  // Alerts\n  getActiveAlerts(): Promise<(Alert & { site: Site })[]>;\n  getAlertsBySite(siteId: string): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  acknowledgeAlert(id: string, userId: string): Promise<void>;\n\n  // Models\n  getModels(): Promise<Model[]>;\n  getActiveModel(type: string): Promise<Model | undefined>;\n  createModel(model: InsertModel): Promise<Model>;\n  setActiveModel(id: string, type: string): Promise<void>;\n\n  // Alert Notifications\n  createAlertNotification(notification: InsertAlertNotification): Promise<AlertNotification>;\n  updateNotificationStatus(id: string, status: string): Promise<void>;\n\n  // Analytics\n  getRiskMetrics(): Promise<{\n    highRisk: number;\n    mediumRisk: number;\n    lowRisk: number;\n    activeSensors: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getSites(): Promise<Site[]> {\n    return await db.select().from(sites).orderBy(sites.name);\n  }\n\n  async getSite(id: string): Promise<Site | undefined> {\n    const [site] = await db.select().from(sites).where(eq(sites.id, id));\n    return site || undefined;\n  }\n\n  async createSite(insertSite: InsertSite): Promise<Site> {\n    const [site] = await db.insert(sites).values(insertSite).returning();\n    return site;\n  }\n\n  async updateSiteRiskLevel(id: string, riskLevel: string): Promise<void> {\n    await db.update(sites)\n      .set({ riskLevel, updatedAt: new Date() })\n      .where(eq(sites.id, id));\n  }\n\n  async getSensorsBySite(siteId: string): Promise<Sensor[]> {\n    return await db.select().from(sensors).where(eq(sensors.siteId, siteId));\n  }\n\n  async getSensor(id: string): Promise<Sensor | undefined> {\n    const [sensor] = await db.select().from(sensors).where(eq(sensors.id, id));\n    return sensor || undefined;\n  }\n\n  async createSensor(insertSensor: InsertSensor): Promise<Sensor> {\n    const [sensor] = await db.insert(sensors).values(insertSensor).returning();\n    return sensor;\n  }\n\n  async updateSensorStatus(id: string, status: string, batteryLevel?: number): Promise<void> {\n    const updateData: any = { status, lastReading: new Date() };\n    if (batteryLevel !== undefined) {\n      updateData.batteryLevel = batteryLevel;\n    }\n    await db.update(sensors).set(updateData).where(eq(sensors.id, id));\n  }\n\n  async getSensorReadings(sensorId: string, from?: Date, to?: Date): Promise<SensorReading[]> {\n    let conditions = [eq(sensorReadings.sensorId, sensorId)];\n    \n    if (from) {\n      conditions.push(gte(sensorReadings.timestamp, from));\n    }\n    if (to) {\n      conditions.push(lte(sensorReadings.timestamp, to));\n    }\n    \n    return await db\n      .select()\n      .from(sensorReadings)\n      .where(and(...conditions))\n      .orderBy(desc(sensorReadings.timestamp));\n  }\n\n  async createSensorReading(insertReading: InsertSensorReading): Promise<SensorReading> {\n    const [reading] = await db.insert(sensorReadings).values(insertReading).returning();\n    return reading;\n  }\n\n  async getLatestReadingsBySite(siteId: string): Promise<(SensorReading & { sensor: Sensor })[]> {\n    return await db\n      .select({\n        id: sensorReadings.id,\n        sensorId: sensorReadings.sensorId,\n        value: sensorReadings.value,\n        unit: sensorReadings.unit,\n        quality: sensorReadings.quality,\n        timestamp: sensorReadings.timestamp,\n        sensor: sensors\n      })\n      .from(sensorReadings)\n      .innerJoin(sensors, eq(sensorReadings.sensorId, sensors.id))\n      .where(eq(sensors.siteId, siteId))\n      .orderBy(desc(sensorReadings.timestamp))\n      .limit(50);\n  }\n\n  async getDroneImagesBySite(siteId: string): Promise<DroneImage[]> {\n    return await db.select().from(droneImages)\n      .where(eq(droneImages.siteId, siteId))\n      .orderBy(desc(droneImages.captureTime));\n  }\n\n  async createDroneImage(insertImage: InsertDroneImage): Promise<DroneImage> {\n    const [image] = await db.insert(droneImages).values(insertImage).returning();\n    return image;\n  }\n\n  async markImageProcessed(id: string): Promise<void> {\n    await db.update(droneImages).set({ processed: true }).where(eq(droneImages.id, id));\n  }\n\n  async getPredictionsBySite(siteId: string, limit = 10): Promise<Prediction[]> {\n    return await db.select().from(predictions)\n      .where(eq(predictions.siteId, siteId))\n      .orderBy(desc(predictions.timestamp))\n      .limit(limit);\n  }\n\n  async getLatestPrediction(siteId: string): Promise<Prediction | undefined> {\n    const [prediction] = await db.select().from(predictions)\n      .where(eq(predictions.siteId, siteId))\n      .orderBy(desc(predictions.timestamp))\n      .limit(1);\n    return prediction || undefined;\n  }\n\n  async createPrediction(insertPrediction: InsertPrediction): Promise<Prediction> {\n    const [prediction] = await db.insert(predictions).values(insertPrediction).returning();\n    return prediction;\n  }\n\n  async getActiveAlerts(): Promise<(Alert & { site: Site })[]> {\n    return await db\n      .select({\n        id: alerts.id,\n        siteId: alerts.siteId,\n        predictionId: alerts.predictionId,\n        type: alerts.type,\n        severity: alerts.severity,\n        title: alerts.title,\n        message: alerts.message,\n        actionPlan: alerts.actionPlan,\n        status: alerts.status,\n        acknowledgedBy: alerts.acknowledgedBy,\n        acknowledgedAt: alerts.acknowledgedAt,\n        createdAt: alerts.createdAt,\n        site: sites\n      })\n      .from(alerts)\n      .innerJoin(sites, eq(alerts.siteId, sites.id))\n      .where(eq(alerts.status, \"active\"))\n      .orderBy(desc(alerts.createdAt));\n  }\n\n  async getAlertsBySite(siteId: string): Promise<Alert[]> {\n    return await db.select().from(alerts)\n      .where(eq(alerts.siteId, siteId))\n      .orderBy(desc(alerts.createdAt));\n  }\n\n  async createAlert(insertAlert: InsertAlert): Promise<Alert> {\n    const [alert] = await db.insert(alerts).values(insertAlert).returning();\n    return alert;\n  }\n\n  async acknowledgeAlert(id: string, userId: string): Promise<void> {\n    await db.update(alerts)\n      .set({ \n        status: \"acknowledged\", \n        acknowledgedBy: userId, \n        acknowledgedAt: new Date() \n      })\n      .where(eq(alerts.id, id));\n  }\n\n  async getModels(): Promise<Model[]> {\n    return await db.select().from(models).orderBy(desc(models.trainedAt));\n  }\n\n  async getActiveModel(type: string): Promise<Model | undefined> {\n    const [model] = await db.select().from(models)\n      .where(and(eq(models.type, type), eq(models.isActive, true)));\n    return model || undefined;\n  }\n\n  async createModel(insertModel: InsertModel): Promise<Model> {\n    const [model] = await db.insert(models).values(insertModel).returning();\n    return model;\n  }\n\n  async setActiveModel(id: string, type: string): Promise<void> {\n    // Deactivate all models of this type\n    await db.update(models)\n      .set({ isActive: false })\n      .where(eq(models.type, type));\n    \n    // Activate the selected model\n    await db.update(models)\n      .set({ isActive: true })\n      .where(eq(models.id, id));\n  }\n\n  async createAlertNotification(insertNotification: InsertAlertNotification): Promise<AlertNotification> {\n    const [notification] = await db.insert(alertNotifications).values(insertNotification).returning();\n    return notification;\n  }\n\n  async updateNotificationStatus(id: string, status: string): Promise<void> {\n    const updateData: any = { status };\n    if (status === \"sent\") {\n      updateData.sentAt = new Date();\n    }\n    await db.update(alertNotifications).set(updateData).where(eq(alertNotifications.id, id));\n  }\n\n  async getRiskMetrics(): Promise<{\n    highRisk: number;\n    mediumRisk: number;\n    lowRisk: number;\n    activeSensors: number;\n  }> {\n    const [riskCounts] = await db\n      .select({\n        highRisk: sql<number>`count(*) filter (where risk_level in ('high', 'critical'))`,\n        mediumRisk: sql<number>`count(*) filter (where risk_level = 'medium')`,\n        lowRisk: sql<number>`count(*) filter (where risk_level = 'low')`,\n      })\n      .from(sites)\n      .where(eq(sites.isActive, true));\n\n    const [sensorCount] = await db\n      .select({\n        activeSensors: sql<number>`count(*)`\n      })\n      .from(sensors)\n      .where(eq(sensors.status, \"active\"));\n\n    return {\n      highRisk: riskCounts.highRisk,\n      mediumRisk: riskCounts.mediumRisk,\n      lowRisk: riskCounts.lowRisk,\n      activeSensors: sensorCount.activeSensors,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10932},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, real, boolean, jsonb, point } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull().default(\"observer\"), // admin, planner, observer\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sites = pgTable(\"sites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  location: point(\"location\", { mode: \"xy\" }).notNull(), // PostGIS point\n  elevation: real(\"elevation\"),\n  slopeAngle: real(\"slope_angle\"),\n  aspectAngle: real(\"aspect_angle\"),\n  riskLevel: text(\"risk_level\").notNull().default(\"low\"), // low, medium, high, critical\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const sensors = pgTable(\"sensors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").references(() => sites.id).notNull(),\n  type: text(\"type\").notNull(), // strain, displacement, pore_pressure, tilt, vibration\n  location: point(\"location\", { mode: \"xy\" }).notNull(),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, maintenance\n  lastReading: timestamp(\"last_reading\"),\n  batteryLevel: real(\"battery_level\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sensorReadings = pgTable(\"sensor_readings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sensorId: varchar(\"sensor_id\").references(() => sensors.id).notNull(),\n  value: real(\"value\").notNull(),\n  unit: text(\"unit\").notNull(),\n  quality: real(\"quality\").default(1.0), // data quality score 0-1\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const droneImages = pgTable(\"drone_images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").references(() => sites.id).notNull(),\n  filename: text(\"filename\").notNull(),\n  fileUrl: text(\"file_url\").notNull(),\n  captureTime: timestamp(\"capture_time\").notNull(),\n  metadata: jsonb(\"metadata\"), // camera settings, GPS, weather\n  processed: boolean(\"processed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const predictions = pgTable(\"predictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").references(() => sites.id).notNull(),\n  probability: real(\"probability\").notNull(), // 0-1 risk probability\n  confidence: real(\"confidence\").notNull(), // model confidence\n  riskLevel: text(\"risk_level\").notNull(), // low, medium, high, critical\n  modelVersion: text(\"model_version\").notNull(),\n  features: jsonb(\"features\"), // input features used\n  explanation: jsonb(\"explanation\"), // SHAP values, top features\n  uncertainty: real(\"uncertainty\"), // aleatoric uncertainty\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").references(() => sites.id).notNull(),\n  predictionId: varchar(\"prediction_id\").references(() => predictions.id),\n  type: text(\"type\").notNull(), // threshold, trend, anomaly\n  severity: text(\"severity\").notNull(), // low, medium, high, critical\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  actionPlan: text(\"action_plan\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, acknowledged, resolved\n  acknowledgedBy: varchar(\"acknowledged_by\").references(() => users.id),\n  acknowledgedAt: timestamp(\"acknowledged_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const models = pgTable(\"models\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  version: text(\"version\").notNull(),\n  type: text(\"type\").notNull(), // cnn, lstm, fusion, ensemble\n  filePath: text(\"file_path\").notNull(),\n  metrics: jsonb(\"metrics\"), // accuracy, precision, recall, f1\n  isActive: boolean(\"is_active\").default(false),\n  trainedAt: timestamp(\"trained_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const alertNotifications = pgTable(\"alert_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  alertId: varchar(\"alert_id\").references(() => alerts.id).notNull(),\n  channel: text(\"channel\").notNull(), // sms, email, whatsapp, push\n  recipient: text(\"recipient\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, sent, failed\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const sitesRelations = relations(sites, ({ many }) => ({\n  sensors: many(sensors),\n  droneImages: many(droneImages),\n  predictions: many(predictions),\n  alerts: many(alerts),\n}));\n\nexport const sensorsRelations = relations(sensors, ({ one, many }) => ({\n  site: one(sites, {\n    fields: [sensors.siteId],\n    references: [sites.id],\n  }),\n  readings: many(sensorReadings),\n}));\n\nexport const sensorReadingsRelations = relations(sensorReadings, ({ one }) => ({\n  sensor: one(sensors, {\n    fields: [sensorReadings.sensorId],\n    references: [sensors.id],\n  }),\n}));\n\nexport const droneImagesRelations = relations(droneImages, ({ one }) => ({\n  site: one(sites, {\n    fields: [droneImages.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const predictionsRelations = relations(predictions, ({ one }) => ({\n  site: one(sites, {\n    fields: [predictions.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const alertsRelations = relations(alerts, ({ one, many }) => ({\n  site: one(sites, {\n    fields: [alerts.siteId],\n    references: [sites.id],\n  }),\n  prediction: one(predictions, {\n    fields: [alerts.predictionId],\n    references: [predictions.id],\n  }),\n  acknowledgedByUser: one(users, {\n    fields: [alerts.acknowledgedBy],\n    references: [users.id],\n  }),\n  notifications: many(alertNotifications),\n}));\n\nexport const alertNotificationsRelations = relations(alertNotifications, ({ one }) => ({\n  alert: one(alerts, {\n    fields: [alertNotifications.alertId],\n    references: [alerts.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSiteSchema = createInsertSchema(sites).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSensorSchema = createInsertSchema(sensors).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSensorReadingSchema = createInsertSchema(sensorReadings).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertDroneImageSchema = createInsertSchema(droneImages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPredictionSchema = createInsertSchema(predictions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertModelSchema = createInsertSchema(models).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAlertNotificationSchema = createInsertSchema(alertNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Site = typeof sites.$inferSelect;\nexport type InsertSite = z.infer<typeof insertSiteSchema>;\nexport type Sensor = typeof sensors.$inferSelect;\nexport type InsertSensor = z.infer<typeof insertSensorSchema>;\nexport type SensorReading = typeof sensorReadings.$inferSelect;\nexport type InsertSensorReading = z.infer<typeof insertSensorReadingSchema>;\nexport type DroneImage = typeof droneImages.$inferSelect;\nexport type InsertDroneImage = z.infer<typeof insertDroneImageSchema>;\nexport type Prediction = typeof predictions.$inferSelect;\nexport type InsertPrediction = z.infer<typeof insertPredictionSchema>;\nexport type Alert = typeof alerts.$inferSelect;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type Model = typeof models.$inferSelect;\nexport type InsertModel = z.infer<typeof insertModelSchema>;\nexport type AlertNotification = typeof alertNotifications.$inferSelect;\nexport type InsertAlertNotification = z.infer<typeof insertAlertNotificationSchema>;\n","size_bytes":8731},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport SiteMonitoring from \"@/pages/site-monitoring\";\nimport ModelManagement from \"@/pages/model-management\";\nimport DataUpload from \"@/pages/data-upload\";\nimport NotFound from \"@/pages/not-found\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/sites\" component={SiteMonitoring} />\n          <Route path=\"/models\" component={ModelManagement} />\n          <Route path=\"/upload\" component={DataUpload} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  // Initialize WebSocket connection\n  useWebSocket();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1404},"client/src/index.css":{"content":"/* Leaflet CSS import - must come first */\n@import 'leaflet/dist/leaflet.css';\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(210, 83%, 53%);\n  --chart-1: hsl(210, 83%, 53%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --success: hsl(142, 71%, 45%);\n  --warning: hsl(38, 92%, 50%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(210, 83%, 53%);\n  --success: hsl(142, 71%, 45%);\n  --warning: hsl(38, 92%, 50%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n/* Custom animations for real-time data */\n@keyframes pulse-dot {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n@keyframes pulse {\n  0%, 100% { transform: scale(1); opacity: 1; }\n  50% { transform: scale(1.1); opacity: 0.8; }\n}\n\n.pulse-dot {\n  animation: pulse-dot 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Map container styling */\n.map-container {\n  background: linear-gradient(45deg, hsl(210, 83%, 53%, 0.1), hsl(142, 71%, 45%, 0.1));\n  position: relative;\n}\n\n/* Leaflet map container */\n.leaflet-container {\n  height: 100%;\n  width: 100%;\n  border-radius: 0.5rem;\n}\n\n/* Custom marker styles */\n.leaflet-marker-icon {\n  border-radius: 50% !important;\n  border: 2px solid white !important;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.3) !important;\n}\n\n/* Risk level marker colors */\n.risk-marker-critical {\n  background-color: hsl(0, 84.2%, 60.2%) !important;\n  animation: pulse-dot 2s infinite;\n}\n\n.risk-marker-high {\n  background-color: hsl(0, 84.2%, 60.2%) !important;\n  animation: pulse-dot 2s infinite;\n}\n\n.risk-marker-medium {\n  background-color: hsl(38, 92%, 50%) !important;\n}\n\n.risk-marker-low {\n  background-color: hsl(142, 71%, 45%) !important;\n}\n\n/* Leaflet popup customization */\n.leaflet-popup-content-wrapper {\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n}\n\n.leaflet-popup-content {\n  margin: 1rem;\n  line-height: 1.4;\n}\n\n/* Simulate event button */\n.simulate-event-button {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  z-index: 1000;\n}\n\n.map-overlay {\n  background: rgba(0, 0, 0, 0.6);\n  backdrop-filter: blur(4px);\n}\n\n/* Risk level colors */\n.risk-critical {\n  color: hsl(0, 84.2%, 60.2%);\n  background-color: hsl(0, 84.2%, 60.2%, 0.1);\n}\n\n.risk-high {\n  color: hsl(0, 84.2%, 60.2%);\n  background-color: hsl(0, 84.2%, 60.2%, 0.1);\n}\n\n.risk-medium {\n  color: hsl(38, 92%, 50%);\n  background-color: hsl(38, 92%, 50%, 0.1);\n}\n\n.risk-low {\n  color: hsl(142, 71%, 45%);\n  background-color: hsl(142, 71%, 45%, 0.1);\n}\n\n/* Status indicators */\n.status-online {\n  color: hsl(142, 71%, 45%);\n}\n\n.status-offline {\n  color: hsl(215.4, 16.3%, 46.9%);\n}\n\n.status-warning {\n  color: hsl(38, 92%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":6185},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"ml/models/cnn_model.py":{"content":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import models\nimport torchvision.transforms as transforms\nfrom typing import Tuple, Dict, Any\nimport numpy as np\n\nclass DroneImageCNN(nn.Module):\n    \"\"\"\n    CNN model for drone imagery analysis using pretrained ResNet50 backbone.\n    Supports GradCAM for explainability.\n    \"\"\"\n    \n    def __init__(self, num_classes: int = 4, dropout_rate: float = 0.5):\n        super(DroneImageCNN, self).__init__()\n        \n        # Load pretrained ResNet50\n        self.backbone = models.resnet50(pretrained=True)\n        \n        # Remove the final classification layer\n        self.features = nn.Sequential(*list(self.backbone.children())[:-2])\n        \n        # Global Average Pooling\n        self.global_pool = nn.AdaptiveAvgPool2d((1, 1))\n        \n        # Feature extraction layers\n        self.feature_dim = 2048\n        self.classifier = nn.Sequential(\n            nn.Dropout(dropout_rate),\n            nn.Linear(self.feature_dim, 512),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate / 2),\n            nn.Linear(512, 128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, num_classes)\n        )\n        \n        # GradCAM hook storage\n        self.gradients = None\n        self.activations = None\n        \n    def forward(self, x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Forward pass with feature extraction for fusion model.\n        \n        Args:\n            x: Input tensor of shape (batch_size, 3, H, W)\n            \n        Returns:\n            Tuple of (classification_output, extracted_features)\n        \"\"\"\n        # Feature extraction\n        features = self.features(x)\n        \n        # Store activations for GradCAM\n        if self.training:\n            features.register_hook(self.save_gradients)\n        self.activations = features\n        \n        # Global pooling and classification\n        pooled = self.global_pool(features)\n        flattened = pooled.view(pooled.size(0), -1)\n        \n        # Classification head\n        output = self.classifier(flattened)\n        \n        return output, flattened\n    \n    def save_gradients(self, grad):\n        \"\"\"Hook function to save gradients for GradCAM.\"\"\"\n        self.gradients = grad\n    \n    def get_gradcam(self, class_idx: int = None) -> np.ndarray:\n        \"\"\"\n        Generate GradCAM heatmap for explainability.\n        \n        Args:\n            class_idx: Target class index for GradCAM\n            \n        Returns:\n            GradCAM heatmap as numpy array\n        \"\"\"\n        if self.gradients is None or self.activations is None:\n            raise ValueError(\"No gradients or activations available. Run forward pass first.\")\n        \n        # Get gradients and activations\n        gradients = self.gradients[0]  # Take first sample in batch\n        activations = self.activations[0]\n        \n        # Global average pooling of gradients\n        weights = torch.mean(gradients, dim=(1, 2))\n        \n        # Weighted combination of activation maps\n        gradcam = torch.zeros(activations.shape[1:])\n        for i, w in enumerate(weights):\n            gradcam += w * activations[i]\n        \n        # ReLU and normalization\n        gradcam = F.relu(gradcam)\n        gradcam = gradcam / torch.max(gradcam)\n        \n        return gradcam.detach().cpu().numpy()\n    \n    def extract_features(self, x: torch.Tensor) -> torch.Tensor:\n        \"\"\"Extract features without classification.\"\"\"\n        features = self.features(x)\n        pooled = self.global_pool(features)\n        return pooled.view(pooled.size(0), -1)\n\n\nclass ImageProcessor:\n    \"\"\"Preprocessing and augmentation for drone images.\"\"\"\n    \n    def __init__(self, image_size: Tuple[int, int] = (224, 224)):\n        self.image_size = image_size\n        \n        # Training augmentations\n        self.train_transform = transforms.Compose([\n            transforms.Resize((256, 256)),\n            transforms.RandomCrop(image_size),\n            transforms.RandomHorizontalFlip(p=0.5),\n            transforms.RandomRotation(degrees=15),\n            transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], \n                               std=[0.229, 0.224, 0.225])\n        ])\n        \n        # Validation/inference transforms\n        self.val_transform = transforms.Compose([\n            transforms.Resize(image_size),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], \n                               std=[0.229, 0.224, 0.225])\n        ])\n    \n    def preprocess_training(self, image):\n        \"\"\"Apply training augmentations.\"\"\"\n        return self.train_transform(image)\n    \n    def preprocess_inference(self, image):\n        \"\"\"Apply inference preprocessing.\"\"\"\n        return self.val_transform(image)\n\n\ndef create_cnn_model(config: Dict[str, Any]) -> DroneImageCNN:\n    \"\"\"\n    Factory function to create CNN model with configuration.\n    \n    Args:\n        config: Model configuration dictionary\n        \n    Returns:\n        Configured CNN model\n    \"\"\"\n    model = DroneImageCNN(\n        num_classes=config.get('num_classes', 4),\n        dropout_rate=config.get('dropout_rate', 0.5)\n    )\n    \n    # Load pretrained weights if specified\n    if 'pretrained_path' in config:\n        checkpoint = torch.load(config['pretrained_path'], map_location='cpu')\n        model.load_state_dict(checkpoint['model_state_dict'])\n    \n    return model\n\n\ndef calculate_model_complexity(model: DroneImageCNN) -> Dict[str, int]:\n    \"\"\"Calculate model complexity metrics.\"\"\"\n    total_params = sum(p.numel() for p in model.parameters())\n    trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    \n    return {\n        'total_parameters': total_params,\n        'trainable_parameters': trainable_params,\n        'model_size_mb': total_params * 4 / (1024 * 1024)  # Assuming float32\n    }\n","size_bytes":6061},"ml/models/fusion_model.py":{"content":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\nfrom typing import Dict, Any, Tuple, Optional\nfrom .cnn_model import DroneImageCNN\nfrom .lstm_model import SensorLSTM\nimport json\n\nclass MultiModalFusionModel(nn.Module):\n    \"\"\"\n    Multi-modal fusion model combining CNN (images), LSTM (sensors), and tabular features.\n    Implements uncertainty estimation and explainability features.\n    \"\"\"\n    \n    def __init__(\n        self,\n        cnn_config: Dict[str, Any],\n        lstm_config: Dict[str, Any],\n        tabular_input_size: int = 10,  # DEM + weather features\n        fusion_hidden_size: int = 256,\n        num_classes: int = 4,\n        dropout_rate: float = 0.3,\n        use_uncertainty: bool = True\n    ):\n        super(MultiModalFusionModel, self).__init__()\n        \n        self.use_uncertainty = use_uncertainty\n        \n        # Individual modality models\n        self.cnn_model = DroneImageCNN(**cnn_config)\n        self.lstm_model = SensorLSTM(**lstm_config)\n        \n        # Tabular feature processor\n        self.tabular_processor = nn.Sequential(\n            nn.Linear(tabular_input_size, 64),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate),\n            nn.Linear(64, 32),\n            nn.ReLU(inplace=True)\n        )\n        \n        # Feature dimensions\n        cnn_feature_dim = cnn_config.get('output_size', 128)\n        lstm_feature_dim = lstm_config.get('output_size', 64)\n        tabular_feature_dim = 32\n        \n        total_feature_dim = cnn_feature_dim + lstm_feature_dim + tabular_feature_dim\n        \n        # Cross-modal attention\n        self.cross_attention = nn.MultiheadAttention(\n            embed_dim=total_feature_dim,\n            num_heads=8,\n            dropout=dropout_rate,\n            batch_first=True\n        )\n        \n        # Fusion layers\n        self.fusion_layers = nn.Sequential(\n            nn.Linear(total_feature_dim, fusion_hidden_size),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate),\n            nn.Linear(fusion_hidden_size, fusion_hidden_size // 2),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate / 2)\n        )\n        \n        # Classification head\n        self.classifier = nn.Linear(fusion_hidden_size // 2, num_classes)\n        \n        # Uncertainty estimation (aleatoric)\n        if use_uncertainty:\n            self.uncertainty_head = nn.Linear(fusion_hidden_size // 2, 1)\n        \n        # Feature importance for explainability\n        self.feature_importance = nn.Linear(fusion_hidden_size // 2, 3)  # importance for each modality\n        \n    def forward(\n        self, \n        images: Optional[torch.Tensor] = None,\n        sensor_data: Optional[torch.Tensor] = None,\n        sensor_lengths: Optional[torch.Tensor] = None,\n        tabular_features: Optional[torch.Tensor] = None\n    ) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Forward pass through fusion model.\n        \n        Args:\n            images: Drone images tensor (batch_size, 3, H, W)\n            sensor_data: Sensor time series (batch_size, seq_len, num_sensors)\n            sensor_lengths: Actual lengths of sensor sequences\n            tabular_features: DEM and weather features (batch_size, feature_dim)\n            \n        Returns:\n            Dictionary containing predictions, uncertainty, and feature importance\n        \"\"\"\n        features = []\n        modality_masks = []\n        \n        # Process images\n        if images is not None:\n            _, cnn_features = self.cnn_model(images)\n            features.append(cnn_features)\n            modality_masks.append(torch.ones(cnn_features.size(0), 1, device=images.device))\n        else:\n            # Zero padding for missing modality\n            batch_size = sensor_data.size(0) if sensor_data is not None else tabular_features.size(0)\n            cnn_features = torch.zeros(batch_size, self.cnn_model.feature_dim, device=self.get_device())\n            features.append(cnn_features)\n            modality_masks.append(torch.zeros(batch_size, 1, device=self.get_device()))\n        \n        # Process sensor data\n        if sensor_data is not None:\n            _, lstm_features = self.lstm_model(sensor_data, sensor_lengths)\n            features.append(lstm_features)\n            modality_masks.append(torch.ones(lstm_features.size(0), 1, device=sensor_data.device))\n        else:\n            batch_size = images.size(0) if images is not None else tabular_features.size(0)\n            lstm_features = torch.zeros(batch_size, self.lstm_model.output_size, device=self.get_device())\n            features.append(lstm_features)\n            modality_masks.append(torch.zeros(batch_size, 1, device=self.get_device()))\n        \n        # Process tabular features\n        if tabular_features is not None:\n            tab_features = self.tabular_processor(tabular_features)\n            features.append(tab_features)\n            modality_masks.append(torch.ones(tab_features.size(0), 1, device=tabular_features.device))\n        else:\n            batch_size = images.size(0) if images is not None else sensor_data.size(0)\n            tab_features = torch.zeros(batch_size, 32, device=self.get_device())\n            features.append(tab_features)\n            modality_masks.append(torch.zeros(batch_size, 1, device=self.get_device()))\n        \n        # Concatenate all features\n        fused_features = torch.cat(features, dim=1)\n        \n        # Apply cross-modal attention\n        attended_features, attention_weights = self.cross_attention(\n            fused_features.unsqueeze(1),\n            fused_features.unsqueeze(1),\n            fused_features.unsqueeze(1)\n        )\n        attended_features = attended_features.squeeze(1)\n        \n        # Fusion processing\n        fusion_output = self.fusion_layers(attended_features)\n        \n        # Classification\n        logits = self.classifier(fusion_output)\n        probabilities = F.softmax(logits, dim=1)\n        \n        # Uncertainty estimation\n        uncertainty = None\n        if self.use_uncertainty:\n            log_variance = self.uncertainty_head(fusion_output)\n            uncertainty = torch.exp(log_variance)\n        \n        # Feature importance\n        modality_importance = F.softmax(self.feature_importance(fusion_output), dim=1)\n        \n        return {\n            'logits': logits,\n            'probabilities': probabilities,\n            'uncertainty': uncertainty,\n            'modality_importance': modality_importance,\n            'attention_weights': attention_weights,\n            'modality_masks': torch.cat(modality_masks, dim=1)\n        }\n    \n    def get_device(self) -> torch.device:\n        \"\"\"Get device of the model.\"\"\"\n        return next(self.parameters()).device\n    \n    def predict_with_uncertainty(\n        self,\n        images: Optional[torch.Tensor] = None,\n        sensor_data: Optional[torch.Tensor] = None,\n        sensor_lengths: Optional[torch.Tensor] = None,\n        tabular_features: Optional[torch.Tensor] = None,\n        num_samples: int = 10\n    ) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Prediction with Monte Carlo dropout for epistemic uncertainty.\n        \n        Args:\n            num_samples: Number of MC samples for uncertainty estimation\n            \n        Returns:\n            Dictionary with mean predictions and uncertainty estimates\n        \"\"\"\n        self.train()  # Enable dropout\n        \n        predictions = []\n        uncertainties = []\n        \n        with torch.no_grad():\n            for _ in range(num_samples):\n                output = self.forward(images, sensor_data, sensor_lengths, tabular_features)\n                predictions.append(output['probabilities'])\n                if output['uncertainty'] is not None:\n                    uncertainties.append(output['uncertainty'])\n        \n        self.eval()  # Disable dropout\n        \n        # Calculate statistics\n        predictions_stack = torch.stack(predictions)\n        mean_prediction = torch.mean(predictions_stack, dim=0)\n        epistemic_uncertainty = torch.var(predictions_stack, dim=0)\n        \n        aleatoric_uncertainty = None\n        if uncertainties:\n            aleatoric_uncertainty = torch.mean(torch.stack(uncertainties), dim=0)\n        \n        return {\n            'mean_prediction': mean_prediction,\n            'epistemic_uncertainty': epistemic_uncertainty,\n            'aleatoric_uncertainty': aleatoric_uncertainty,\n            'prediction_std': torch.std(predictions_stack, dim=0)\n        }\n\n\nclass EnsembleModel(nn.Module):\n    \"\"\"\n    Ensemble of multiple fusion models for improved performance and uncertainty estimation.\n    \"\"\"\n    \n    def __init__(self, models: list, weights: Optional[list] = None):\n        super(EnsembleModel, self).__init__()\n        \n        self.models = nn.ModuleList(models)\n        \n        if weights is None:\n            self.weights = torch.ones(len(models)) / len(models)\n        else:\n            self.weights = torch.tensor(weights)\n    \n    def forward(self, *args, **kwargs) -> Dict[str, torch.Tensor]:\n        \"\"\"Ensemble forward pass.\"\"\"\n        outputs = []\n        \n        for model in self.models:\n            output = model(*args, **kwargs)\n            outputs.append(output)\n        \n        # Weighted average of predictions\n        weighted_probs = torch.zeros_like(outputs[0]['probabilities'])\n        weighted_uncertainties = torch.zeros_like(outputs[0]['uncertainty']) if outputs[0]['uncertainty'] is not None else None\n        \n        for i, output in enumerate(outputs):\n            weight = self.weights[i]\n            weighted_probs += weight * output['probabilities']\n            \n            if weighted_uncertainties is not None and output['uncertainty'] is not None:\n                weighted_uncertainties += weight * output['uncertainty']\n        \n        # Ensemble uncertainty (variance across models)\n        prob_stack = torch.stack([out['probabilities'] for out in outputs])\n        ensemble_uncertainty = torch.var(prob_stack, dim=0)\n        \n        return {\n            'probabilities': weighted_probs,\n            'uncertainty': weighted_uncertainties,\n            'ensemble_uncertainty': ensemble_uncertainty,\n            'individual_predictions': [out['probabilities'] for out in outputs]\n        }\n\n\nclass LightweightModel(nn.Module):\n    \"\"\"\n    Lightweight model for edge deployment (scikit-learn compatible features).\n    \"\"\"\n    \n    def __init__(self, input_size: int = 50, hidden_size: int = 64, num_classes: int = 4):\n        super(LightweightModel, self).__init__()\n        \n        self.network = nn.Sequential(\n            nn.Linear(input_size, hidden_size),\n            nn.ReLU(),\n            nn.Dropout(0.3),\n            nn.Linear(hidden_size, hidden_size // 2),\n            nn.ReLU(),\n            nn.Dropout(0.2),\n            nn.Linear(hidden_size // 2, num_classes)\n        )\n    \n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        return self.network(x)\n\n\ndef create_fusion_model(config: Dict[str, Any]) -> MultiModalFusionModel:\n    \"\"\"Factory function to create fusion model.\"\"\"\n    model = MultiModalFusionModel(\n        cnn_config=config.get('cnn_config', {}),\n        lstm_config=config.get('lstm_config', {}),\n        tabular_input_size=config.get('tabular_input_size', 10),\n        fusion_hidden_size=config.get('fusion_hidden_size', 256),\n        num_classes=config.get('num_classes', 4),\n        dropout_rate=config.get('dropout_rate', 0.3),\n        use_uncertainty=config.get('use_uncertainty', True)\n    )\n    \n    if 'pretrained_path' in config:\n        checkpoint = torch.load(config['pretrained_path'], map_location='cpu')\n        model.load_state_dict(checkpoint['model_state_dict'])\n    \n    return model\n\n\ndef export_to_onnx(\n    model: MultiModalFusionModel,\n    export_path: str,\n    example_inputs: Dict[str, torch.Tensor],\n    opset_version: int = 11\n):\n    \"\"\"Export model to ONNX format for deployment.\"\"\"\n    model.eval()\n    \n    # Create dummy inputs\n    dummy_inputs = []\n    input_names = []\n    \n    if 'images' in example_inputs:\n        dummy_inputs.append(example_inputs['images'])\n        input_names.append('images')\n    \n    if 'sensor_data' in example_inputs:\n        dummy_inputs.append(example_inputs['sensor_data'])\n        input_names.append('sensor_data')\n    \n    if 'tabular_features' in example_inputs:\n        dummy_inputs.append(example_inputs['tabular_features'])\n        input_names.append('tabular_features')\n    \n    # Export to ONNX\n    torch.onnx.export(\n        model,\n        tuple(dummy_inputs),\n        export_path,\n        export_params=True,\n        opset_version=opset_version,\n        do_constant_folding=True,\n        input_names=input_names,\n        output_names=['probabilities', 'uncertainty'],\n        dynamic_axes={\n            'images': {0: 'batch_size'} if 'images' in input_names else {},\n            'sensor_data': {0: 'batch_size'} if 'sensor_data' in input_names else {},\n            'tabular_features': {0: 'batch_size'} if 'tabular_features' in input_names else {},\n            'probabilities': {0: 'batch_size'},\n            'uncertainty': {0: 'batch_size'}\n        }\n    )\n\n\ndef export_to_torchscript(model: MultiModalFusionModel, export_path: str):\n    \"\"\"Export model to TorchScript for deployment.\"\"\"\n    model.eval()\n    scripted_model = torch.jit.script(model)\n    scripted_model.save(export_path)\n\n\ndef convert_to_lightweight_features(\n    images: Optional[torch.Tensor] = None,\n    sensor_data: Optional[np.ndarray] = None,\n    tabular_features: Optional[np.ndarray] = None\n) -> np.ndarray:\n    \"\"\"\n    Convert multi-modal inputs to lightweight feature vector for scikit-learn models.\n    \"\"\"\n    features = []\n    \n    # Image features (simplified)\n    if images is not None:\n        # Use basic statistical features instead of CNN\n        img_features = []\n        for img in images:\n            # Convert to grayscale and calculate statistics\n            gray = torch.mean(img, dim=0)\n            img_features.extend([\n                torch.mean(gray).item(),\n                torch.std(gray).item(),\n                torch.min(gray).item(),\n                torch.max(gray).item(),\n                torch.median(gray).item()\n            ])\n        features.extend(img_features)\n    else:\n        features.extend([0] * 5)  # Placeholder features\n    \n    # Sensor features\n    if sensor_data is not None:\n        # Statistical features from time series\n        sensor_features = []\n        for sensor_type in range(sensor_data.shape[-1]):\n            data = sensor_data[:, sensor_type]\n            sensor_features.extend([\n                np.mean(data),\n                np.std(data),\n                np.min(data),\n                np.max(data),\n                np.median(data),\n                np.percentile(data, 25),\n                np.percentile(data, 75)\n            ])\n        features.extend(sensor_features)\n    else:\n        features.extend([0] * 35)  # 5 sensors * 7 features\n    \n    # Tabular features\n    if tabular_features is not None:\n        features.extend(tabular_features.tolist())\n    else:\n        features.extend([0] * 10)  # Default tabular features\n    \n    return np.array(features)\n","size_bytes":15236},"ml/models/lstm_model.py":{"content":"import torch\nimport torch.nn as nn\nimport numpy as np\nfrom typing import Tuple, Dict, Any, List\nimport torch.nn.functional as F\n\nclass SensorLSTM(nn.Module):\n    \"\"\"\n    LSTM model for processing time-series sensor data.\n    Handles multiple sensor types with attention mechanism.\n    \"\"\"\n    \n    def __init__(\n        self,\n        input_size: int = 5,  # Number of sensor types\n        hidden_size: int = 128,\n        num_layers: int = 2,\n        output_size: int = 64,  # Feature output size for fusion\n        dropout_rate: float = 0.3,\n        bidirectional: bool = True,\n        use_attention: bool = True\n    ):\n        super(SensorLSTM, self).__init__()\n        \n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.num_layers = num_layers\n        self.bidirectional = bidirectional\n        self.use_attention = use_attention\n        \n        # LSTM layer\n        self.lstm = nn.LSTM(\n            input_size=input_size,\n            hidden_size=hidden_size,\n            num_layers=num_layers,\n            dropout=dropout_rate if num_layers > 1 else 0,\n            bidirectional=bidirectional,\n            batch_first=True\n        )\n        \n        # Calculate LSTM output size\n        lstm_output_size = hidden_size * (2 if bidirectional else 1)\n        \n        # Attention mechanism\n        if use_attention:\n            self.attention = nn.MultiheadAttention(\n                embed_dim=lstm_output_size,\n                num_heads=8,\n                dropout=dropout_rate,\n                batch_first=True\n            )\n        \n        # Feature extraction layers\n        self.feature_extractor = nn.Sequential(\n            nn.Linear(lstm_output_size, 256),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate),\n            nn.Linear(256, 128),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate / 2),\n            nn.Linear(128, output_size)\n        )\n        \n        # Classification head (for standalone use)\n        self.classifier = nn.Sequential(\n            nn.Linear(output_size, 32),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate / 2),\n            nn.Linear(32, 4)  # 4 risk levels\n        )\n        \n    def forward(self, x: torch.Tensor, lengths: torch.Tensor = None) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Forward pass through LSTM model.\n        \n        Args:\n            x: Input tensor of shape (batch_size, sequence_length, input_size)\n            lengths: Actual sequence lengths for each sample\n            \n        Returns:\n            Tuple of (classification_output, extracted_features)\n        \"\"\"\n        batch_size = x.size(0)\n        \n        # Pack sequences if lengths provided\n        if lengths is not None:\n            x = nn.utils.rnn.pack_padded_sequence(\n                x, lengths, batch_first=True, enforce_sorted=False\n            )\n        \n        # LSTM forward pass\n        lstm_out, (hidden, cell) = self.lstm(x)\n        \n        # Unpack sequences if they were packed\n        if lengths is not None:\n            lstm_out, _ = nn.utils.rnn.pad_packed_sequence(\n                lstm_out, batch_first=True\n            )\n        \n        # Apply attention mechanism\n        if self.use_attention:\n            # Self-attention over sequence\n            attended_out, attention_weights = self.attention(\n                lstm_out, lstm_out, lstm_out\n            )\n            \n            # Global average pooling over sequence dimension\n            if lengths is not None:\n                # Mask out padded positions\n                mask = torch.arange(attended_out.size(1)).expand(\n                    batch_size, attended_out.size(1)\n                ).to(attended_out.device) < lengths.unsqueeze(1)\n                \n                attended_out = attended_out * mask.unsqueeze(-1).float()\n                sequence_output = attended_out.sum(dim=1) / lengths.unsqueeze(-1).float()\n            else:\n                sequence_output = attended_out.mean(dim=1)\n        else:\n            # Use last hidden state\n            if self.bidirectional:\n                # Concatenate forward and backward final states\n                sequence_output = torch.cat([\n                    hidden[-2], hidden[-1]\n                ], dim=-1)\n            else:\n                sequence_output = hidden[-1]\n        \n        # Extract features\n        features = self.feature_extractor(sequence_output)\n        \n        # Classification\n        classification = self.classifier(features)\n        \n        return classification, features\n    \n    def extract_features(self, x: torch.Tensor, lengths: torch.Tensor = None) -> torch.Tensor:\n        \"\"\"Extract features without classification.\"\"\"\n        _, features = self.forward(x, lengths)\n        return features\n\n\nclass TemporalCNN(nn.Module):\n    \"\"\"\n    Temporal CNN for sensor time-series processing.\n    Alternative to LSTM with better parallelization.\n    \"\"\"\n    \n    def __init__(\n        self,\n        input_size: int = 5,\n        num_filters: List[int] = [64, 128, 256],\n        kernel_sizes: List[int] = [3, 5, 7],\n        output_size: int = 64,\n        dropout_rate: float = 0.3\n    ):\n        super(TemporalCNN, self).__init__()\n        \n        self.input_size = input_size\n        \n        # Convolutional layers\n        self.conv_layers = nn.ModuleList()\n        \n        in_channels = input_size\n        for i, (out_channels, kernel_size) in enumerate(zip(num_filters, kernel_sizes)):\n            conv_block = nn.Sequential(\n                nn.Conv1d(in_channels, out_channels, kernel_size, padding=kernel_size//2),\n                nn.BatchNorm1d(out_channels),\n                nn.ReLU(inplace=True),\n                nn.Dropout(dropout_rate),\n                nn.MaxPool1d(2)\n            )\n            self.conv_layers.append(conv_block)\n            in_channels = out_channels\n        \n        # Global pooling\n        self.global_pool = nn.AdaptiveMaxPool1d(1)\n        \n        # Feature extraction\n        self.feature_extractor = nn.Sequential(\n            nn.Linear(sum(num_filters), 256),\n            nn.ReLU(inplace=True),\n            nn.Dropout(dropout_rate),\n            nn.Linear(256, output_size)\n        )\n        \n        # Classification head\n        self.classifier = nn.Sequential(\n            nn.Linear(output_size, 32),\n            nn.ReLU(inplace=True),\n            nn.Linear(32, 4)\n        )\n    \n    def forward(self, x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Forward pass through Temporal CNN.\n        \n        Args:\n            x: Input tensor of shape (batch_size, sequence_length, input_size)\n            \n        Returns:\n            Tuple of (classification_output, extracted_features)\n        \"\"\"\n        # Transpose for Conv1d: (batch, input_size, sequence_length)\n        x = x.transpose(1, 2)\n        \n        # Apply convolutional layers\n        conv_outputs = []\n        for conv_layer in self.conv_layers:\n            x = conv_layer(x)\n            # Global pool each conv output\n            pooled = self.global_pool(x).squeeze(-1)\n            conv_outputs.append(pooled)\n        \n        # Concatenate all conv outputs\n        features_raw = torch.cat(conv_outputs, dim=1)\n        \n        # Extract final features\n        features = self.feature_extractor(features_raw)\n        \n        # Classification\n        classification = self.classifier(features)\n        \n        return classification, features\n\n\nclass SensorDataProcessor:\n    \"\"\"Preprocessing and feature engineering for sensor data.\"\"\"\n    \n    def __init__(\n        self,\n        sensor_types: List[str] = ['strain', 'displacement', 'pore_pressure', 'tilt', 'vibration'],\n        sequence_length: int = 48,  # 48 hours of hourly data\n        normalization_method: str = 'zscore'\n    ):\n        self.sensor_types = sensor_types\n        self.sequence_length = sequence_length\n        self.normalization_method = normalization_method\n        \n        # Statistics for normalization\n        self.mean_values = {}\n        self.std_values = {}\n        self.min_values = {}\n        self.max_values = {}\n    \n    def fit_normalization(self, data: Dict[str, np.ndarray]):\n        \"\"\"Fit normalization parameters from training data.\"\"\"\n        for sensor_type in self.sensor_types:\n            if sensor_type in data:\n                values = data[sensor_type]\n                self.mean_values[sensor_type] = np.mean(values)\n                self.std_values[sensor_type] = np.std(values)\n                self.min_values[sensor_type] = np.min(values)\n                self.max_values[sensor_type] = np.max(values)\n    \n    def normalize_data(self, data: Dict[str, np.ndarray]) -> Dict[str, np.ndarray]:\n        \"\"\"Normalize sensor data.\"\"\"\n        normalized = {}\n        \n        for sensor_type in self.sensor_types:\n            if sensor_type in data:\n                values = data[sensor_type]\n                \n                if self.normalization_method == 'zscore':\n                    mean = self.mean_values.get(sensor_type, 0)\n                    std = self.std_values.get(sensor_type, 1)\n                    normalized[sensor_type] = (values - mean) / (std + 1e-8)\n                \n                elif self.normalization_method == 'minmax':\n                    min_val = self.min_values.get(sensor_type, 0)\n                    max_val = self.max_values.get(sensor_type, 1)\n                    normalized[sensor_type] = (values - min_val) / (max_val - min_val + 1e-8)\n                \n                else:\n                    normalized[sensor_type] = values\n            else:\n                # Fill missing sensor types with zeros\n                normalized[sensor_type] = np.zeros_like(\n                    list(data.values())[0] if data else np.array([0])\n                )\n        \n        return normalized\n    \n    def create_sequences(self, data: Dict[str, np.ndarray]) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Create sequences for time-series prediction.\n        \n        Args:\n            data: Dictionary of sensor data arrays\n            \n        Returns:\n            Tuple of (sequences, lengths)\n        \"\"\"\n        # Normalize data\n        normalized_data = self.normalize_data(data)\n        \n        # Stack sensor data\n        sensor_arrays = []\n        for sensor_type in self.sensor_types:\n            sensor_arrays.append(normalized_data[sensor_type])\n        \n        # Create time-series matrix\n        time_series = np.stack(sensor_arrays, axis=-1)  # (time_steps, num_sensors)\n        \n        # Create sliding window sequences\n        sequences = []\n        for i in range(len(time_series) - self.sequence_length + 1):\n            sequences.append(time_series[i:i + self.sequence_length])\n        \n        if not sequences:\n            # Handle short sequences\n            padded = np.zeros((self.sequence_length, len(self.sensor_types)))\n            if len(time_series) > 0:\n                padded[:len(time_series)] = time_series\n            sequences = [padded]\n        \n        sequences = np.array(sequences)\n        lengths = torch.tensor([self.sequence_length] * len(sequences))\n        \n        return torch.FloatTensor(sequences), lengths\n\n\ndef create_lstm_model(config: Dict[str, Any]) -> SensorLSTM:\n    \"\"\"Factory function to create LSTM model.\"\"\"\n    model = SensorLSTM(\n        input_size=config.get('input_size', 5),\n        hidden_size=config.get('hidden_size', 128),\n        num_layers=config.get('num_layers', 2),\n        output_size=config.get('output_size', 64),\n        dropout_rate=config.get('dropout_rate', 0.3),\n        bidirectional=config.get('bidirectional', True),\n        use_attention=config.get('use_attention', True)\n    )\n    \n    if 'pretrained_path' in config:\n        checkpoint = torch.load(config['pretrained_path'], map_location='cpu')\n        model.load_state_dict(checkpoint['model_state_dict'])\n    \n    return model\n\n\ndef create_temporal_cnn_model(config: Dict[str, Any]) -> TemporalCNN:\n    \"\"\"Factory function to create Temporal CNN model.\"\"\"\n    model = TemporalCNN(\n        input_size=config.get('input_size', 5),\n        num_filters=config.get('num_filters', [64, 128, 256]),\n        kernel_sizes=config.get('kernel_sizes', [3, 5, 7]),\n        output_size=config.get('output_size', 64),\n        dropout_rate=config.get('dropout_rate', 0.3)\n    )\n    \n    if 'pretrained_path' in config:\n        checkpoint = torch.load(config['pretrained_path'], map_location='cpu')\n        model.load_state_dict(checkpoint['model_state_dict'])\n    \n    return model\n","size_bytes":12581},"ml/utils/data_processor.py":{"content":"import torch\nfrom torch.utils.data import Dataset, DataLoader\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport rasterio\nfrom typing import Dict, List, Tuple, Optional, Any\nimport json\nimport os\nfrom pathlib import Path\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass RockfallDataset(Dataset):\n    \"\"\"\n    PyTorch Dataset for multi-modal rockfall prediction data.\n    Handles images, sensor time series, DEM features, and tabular data.\n    \"\"\"\n    \n    def __init__(\n        self,\n        data_df: pd.DataFrame,\n        image_dir: Optional[str] = None,\n        dem_dir: Optional[str] = None,\n        sensor_data: Optional[Dict[str, np.ndarray]] = None,\n        image_transform = None,\n        sensor_processor = None,\n        sequence_length: int = 48\n    ):\n        self.data_df = data_df.reset_index(drop=True)\n        self.image_dir = Path(image_dir) if image_dir else None\n        self.dem_dir = Path(dem_dir) if dem_dir else None\n        self.sensor_data = sensor_data or {}\n        self.image_transform = image_transform\n        self.sensor_processor = sensor_processor\n        self.sequence_length = sequence_length\n        \n        # Risk level mapping\n        self.risk_mapping = {'low': 0, 'medium': 1, 'high': 2, 'critical': 3}\n        \n    def __len__(self) -> int:\n        return len(self.data_df)\n    \n    def __getitem__(self, idx: int) -> Dict[str, torch.Tensor]:\n        row = self.data_df.iloc[idx]\n        sample = {}\n        \n        # Load image if available\n        if self.image_dir and 'image_filename' in row and pd.notna(row['image_filename']):\n            try:\n                image_path = self.image_dir / row['image_filename']\n                image = Image.open(image_path).convert('RGB')\n                \n                if self.image_transform:\n                    image = self.image_transform(image)\n                else:\n                    # Default transform\n                    import torchvision.transforms as transforms\n                    transform = transforms.Compose([\n                        transforms.Resize((224, 224)),\n                        transforms.ToTensor(),\n                        transforms.Normalize(mean=[0.485, 0.456, 0.406], \n                                           std=[0.229, 0.224, 0.225])\n                    ])\n                    image = transform(image)\n                \n                sample['images'] = image\n            except Exception as e:\n                logger.warning(f\"Failed to load image {row.get('image_filename', 'unknown')}: {e}\")\n                # Create dummy image\n                sample['images'] = torch.zeros(3, 224, 224)\n        \n        # Load sensor data if available\n        site_id = row.get('site_id')\n        if site_id and site_id in self.sensor_data:\n            sensor_sequences, lengths = self.sensor_processor.create_sequences(\n                self.sensor_data[site_id]\n            )\n            \n            if len(sensor_sequences) > 0:\n                # Use the most recent sequence\n                sample['sensor_data'] = sensor_sequences[-1]\n                sample['sensor_lengths'] = lengths[-1]\n        \n        # Extract tabular features\n        tabular_features = []\n        \n        # DEM features\n        dem_features = [\n            row.get('elevation', 0.0),\n            row.get('slope_angle', 0.0),\n            row.get('aspect_angle', 0.0),\n        ]\n        tabular_features.extend(dem_features)\n        \n        # Weather features\n        weather_features = [\n            row.get('rainfall', 0.0),\n            row.get('temperature', 15.0),\n            row.get('humidity', 50.0),\n            row.get('wind_speed', 0.0),\n        ]\n        tabular_features.extend(weather_features)\n        \n        # Site characteristics\n        site_features = [\n            row.get('rock_type_encoded', 0.0),\n            row.get('vegetation_cover', 0.0),\n            row.get('geological_stability', 0.0),\n        ]\n        tabular_features.extend(site_features)\n        \n        sample['tabular_features'] = torch.FloatTensor(tabular_features)\n        \n        # Target (risk level)\n        risk_level = row.get('risk_level', 'low')\n        target = self.risk_mapping.get(risk_level, 0)\n        sample['targets'] = torch.LongTensor([target])[0]\n        \n        # Additional metadata\n        sample['site_id'] = site_id\n        sample['timestamp'] = row.get('timestamp', '')\n        \n        return sample\n\n\nclass DEMProcessor:\n    \"\"\"Process Digital Elevation Model (DEM) files to extract slope, aspect, and other features.\"\"\"\n    \n    def __init__(self):\n        self.cache = {}\n    \n    def process_dem_file(self, dem_path: str) -> Dict[str, np.ndarray]:\n        \"\"\"\n        Process DEM file to extract topographic features.\n        \n        Args:\n            dem_path: Path to DEM file (GeoTIFF)\n            \n        Returns:\n            Dictionary containing elevation, slope, aspect arrays\n        \"\"\"\n        if dem_path in self.cache:\n            return self.cache[dem_path]\n        \n        try:\n            with rasterio.open(dem_path) as src:\n                elevation = src.read(1)\n                \n                # Calculate slope using gradient\n                dy, dx = np.gradient(elevation)\n                slope = np.arctan(np.sqrt(dx*dx + dy*dy)) * 180.0 / np.pi\n                \n                # Calculate aspect\n                aspect = np.arctan2(-dx, dy) * 180.0 / np.pi\n                aspect = np.where(aspect < 0, aspect + 360, aspect)\n                \n                # Calculate curvature (second derivatives)\n                dxx, dxy = np.gradient(dx)\n                dyx, dyy = np.gradient(dy)\n                \n                # Profile curvature\n                profile_curvature = (dx*dx*dyy - 2*dx*dy*dxy + dy*dy*dxx) / ((dx*dx + dy*dy)**1.5 + 1e-8)\n                \n                # Plan curvature  \n                plan_curvature = (dx*dx*dxx + 2*dx*dy*dxy + dy*dy*dyy) / ((dx*dx + dy*dy) + 1e-8)\n                \n                results = {\n                    'elevation': elevation,\n                    'slope': slope,\n                    'aspect': aspect,\n                    'profile_curvature': profile_curvature,\n                    'plan_curvature': plan_curvature\n                }\n                \n                self.cache[dem_path] = results\n                return results\n                \n        except Exception as e:\n            logger.error(f\"Failed to process DEM file {dem_path}: {e}\")\n            # Return dummy data\n            dummy_shape = (100, 100)\n            return {\n                'elevation': np.zeros(dummy_shape),\n                'slope': np.zeros(dummy_shape),\n                'aspect': np.zeros(dummy_shape),\n                'profile_curvature': np.zeros(dummy_shape),\n                'plan_curvature': np.zeros(dummy_shape)\n            }\n    \n    def extract_point_features(\n        self, \n        dem_data: Dict[str, np.ndarray], \n        x: float, \n        y: float,\n        window_size: int = 5\n    ) -> Dict[str, float]:\n        \"\"\"\n        Extract features at a specific point with neighborhood statistics.\n        \n        Args:\n            dem_data: Processed DEM data\n            x, y: Point coordinates (pixel coordinates)\n            window_size: Size of neighborhood window\n            \n        Returns:\n            Dictionary of extracted features\n        \"\"\"\n        try:\n            h, w = dem_data['elevation'].shape\n            x, y = int(x), int(y)\n            \n            # Ensure coordinates are within bounds\n            x = max(window_size//2, min(w - window_size//2 - 1, x))\n            y = max(window_size//2, min(h - window_size//2 - 1, y))\n            \n            features = {}\n            \n            for feature_name, data in dem_data.items():\n                # Point value\n                features[f'{feature_name}_point'] = float(data[y, x])\n                \n                # Neighborhood statistics\n                window = data[y-window_size//2:y+window_size//2+1, \n                             x-window_size//2:x+window_size//2+1]\n                \n                features[f'{feature_name}_mean'] = float(np.mean(window))\n                features[f'{feature_name}_std'] = float(np.std(window))\n                features[f'{feature_name}_min'] = float(np.min(window))\n                features[f'{feature_name}_max'] = float(np.max(window))\n                \n            return features\n            \n        except Exception as e:\n            logger.error(f\"Failed to extract point features: {e}\")\n            return {key: 0.0 for key in [\n                'elevation_point', 'slope_point', 'aspect_point',\n                'elevation_mean', 'slope_mean', 'aspect_mean',\n                'elevation_std', 'slope_std', 'aspect_std'\n            ]}\n\n\nclass SensorDataAggregator:\n    \"\"\"Aggregate and process sensor data for ML training.\"\"\"\n    \n    def __init__(self, sensor_types: List[str] = None):\n        self.sensor_types = sensor_types or [\n            'strain', 'displacement', 'pore_pressure', 'tilt', 'vibration'\n        ]\n    \n    def aggregate_sensor_readings(\n        self,\n        readings_df: pd.DataFrame,\n        time_window: str = '1H'  # 1 hour aggregation\n    ) -> Dict[str, np.ndarray]:\n        \"\"\"\n        Aggregate sensor readings into time series.\n        \n        Args:\n            readings_df: DataFrame with columns [timestamp, sensor_id, sensor_type, value]\n            time_window: Aggregation window (pandas frequency string)\n            \n        Returns:\n            Dictionary mapping sensor types to time series arrays\n        \"\"\"\n        try:\n            readings_df['timestamp'] = pd.to_datetime(readings_df['timestamp'])\n            \n            aggregated_data = {}\n            \n            for sensor_type in self.sensor_types:\n                # Filter readings for this sensor type\n                type_readings = readings_df[readings_df['sensor_type'] == sensor_type]\n                \n                if len(type_readings) == 0:\n                    # Create dummy time series if no data\n                    aggregated_data[sensor_type] = np.zeros(168)  # 1 week of hourly data\n                    continue\n                \n                # Group by time window and calculate statistics\n                grouped = type_readings.groupby(pd.Grouper(key='timestamp', freq=time_window))\n                \n                time_series = []\n                for timestamp, group in grouped:\n                    if len(group) > 0:\n                        # Use mean value for the time window\n                        time_series.append(group['value'].mean())\n                    else:\n                        time_series.append(0.0)\n                \n                aggregated_data[sensor_type] = np.array(time_series)\n            \n            return aggregated_data\n            \n        except Exception as e:\n            logger.error(f\"Failed to aggregate sensor readings: {e}\")\n            # Return dummy data\n            return {sensor_type: np.zeros(168) for sensor_type in self.sensor_types}\n    \n    def detect_anomalies(self, time_series: np.ndarray, method: str = 'zscore') -> np.ndarray:\n        \"\"\"\n        Detect anomalies in time series data.\n        \n        Args:\n            time_series: Input time series\n            method: Anomaly detection method ('zscore', 'iqr')\n            \n        Returns:\n            Boolean array indicating anomalies\n        \"\"\"\n        try:\n            if method == 'zscore':\n                z_scores = np.abs((time_series - np.mean(time_series)) / (np.std(time_series) + 1e-8))\n                return z_scores > 3\n            \n            elif method == 'iqr':\n                q25, q75 = np.percentile(time_series, [25, 75])\n                iqr = q75 - q25\n                lower_bound = q25 - 1.5 * iqr\n                upper_bound = q75 + 1.5 * iqr\n                return (time_series < lower_bound) | (time_series > upper_bound)\n            \n            else:\n                return np.zeros(len(time_series), dtype=bool)\n                \n        except Exception as e:\n            logger.error(f\"Anomaly detection failed: {e}\")\n            return np.zeros(len(time_series), dtype=bool)\n\n\ndef create_data_loaders(\n    config: Dict[str, Any],\n    data_path: str = 'data/processed',\n    batch_size: int = 32,\n    num_workers: int = 4\n) -> Tuple[DataLoader, DataLoader, DataLoader]:\n    \"\"\"\n    Create PyTorch DataLoaders for training, validation, and testing.\n    \n    Args:\n        config: Configuration dictionary\n        data_path: Path to processed data directory\n        batch_size: Batch size for DataLoader\n        num_workers: Number of worker processes\n        \n    Returns:\n        Tuple of (train_loader, val_loader, test_loader)\n    \"\"\"\n    try:\n        # Load processed data\n        train_df = pd.read_csv(f'{data_path}/train.csv')\n        val_df = pd.read_csv(f'{data_path}/val.csv')\n        test_df = pd.read_csv(f'{data_path}/test.csv')\n        \n        # Load sensor data if available\n        sensor_data = {}\n        sensor_data_path = f'{data_path}/sensor_data.json'\n        if os.path.exists(sensor_data_path):\n            with open(sensor_data_path, 'r') as f:\n                sensor_data = json.load(f)\n                # Convert lists back to numpy arrays\n                for site_id, data in sensor_data.items():\n                    for sensor_type, values in data.items():\n                        sensor_data[site_id][sensor_type] = np.array(values)\n        \n        # Initialize processors\n        from ml.models.cnn_model import ImageProcessor\n        from ml.models.lstm_model import SensorDataProcessor\n        \n        image_processor = ImageProcessor()\n        sensor_processor = SensorDataProcessor()\n        \n        # Create datasets\n        train_dataset = RockfallDataset(\n            train_df,\n            image_dir=f'{data_path}/images',\n            sensor_data=sensor_data,\n            image_transform=image_processor.train_transform,\n            sensor_processor=sensor_processor\n        )\n        \n        val_dataset = RockfallDataset(\n            val_df,\n            image_dir=f'{data_path}/images',\n            sensor_data=sensor_data,\n            image_transform=image_processor.val_transform,\n            sensor_processor=sensor_processor\n        )\n        \n        test_dataset = RockfallDataset(\n            test_df,\n            image_dir=f'{data_path}/images',\n            sensor_data=sensor_data,\n            image_transform=image_processor.val_transform,\n            sensor_processor=sensor_processor\n        )\n        \n        # Create data loaders\n        train_loader = DataLoader(\n            train_dataset,\n            batch_size=batch_size,\n            shuffle=True,\n            num_workers=num_workers,\n            collate_fn=collate_fn\n        )\n        \n        val_loader = DataLoader(\n            val_dataset,\n            batch_size=batch_size,\n            shuffle=False,\n            num_workers=num_workers,\n            collate_fn=collate_fn\n        )\n        \n        test_loader = DataLoader(\n            test_dataset,\n            batch_size=batch_size,\n            shuffle=False,\n            num_workers=num_workers,\n            collate_fn=collate_fn\n        )\n        \n        return train_loader, val_loader, test_loader\n        \n    except Exception as e:\n        logger.error(f\"Failed to create data loaders: {e}\")\n        raise\n\n\ndef collate_fn(batch: List[Dict[str, torch.Tensor]]) -> Dict[str, torch.Tensor]:\n    \"\"\"\n    Custom collate function to handle variable-length sequences and missing modalities.\n    \"\"\"\n    collated = {}\n    \n    # Handle images\n    if 'images' in batch[0]:\n        images = [sample['images'] for sample in batch if 'images' in sample]\n        if images:\n            collated['images'] = torch.stack(images)\n    \n    # Handle sensor data\n    if 'sensor_data' in batch[0]:\n        sensor_data = [sample['sensor_data'] for sample in batch if 'sensor_data' in sample]\n        sensor_lengths = [sample.get('sensor_lengths', torch.tensor(48)) for sample in batch if 'sensor_data' in sample]\n        \n        if sensor_data:\n            # Pad sequences to same length\n            max_length = max(seq.size(0) for seq in sensor_data)\n            padded_sequences = []\n            \n            for seq in sensor_data:\n                if seq.size(0) < max_length:\n                    padding = torch.zeros(max_length - seq.size(0), seq.size(1))\n                    padded_seq = torch.cat([seq, padding], dim=0)\n                else:\n                    padded_seq = seq\n                padded_sequences.append(padded_seq)\n            \n            collated['sensor_data'] = torch.stack(padded_sequences)\n            collated['sensor_lengths'] = torch.stack(sensor_lengths)\n    \n    # Handle tabular features\n    if 'tabular_features' in batch[0]:\n        tabular_features = [sample['tabular_features'] for sample in batch]\n        collated['tabular_features'] = torch.stack(tabular_features)\n    \n    # Handle targets\n    targets = [sample['targets'] for sample in batch]\n    collated['targets'] = torch.stack(targets)\n    \n    # Handle metadata\n    collated['site_ids'] = [sample.get('site_id', '') for sample in batch]\n    collated['timestamps'] = [sample.get('timestamp', '') for sample in batch]\n    \n    return collated\n\n\ndef preprocess_raw_data(\n    sites_csv: str,\n    sensors_csv: str,\n    readings_csv: str,\n    images_dir: str,\n    dem_dir: str,\n    output_dir: str = 'data/processed'\n) -> None:\n    \"\"\"\n    Preprocess raw data files into ML-ready format.\n    \n    Args:\n        sites_csv: Path to sites CSV file\n        sensors_csv: Path to sensors CSV file  \n        readings_csv: Path to sensor readings CSV file\n        images_dir: Directory containing drone images\n        dem_dir: Directory containing DEM files\n        output_dir: Output directory for processed data\n    \"\"\"\n    try:\n        os.makedirs(output_dir, exist_ok=True)\n        \n        # Load raw data\n        sites_df = pd.read_csv(sites_csv)\n        sensors_df = pd.read_csv(sensors_csv)\n        readings_df = pd.read_csv(readings_csv)\n        \n        # Initialize processors\n        dem_processor = DEMProcessor()\n        sensor_aggregator = SensorDataAggregator()\n        \n        # Process each site\n        processed_data = []\n        sensor_data_dict = {}\n        \n        for _, site in sites_df.iterrows():\n            site_id = site['id']\n            logger.info(f\"Processing site {site_id}\")\n            \n            # Get site sensors\n            site_sensors = sensors_df[sensors_df['site_id'] == site_id]\n            \n            # Get sensor readings\n            sensor_readings = readings_df[\n                readings_df['sensor_id'].isin(site_sensors['id'])\n            ]\n            \n            # Aggregate sensor data\n            site_sensor_data = sensor_aggregator.aggregate_sensor_readings(sensor_readings)\n            sensor_data_dict[site_id] = {\n                sensor_type: data.tolist()  # Convert to list for JSON serialization\n                for sensor_type, data in site_sensor_data.items()\n            }\n            \n            # Process DEM data if available\n            dem_features = {}\n            dem_file = f\"{dem_dir}/{site_id}_dem.tif\"\n            if os.path.exists(dem_file):\n                dem_data = dem_processor.process_dem_file(dem_file)\n                # Extract features at site location (using image center for now)\n                dem_features = dem_processor.extract_point_features(\n                    dem_data, \n                    x=dem_data['elevation'].shape[1]//2,\n                    y=dem_data['elevation'].shape[0]//2\n                )\n            \n            # Find associated images\n            site_images = []\n            for img_file in os.listdir(images_dir):\n                if img_file.startswith(site_id):\n                    site_images.append(img_file)\n            \n            # Create data entry for each image (or one entry if no images)\n            if site_images:\n                for img_file in site_images:\n                    entry = {\n                        'site_id': site_id,\n                        'image_filename': img_file,\n                        'elevation': site.get('elevation', 0),\n                        'slope_angle': site.get('slope_angle', 0),\n                        'aspect_angle': site.get('aspect_angle', 0),\n                        'risk_level': site.get('risk_level', 'low'),\n                        'timestamp': pd.Timestamp.now().isoformat(),\n                        **dem_features\n                    }\n                    processed_data.append(entry)\n            else:\n                # Entry without image\n                entry = {\n                    'site_id': site_id,\n                    'elevation': site.get('elevation', 0),\n                    'slope_angle': site.get('slope_angle', 0),\n                    'aspect_angle': site.get('aspect_angle', 0),\n                    'risk_level': site.get('risk_level', 'low'),\n                    'timestamp': pd.Timestamp.now().isoformat(),\n                    **dem_features\n                }\n                processed_data.append(entry)\n        \n        # Create DataFrame\n        processed_df = pd.DataFrame(processed_data)\n        \n        # Split into train/val/test\n        from sklearn.model_selection import train_test_split\n        \n        train_df, temp_df = train_test_split(\n            processed_df, test_size=0.3, stratify=processed_df['risk_level'], random_state=42\n        )\n        val_df, test_df = train_test_split(\n            temp_df, test_size=0.5, stratify=temp_df['risk_level'], random_state=42\n        )\n        \n        # Save processed data\n        train_df.to_csv(f'{output_dir}/train.csv', index=False)\n        val_df.to_csv(f'{output_dir}/val.csv', index=False)\n        test_df.to_csv(f'{output_dir}/test.csv', index=False)\n        \n        # Save sensor data\n        with open(f'{output_dir}/sensor_data.json', 'w') as f:\n            json.dump(sensor_data_dict, f, indent=2)\n        \n        logger.info(f\"Data preprocessing completed. Processed {len(processed_data)} samples.\")\n        logger.info(f\"Train: {len(train_df)}, Val: {len(val_df)}, Test: {len(test_df)}\")\n        \n    except Exception as e:\n        logger.error(f\"Data preprocessing failed: {e}\")\n        raise\n\n\nif __name__ == '__main__':\n    # Example usage\n    preprocess_raw_data(\n        sites_csv='data/raw/sites.csv',\n        sensors_csv='data/raw/sensors.csv',\n        readings_csv='data/raw/readings.csv',\n        images_dir='data/raw/images',\n        dem_dir='data/raw/dem',\n        output_dir='data/processed'\n    )\n","size_bytes":22658},"ml/utils/explainability.py":{"content":"import torch\nimport torch.nn.functional as F\nimport numpy as np\nimport pandas as pd\nfrom typing import Dict, List, Tuple, Any, Optional\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\nimport cv2\nimport json\nimport shap\nfrom lime.lime_tabular import LimeTabularExplainer\nfrom captum.attr import IntegratedGradients, GradCam, LayerConductance\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass ExplainabilityAnalyzer:\n    \"\"\"\n    Comprehensive explainability analysis for multi-modal rockfall prediction models.\n    Supports SHAP, LIME, GradCAM, and integrated gradients.\n    \"\"\"\n    \n    def __init__(self, model, device: str = 'cpu'):\n        self.model = model\n        self.device = device\n        self.model.eval()\n        \n        # Initialize explainers\n        self.shap_explainer = None\n        self.lime_explainer = None\n        self.integrated_gradients = None\n        self.gradcam = None\n        \n        # Feature names\n        self.tabular_feature_names = [\n            'elevation', 'slope_angle', 'aspect_angle',\n            'rainfall', 'temperature', 'humidity', 'wind_speed',\n            'rock_type', 'vegetation_cover', 'geological_stability'\n        ]\n        \n        self.sensor_feature_names = [\n            'strain', 'displacement', 'pore_pressure', 'tilt', 'vibration'\n        ]\n        \n        self.risk_labels = ['Low', 'Medium', 'High', 'Critical']\n    \n    def setup_shap_explainer(self, background_data: torch.Tensor):\n        \"\"\"Setup SHAP explainer with background data.\"\"\"\n        try:\n            # Convert model to SHAP-compatible function\n            def model_wrapper(x):\n                with torch.no_grad():\n                    if len(x.shape) == 2:  # Tabular data\n                        x_tensor = torch.FloatTensor(x).to(self.device)\n                        # Assuming tabular-only prediction for SHAP\n                        output = self.model(tabular_features=x_tensor)\n                        if isinstance(output, dict):\n                            return output['probabilities'].cpu().numpy()\n                        else:\n                            return F.softmax(output[0], dim=1).cpu().numpy()\n            \n            # Create SHAP explainer\n            background_np = background_data.cpu().numpy()\n            self.shap_explainer = shap.KernelExplainer(model_wrapper, background_np)\n            \n            logger.info(\"SHAP explainer initialized successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize SHAP explainer: {e}\")\n    \n    def setup_lime_explainer(self, training_data: np.ndarray):\n        \"\"\"Setup LIME explainer with training data.\"\"\"\n        try:\n            self.lime_explainer = LimeTabularExplainer(\n                training_data,\n                feature_names=self.tabular_feature_names,\n                class_names=self.risk_labels,\n                mode='classification',\n                discretize_continuous=True\n            )\n            \n            logger.info(\"LIME explainer initialized successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize LIME explainer: {e}\")\n    \n    def setup_gradcam(self, target_layer: str = 'features'):\n        \"\"\"Setup GradCAM for image explainability.\"\"\"\n        try:\n            if hasattr(self.model, 'cnn_model'):\n                # For fusion model\n                target_layer_module = getattr(self.model.cnn_model, target_layer)\n            else:\n                # For standalone CNN model\n                target_layer_module = getattr(self.model, target_layer)\n            \n            self.gradcam = GradCam(self.model, target_layer_module)\n            self.integrated_gradients = IntegratedGradients(self.model)\n            \n            logger.info(\"GradCAM initialized successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize GradCAM: {e}\")\n    \n    def explain_prediction(\n        self,\n        images: Optional[torch.Tensor] = None,\n        sensor_data: Optional[torch.Tensor] = None,\n        tabular_features: Optional[torch.Tensor] = None,\n        target_class: Optional[int] = None\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Generate comprehensive explanations for a single prediction.\n        \n        Args:\n            images: Input images\n            sensor_data: Input sensor time series\n            tabular_features: Input tabular features\n            target_class: Target class for explanation (if None, uses predicted class)\n            \n        Returns:\n            Dictionary containing various explanations\n        \"\"\"\n        explanations = {}\n        \n        try:\n            # Get model prediction\n            with torch.no_grad():\n                if hasattr(self.model, 'forward'):\n                    output = self.model(images, sensor_data, None, tabular_features)\n                    if isinstance(output, dict):\n                        probabilities = output['probabilities']\n                        predicted_class = torch.argmax(probabilities, dim=1).item()\n                    else:\n                        logits = output[0]\n                        probabilities = F.softmax(logits, dim=1)\n                        predicted_class = torch.argmax(probabilities, dim=1).item()\n                else:\n                    raise ValueError(\"Model does not have forward method\")\n            \n            if target_class is None:\n                target_class = predicted_class\n            \n            explanations['prediction'] = {\n                'predicted_class': predicted_class,\n                'predicted_class_name': self.risk_labels[predicted_class],\n                'probabilities': probabilities[0].cpu().numpy().tolist(),\n                'confidence': float(probabilities[0, predicted_class])\n            }\n            \n            # Image explanations (GradCAM)\n            if images is not None and self.gradcam is not None:\n                try:\n                    gradcam_explanation = self.explain_image(images, target_class)\n                    explanations['image_explanation'] = gradcam_explanation\n                except Exception as e:\n                    logger.error(f\"Image explanation failed: {e}\")\n            \n            # Tabular explanations (SHAP)\n            if tabular_features is not None and self.shap_explainer is not None:\n                try:\n                    shap_explanation = self.explain_tabular_shap(tabular_features)\n                    explanations['tabular_shap'] = shap_explanation\n                except Exception as e:\n                    logger.error(f\"SHAP explanation failed: {e}\")\n            \n            # Tabular explanations (LIME)  \n            if tabular_features is not None and self.lime_explainer is not None:\n                try:\n                    lime_explanation = self.explain_tabular_lime(tabular_features, target_class)\n                    explanations['tabular_lime'] = lime_explanation\n                except Exception as e:\n                    logger.error(f\"LIME explanation failed: {e}\")\n            \n            # Sensor data explanation\n            if sensor_data is not None:\n                try:\n                    sensor_explanation = self.explain_sensor_data(sensor_data, target_class)\n                    explanations['sensor_explanation'] = sensor_explanation\n                except Exception as e:\n                    logger.error(f\"Sensor explanation failed: {e}\")\n            \n            # Generate summary\n            explanations['summary'] = self.generate_explanation_summary(explanations)\n            \n            return explanations\n            \n        except Exception as e:\n            logger.error(f\"Explanation generation failed: {e}\")\n            return {'error': str(e)}\n    \n    def explain_image(self, images: torch.Tensor, target_class: int) -> Dict[str, Any]:\n        \"\"\"Generate GradCAM explanation for images.\"\"\"\n        try:\n            images = images.to(self.device)\n            \n            # Generate GradCAM\n            attribution = self.gradcam.attribute(\n                images, \n                target=target_class,\n                relu_attributions=True\n            )\n            \n            # Convert to numpy and normalize\n            gradcam_map = attribution[0].cpu().numpy()\n            gradcam_map = np.transpose(gradcam_map, (1, 2, 0))\n            \n            if gradcam_map.shape[-1] == 1:\n                gradcam_map = gradcam_map[:, :, 0]\n            else:\n                gradcam_map = np.mean(gradcam_map, axis=-1)\n            \n            # Normalize to 0-1\n            gradcam_map = (gradcam_map - gradcam_map.min()) / (gradcam_map.max() - gradcam_map.min() + 1e-8)\n            \n            return {\n                'gradcam_map': gradcam_map.tolist(),\n                'explanation': 'Red areas indicate regions most important for the prediction',\n                'max_activation': float(gradcam_map.max()),\n                'activation_center': self.find_activation_center(gradcam_map)\n            }\n            \n        except Exception as e:\n            logger.error(f\"GradCAM explanation failed: {e}\")\n            return {'error': str(e)}\n    \n    def explain_tabular_shap(self, tabular_features: torch.Tensor) -> Dict[str, Any]:\n        \"\"\"Generate SHAP explanation for tabular features.\"\"\"\n        try:\n            features_np = tabular_features.cpu().numpy()\n            \n            # Generate SHAP values\n            shap_values = self.shap_explainer.shap_values(features_np)\n            \n            if isinstance(shap_values, list):\n                # Multi-class case\n                shap_values_dict = {\n                    self.risk_labels[i]: shap_values[i][0].tolist()\n                    for i in range(len(shap_values))\n                }\n            else:\n                # Binary case\n                shap_values_dict = {'values': shap_values[0].tolist()}\n            \n            # Feature importance ranking\n            total_importance = np.abs(shap_values[0] if isinstance(shap_values, list) else shap_values).sum(axis=0)\n            feature_importance = [\n                {\n                    'feature': self.tabular_feature_names[i],\n                    'importance': float(total_importance[i]),\n                    'value': float(features_np[0, i])\n                }\n                for i in range(len(self.tabular_feature_names))\n            ]\n            \n            feature_importance.sort(key=lambda x: x['importance'], reverse=True)\n            \n            return {\n                'shap_values': shap_values_dict,\n                'feature_importance': feature_importance,\n                'top_features': feature_importance[:3]\n            }\n            \n        except Exception as e:\n            logger.error(f\"SHAP explanation failed: {e}\")\n            return {'error': str(e)}\n    \n    def explain_tabular_lime(self, tabular_features: torch.Tensor, target_class: int) -> Dict[str, Any]:\n        \"\"\"Generate LIME explanation for tabular features.\"\"\"\n        try:\n            features_np = tabular_features.cpu().numpy()[0]  # Single sample\n            \n            # Model prediction function for LIME\n            def predict_fn(x):\n                x_tensor = torch.FloatTensor(x).to(self.device)\n                with torch.no_grad():\n                    output = self.model(tabular_features=x_tensor)\n                    if isinstance(output, dict):\n                        return output['probabilities'].cpu().numpy()\n                    else:\n                        return F.softmax(output[0], dim=1).cpu().numpy()\n            \n            # Generate LIME explanation\n            explanation = self.lime_explainer.explain_instance(\n                features_np,\n                predict_fn,\n                num_features=len(self.tabular_feature_names),\n                top_labels=len(self.risk_labels)\n            )\n            \n            # Extract explanation for target class\n            lime_values = explanation.as_list()\n            \n            return {\n                'lime_explanation': lime_values,\n                'intercept': explanation.intercept[target_class],\n                'prediction_local': explanation.local_pred[target_class],\n                'score': explanation.score\n            }\n            \n        except Exception as e:\n            logger.error(f\"LIME explanation failed: {e}\")\n            return {'error': str(e)}\n    \n    def explain_sensor_data(self, sensor_data: torch.Tensor, target_class: int) -> Dict[str, Any]:\n        \"\"\"Generate explanation for sensor time series data.\"\"\"\n        try:\n            # Use integrated gradients for time series\n            if self.integrated_gradients is None:\n                # Fallback to simple sensitivity analysis\n                return self.sensitivity_analysis_sensors(sensor_data, target_class)\n            \n            sensor_data = sensor_data.to(self.device)\n            \n            # Generate integrated gradients\n            baseline = torch.zeros_like(sensor_data)\n            attribution = self.integrated_gradients.attribute(\n                sensor_data,\n                baseline,\n                target=target_class,\n                n_steps=50\n            )\n            \n            # Aggregate attributions by sensor type\n            attribution_np = attribution[0].cpu().numpy()  # Shape: (seq_len, num_sensors)\n            \n            sensor_importance = []\n            for i, sensor_name in enumerate(self.sensor_feature_names):\n                if i < attribution_np.shape[1]:\n                    importance = np.abs(attribution_np[:, i]).sum()\n                    recent_trend = self.calculate_trend(sensor_data[0, :, i].cpu().numpy())\n                    \n                    sensor_importance.append({\n                        'sensor': sensor_name,\n                        'importance': float(importance),\n                        'recent_trend': recent_trend,\n                        'current_value': float(sensor_data[0, -1, i])\n                    })\n            \n            sensor_importance.sort(key=lambda x: x['importance'], reverse=True)\n            \n            return {\n                'sensor_importance': sensor_importance,\n                'top_sensors': sensor_importance[:3],\n                'attribution_map': attribution_np.tolist(),\n                'temporal_pattern': self.analyze_temporal_patterns(attribution_np)\n            }\n            \n        except Exception as e:\n            logger.error(f\"Sensor explanation failed: {e}\")\n            return {'error': str(e)}\n    \n    def sensitivity_analysis_sensors(self, sensor_data: torch.Tensor, target_class: int) -> Dict[str, Any]:\n        \"\"\"Fallback sensitivity analysis for sensor data.\"\"\"\n        try:\n            sensor_data = sensor_data.to(self.device)\n            original_output = self.model(sensor_data=sensor_data)\n            \n            if isinstance(original_output, dict):\n                original_prob = original_output['probabilities'][0, target_class]\n            else:\n                original_prob = F.softmax(original_output[0], dim=1)[0, target_class]\n            \n            sensor_importance = []\n            \n            for i, sensor_name in enumerate(self.sensor_feature_names):\n                if i < sensor_data.shape[2]:\n                    # Zero out sensor and measure change\n                    modified_data = sensor_data.clone()\n                    modified_data[:, :, i] = 0\n                    \n                    modified_output = self.model(sensor_data=modified_data)\n                    if isinstance(modified_output, dict):\n                        modified_prob = modified_output['probabilities'][0, target_class]\n                    else:\n                        modified_prob = F.softmax(modified_output[0], dim=1)[0, target_class]\n                    \n                    importance = float(abs(original_prob - modified_prob))\n                    \n                    sensor_importance.append({\n                        'sensor': sensor_name,\n                        'importance': importance,\n                        'current_value': float(sensor_data[0, -1, i])\n                    })\n            \n            sensor_importance.sort(key=lambda x: x['importance'], reverse=True)\n            \n            return {\n                'sensor_importance': sensor_importance,\n                'top_sensors': sensor_importance[:3]\n            }\n            \n        except Exception as e:\n            logger.error(f\"Sensitivity analysis failed: {e}\")\n            return {'error': str(e)}\n    \n    def generate_explanation_summary(self, explanations: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Generate human-readable explanation summary.\"\"\"\n        try:\n            summary = {\n                'prediction_summary': '',\n                'key_factors': [],\n                'risk_explanation': '',\n                'confidence_level': 'medium'\n            }\n            \n            # Prediction summary\n            if 'prediction' in explanations:\n                pred = explanations['prediction']\n                summary['prediction_summary'] = (\n                    f\"Predicted risk level: {pred['predicted_class_name']} \"\n                    f\"(Confidence: {pred['confidence']:.1%})\"\n                )\n                \n                # Confidence level\n                if pred['confidence'] > 0.8:\n                    summary['confidence_level'] = 'high'\n                elif pred['confidence'] < 0.6:\n                    summary['confidence_level'] = 'low'\n            \n            # Key factors from different modalities\n            key_factors = []\n            \n            # From tabular features\n            if 'tabular_shap' in explanations and 'top_features' in explanations['tabular_shap']:\n                for feature in explanations['tabular_shap']['top_features']:\n                    key_factors.append({\n                        'factor': feature['feature'],\n                        'impact': 'high' if feature['importance'] > 0.1 else 'medium',\n                        'modality': 'site_characteristics'\n                    })\n            \n            # From sensor data\n            if 'sensor_explanation' in explanations and 'top_sensors' in explanations['sensor_explanation']:\n                for sensor in explanations['sensor_explanation']['top_sensors']:\n                    key_factors.append({\n                        'factor': f\"{sensor['sensor']} readings\",\n                        'impact': 'high' if sensor['importance'] > 0.1 else 'medium',\n                        'modality': 'sensor_data'\n                    })\n            \n            # From image analysis\n            if 'image_explanation' in explanations:\n                key_factors.append({\n                    'factor': 'visual terrain analysis',\n                    'impact': 'medium',\n                    'modality': 'imagery'\n                })\n            \n            summary['key_factors'] = key_factors\n            \n            # Risk explanation based on prediction\n            if 'prediction' in explanations:\n                risk_level = explanations['prediction']['predicted_class']\n                \n                risk_explanations = {\n                    0: \"Low risk conditions detected. Current monitoring parameters are within normal ranges.\",\n                    1: \"Medium risk identified. Some elevated readings detected, continued monitoring recommended.\",\n                    2: \"High risk conditions present. Multiple factors indicate potential instability.\",\n                    3: \"Critical risk detected. Immediate attention and potential evacuation measures required.\"\n                }\n                \n                summary['risk_explanation'] = risk_explanations.get(risk_level, \"Unknown risk level.\")\n            \n            return summary\n            \n        except Exception as e:\n            logger.error(f\"Summary generation failed: {e}\")\n            return {'error': str(e)}\n    \n    def analyze_batch(self, data_batch: Dict[str, torch.Tensor]) -> Dict[str, Any]:\n        \"\"\"Analyze a batch of data for explainability.\"\"\"\n        try:\n            batch_size = data_batch['targets'].size(0)\n            batch_explanations = []\n            \n            for i in range(min(batch_size, 5)):  # Limit to 5 samples for efficiency\n                sample_explanation = self.explain_prediction(\n                    images=data_batch.get('images', [None])[i:i+1] if data_batch.get('images') is not None else None,\n                    sensor_data=data_batch.get('sensor_data', [None])[i:i+1] if data_batch.get('sensor_data') is not None else None,\n                    tabular_features=data_batch.get('tabular_features', [None])[i:i+1] if data_batch.get('tabular_features') is not None else None\n                )\n                \n                batch_explanations.append(sample_explanation)\n            \n            # Aggregate insights\n            aggregate_insights = self.aggregate_batch_insights(batch_explanations)\n            \n            return {\n                'individual_explanations': batch_explanations,\n                'aggregate_insights': aggregate_insights\n            }\n            \n        except Exception as e:\n            logger.error(f\"Batch analysis failed: {e}\")\n            return {'error': str(e)}\n    \n    def aggregate_batch_insights(self, explanations: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Aggregate insights from multiple explanations.\"\"\"\n        try:\n            insights = {\n                'common_factors': {},\n                'prediction_distribution': {},\n                'average_confidence': 0.0\n            }\n            \n            # Count predictions\n            for exp in explanations:\n                if 'prediction' in exp:\n                    pred_class = exp['prediction']['predicted_class_name']\n                    insights['prediction_distribution'][pred_class] = \\\n                        insights['prediction_distribution'].get(pred_class, 0) + 1\n                    \n                    insights['average_confidence'] += exp['prediction']['confidence']\n            \n            insights['average_confidence'] /= max(len(explanations), 1)\n            \n            # Count common factors\n            for exp in explanations:\n                if 'summary' in exp and 'key_factors' in exp['summary']:\n                    for factor in exp['summary']['key_factors']:\n                        factor_name = factor['factor']\n                        insights['common_factors'][factor_name] = \\\n                            insights['common_factors'].get(factor_name, 0) + 1\n            \n            return insights\n            \n        except Exception as e:\n            logger.error(f\"Insight aggregation failed: {e}\")\n            return {'error': str(e)}\n    \n    def visualize_explanation(\n        self, \n        explanation: Dict[str, Any], \n        save_path: str = None\n    ) -> None:\n        \"\"\"Create visualization of explanation results.\"\"\"\n        try:\n            fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n            \n            # Plot 1: Prediction probabilities\n            if 'prediction' in explanation:\n                pred = explanation['prediction']\n                axes[0, 0].bar(self.risk_labels, pred['probabilities'])\n                axes[0, 0].set_title('Prediction Probabilities')\n                axes[0, 0].set_ylabel('Probability')\n                axes[0, 0].tick_params(axis='x', rotation=45)\n            \n            # Plot 2: Feature importance\n            if 'tabular_shap' in explanation and 'feature_importance' in explanation['tabular_shap']:\n                features = explanation['tabular_shap']['feature_importance'][:8]  # Top 8\n                feature_names = [f['feature'] for f in features]\n                importances = [f['importance'] for f in features]\n                \n                axes[0, 1].barh(feature_names, importances)\n                axes[0, 1].set_title('Feature Importance (SHAP)')\n                axes[0, 1].set_xlabel('Importance')\n            \n            # Plot 3: Sensor importance\n            if 'sensor_explanation' in explanation and 'sensor_importance' in explanation['sensor_explanation']:\n                sensors = explanation['sensor_explanation']['sensor_importance']\n                sensor_names = [s['sensor'] for s in sensors]\n                sensor_importances = [s['importance'] for s in sensors]\n                \n                axes[1, 0].bar(sensor_names, sensor_importances)\n                axes[1, 0].set_title('Sensor Importance')\n                axes[1, 0].set_ylabel('Importance')\n                axes[1, 0].tick_params(axis='x', rotation=45)\n            \n            # Plot 4: Summary text\n            if 'summary' in explanation:\n                summary_text = explanation['summary']['prediction_summary']\n                risk_text = explanation['summary']['risk_explanation']\n                \n                axes[1, 1].text(0.1, 0.8, 'Prediction:', fontweight='bold', transform=axes[1, 1].transAxes)\n                axes[1, 1].text(0.1, 0.7, summary_text, wrap=True, transform=axes[1, 1].transAxes)\n                axes[1, 1].text(0.1, 0.5, 'Risk Assessment:', fontweight='bold', transform=axes[1, 1].transAxes)\n                axes[1, 1].text(0.1, 0.1, risk_text, wrap=True, transform=axes[1, 1].transAxes)\n                axes[1, 1].axis('off')\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches='tight')\n            \n            plt.show()\n            \n        except Exception as e:\n            logger.error(f\"Visualization failed: {e}\")\n    \n    # Helper methods\n    def find_activation_center(self, gradcam_map: np.ndarray) -> Tuple[int, int]:\n        \"\"\"Find the center of highest activation in GradCAM.\"\"\"\n        try:\n            # Find coordinates of maximum activation\n            max_coords = np.unravel_index(np.argmax(gradcam_map), gradcam_map.shape)\n            return (int(max_coords[0]), int(max_coords[1]))\n        except:\n            return (0, 0)\n    \n    def calculate_trend(self, time_series: np.ndarray) -> str:\n        \"\"\"Calculate trend in time series.\"\"\"\n        try:\n            if len(time_series) < 2:\n                return 'stable'\n            \n            # Simple linear trend\n            x = np.arange(len(time_series))\n            coeffs = np.polyfit(x, time_series, 1)\n            slope = coeffs[0]\n            \n            if slope > 0.1:\n                return 'increasing'\n            elif slope < -0.1:\n                return 'decreasing'\n            else:\n                return 'stable'\n                \n        except:\n            return 'unknown'\n    \n    def analyze_temporal_patterns(self, attribution_map: np.ndarray) -> Dict[str, Any]:\n        \"\"\"Analyze temporal patterns in attributions.\"\"\"\n        try:\n            # Find time points with highest attribution\n            temporal_importance = np.sum(np.abs(attribution_map), axis=1)\n            \n            # Find peaks\n            from scipy.signal import find_peaks\n            peaks, _ = find_peaks(temporal_importance, height=np.mean(temporal_importance))\n            \n            return {\n                'peak_times': peaks.tolist(),\n                'overall_trend': self.calculate_trend(temporal_importance),\n                'max_importance_time': int(np.argmax(temporal_importance))\n            }\n            \n        except Exception as e:\n            logger.error(f\"Temporal pattern analysis failed: {e}\")\n            return {'error': str(e)}\n\n\ndef generate_explanation_report(\n    model,\n    test_data: Dict[str, torch.Tensor],\n    output_path: str = 'explanations/report.json'\n) -> None:\n    \"\"\"Generate comprehensive explanation report for model predictions.\"\"\"\n    try:\n        analyzer = ExplainabilityAnalyzer(model)\n        \n        # Analyze test batch\n        results = analyzer.analyze_batch(test_data)\n        \n        # Generate report\n        report = {\n            'model_analysis': {\n                'total_samples_analyzed': len(results.get('individual_explanations', [])),\n                'aggregate_insights': results.get('aggregate_insights', {}),\n                'timestamp': pd.Timestamp.now().isoformat()\n            },\n            'individual_explanations': results.get('individual_explanations', [])\n        }\n        \n        # Save report\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        with open(output_path, 'w') as f:\n            json.dump(report, f, indent=2, default=str)\n        \n        logger.info(f\"Explanation report saved to {output_path}\")\n        \n    except Exception as e:\n        logger.error(f\"Report generation failed: {e}\")\n","size_bytes":28783},"ml/utils/synthetic_data.py":{"content":"import numpy as np\nimport pandas as pd\nfrom PIL import Image, ImageDraw, ImageFilter\nimport torch\nfrom torch.utils.data import DataLoader\nfrom typing import Dict, List, Tuple, Any, Optional\nimport os\nimport json\nimport random\nfrom datetime import datetime, timedelta\nimport cv2\nfrom scipy.ndimage import gaussian_filter\nimport rasterio\nfrom rasterio.transform import from_bounds\nimport logging\n\nfrom .data_processor import RockfallDataset, collate_fn\nfrom ml.models.cnn_model import ImageProcessor\nfrom ml.models.lstm_model import SensorDataProcessor\n\nlogger = logging.getLogger(__name__)\n\nclass SyntheticDataGenerator:\n    \"\"\"\n    Generate synthetic data for training and testing rockfall prediction models.\n    Creates realistic drone images, DEM data, sensor readings, and tabular features.\n    \"\"\"\n    \n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.image_size = config.get('image_size', (224, 224))\n        self.sequence_length = config.get('sequence_length', 48)\n        \n        # Risk level probabilities for data generation\n        self.risk_probabilities = {\n            'low': 0.5,\n            'medium': 0.3,\n            'high': 0.15,\n            'critical': 0.05\n        }\n        \n        # Sensor types and their characteristics\n        self.sensor_configs = {\n            'strain': {'range': (0, 2000), 'noise': 50, 'unit': 'μɛ'},\n            'displacement': {'range': (0, 20), 'noise': 0.5, 'unit': 'mm'},\n            'pore_pressure': {'range': (0, 500), 'noise': 10, 'unit': 'kPa'},\n            'tilt': {'range': (0, 10), 'noise': 0.1, 'unit': 'degrees'},\n            'vibration': {'range': (0, 100), 'noise': 5, 'unit': 'Hz'}\n        }\n        \n        # Initialize random seed for reproducibility\n        self.set_random_seed(config.get('random_seed', 42))\n    \n    def set_random_seed(self, seed: int):\n        \"\"\"Set random seed for reproducible generation.\"\"\"\n        np.random.seed(seed)\n        random.seed(seed)\n        torch.manual_seed(seed)\n    \n    def generate_training_data(\n        self,\n        num_samples: int = 1000,\n        val_split: float = 0.2,\n        test_split: float = 0.1,\n        output_dir: str = 'data/synthetic'\n    ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n        \"\"\"\n        Generate complete synthetic dataset for training.\n        \n        Args:\n            num_samples: Total number of samples to generate\n            val_split: Validation split ratio\n            test_split: Test split ratio\n            output_dir: Directory to save synthetic data\n            \n        Returns:\n            Tuple of (train_df, val_df, test_df)\n        \"\"\"\n        logger.info(f\"Generating {num_samples} synthetic samples...\")\n        \n        os.makedirs(output_dir, exist_ok=True)\n        os.makedirs(f\"{output_dir}/images\", exist_ok=True)\n        os.makedirs(f\"{output_dir}/dem\", exist_ok=True)\n        \n        # Generate samples\n        samples = []\n        sensor_data_dict = {}\n        \n        for i in range(num_samples):\n            if i % 100 == 0:\n                logger.info(f\"Generated {i}/{num_samples} samples\")\n            \n            sample = self.generate_single_sample(i, output_dir)\n            samples.append(sample['metadata'])\n            \n            if sample['site_id'] not in sensor_data_dict:\n                sensor_data_dict[sample['site_id']] = sample['sensor_data']\n        \n        # Create DataFrame\n        df = pd.DataFrame(samples)\n        \n        # Split data\n        from sklearn.model_selection import train_test_split\n        \n        train_df, temp_df = train_test_split(\n            df, test_size=(val_split + test_split), \n            stratify=df['risk_level'], random_state=42\n        )\n        \n        val_size = val_split / (val_split + test_split)\n        val_df, test_df = train_test_split(\n            temp_df, test_size=(1 - val_size),\n            stratify=temp_df['risk_level'], random_state=42\n        )\n        \n        # Save datasets\n        train_df.to_csv(f\"{output_dir}/train.csv\", index=False)\n        val_df.to_csv(f\"{output_dir}/val.csv\", index=False)\n        test_df.to_csv(f\"{output_dir}/test.csv\", index=False)\n        \n        # Save sensor data\n        with open(f\"{output_dir}/sensor_data.json\", 'w') as f:\n            json.dump(sensor_data_dict, f, indent=2)\n        \n        logger.info(f\"Synthetic data generation completed!\")\n        logger.info(f\"Train: {len(train_df)}, Val: {len(val_df)}, Test: {len(test_df)}\")\n        \n        return train_df, val_df, test_df\n    \n    def generate_single_sample(self, sample_id: int, output_dir: str) -> Dict[str, Any]:\n        \"\"\"Generate a single complete sample with all modalities.\"\"\"\n        \n        # Generate site characteristics\n        site_id = f\"SYNTH_{sample_id:04d}\"\n        risk_level = self.sample_risk_level()\n        \n        # Generate location\n        latitude = np.random.uniform(28.0, 35.0)  # Himalayan region\n        longitude = np.random.uniform(77.0, 85.0)\n        elevation = np.random.uniform(1000, 5000)\n        \n        # Generate terrain characteristics based on risk level\n        slope_angle, aspect_angle, geological_features = self.generate_terrain_features(risk_level)\n        \n        # Generate weather conditions\n        weather_features = self.generate_weather_features(risk_level)\n        \n        # Generate DEM data\n        dem_data = self.generate_dem_data(slope_angle, aspect_angle, elevation)\n        dem_filename = f\"{site_id}_dem.tif\"\n        dem_path = f\"{output_dir}/dem/{dem_filename}\"\n        self.save_dem_data(dem_data, dem_path)\n        \n        # Generate drone image\n        image = self.generate_drone_image(\n            terrain_type=geological_features['rock_type'],\n            slope_angle=slope_angle,\n            risk_level=risk_level,\n            weather=weather_features\n        )\n        image_filename = f\"{site_id}_drone.jpg\"\n        image_path = f\"{output_dir}/images/{image_filename}\"\n        image.save(image_path, quality=90)\n        \n        # Generate sensor time series\n        sensor_data = self.generate_sensor_time_series(\n            risk_level=risk_level,\n            weather_influence=weather_features,\n            geological_stability=geological_features['stability_index']\n        )\n        \n        # Create metadata entry\n        metadata = {\n            'site_id': site_id,\n            'image_filename': image_filename,\n            'dem_filename': dem_filename,\n            'latitude': latitude,\n            'longitude': longitude,\n            'elevation': elevation,\n            'slope_angle': slope_angle,\n            'aspect_angle': aspect_angle,\n            'risk_level': risk_level,\n            'timestamp': datetime.now().isoformat(),\n            \n            # Weather features\n            'rainfall': weather_features['rainfall'],\n            'temperature': weather_features['temperature'],\n            'humidity': weather_features['humidity'],\n            'wind_speed': weather_features['wind_speed'],\n            \n            # Geological features\n            'rock_type_encoded': geological_features['rock_type_encoded'],\n            'vegetation_cover': geological_features['vegetation_cover'],\n            'geological_stability': geological_features['stability_index']\n        }\n        \n        return {\n            'metadata': metadata,\n            'sensor_data': sensor_data,\n            'site_id': site_id\n        }\n    \n    def sample_risk_level(self) -> str:\n        \"\"\"Sample risk level based on defined probabilities.\"\"\"\n        return np.random.choice(\n            list(self.risk_probabilities.keys()),\n            p=list(self.risk_probabilities.values())\n        )\n    \n    def generate_terrain_features(self, risk_level: str) -> Tuple[float, float, Dict[str, Any]]:\n        \"\"\"Generate terrain characteristics based on risk level.\"\"\"\n        \n        # Risk-dependent slope angle ranges\n        slope_ranges = {\n            'low': (5, 25),\n            'medium': (20, 40),\n            'high': (35, 60),\n            'critical': (50, 80)\n        }\n        \n        slope_angle = np.random.uniform(*slope_ranges[risk_level])\n        aspect_angle = np.random.uniform(0, 360)\n        \n        # Geological features\n        rock_types = ['granite', 'limestone', 'sandstone', 'shale', 'schist']\n        rock_type = np.random.choice(rock_types)\n        \n        # Rock stability (lower values = higher risk)\n        stability_ranges = {\n            'low': (0.8, 1.0),\n            'medium': (0.6, 0.8),\n            'high': (0.4, 0.6),\n            'critical': (0.2, 0.4)\n        }\n        stability_index = np.random.uniform(*stability_ranges[risk_level])\n        \n        # Vegetation cover (higher cover = lower risk)\n        vegetation_ranges = {\n            'low': (0.6, 0.9),\n            'medium': (0.4, 0.7),\n            'high': (0.2, 0.5),\n            'critical': (0.0, 0.3)\n        }\n        vegetation_cover = np.random.uniform(*vegetation_ranges[risk_level])\n        \n        geological_features = {\n            'rock_type': rock_type,\n            'rock_type_encoded': rock_types.index(rock_type),\n            'stability_index': stability_index,\n            'vegetation_cover': vegetation_cover\n        }\n        \n        return slope_angle, aspect_angle, geological_features\n    \n    def generate_weather_features(self, risk_level: str) -> Dict[str, float]:\n        \"\"\"Generate weather conditions that influence risk.\"\"\"\n        \n        # Base weather conditions\n        temperature = np.random.uniform(5, 25)  # Celsius\n        humidity = np.random.uniform(30, 80)    # Percentage\n        wind_speed = np.random.uniform(0, 20)   # km/h\n        \n        # Risk-influenced rainfall\n        rainfall_ranges = {\n            'low': (0, 10),      # mm in 24h\n            'medium': (5, 25),\n            'high': (20, 60),\n            'critical': (50, 150)\n        }\n        rainfall = np.random.uniform(*rainfall_ranges[risk_level])\n        \n        return {\n            'temperature': temperature,\n            'humidity': humidity,\n            'wind_speed': wind_speed,\n            'rainfall': rainfall\n        }\n    \n    def generate_dem_data(\n        self, \n        slope_angle: float, \n        aspect_angle: float, \n        elevation: float\n    ) -> np.ndarray:\n        \"\"\"Generate synthetic DEM data.\"\"\"\n        \n        # Create base elevation grid\n        size = 200  # 200x200 grid\n        dem = np.ones((size, size)) * elevation\n        \n        # Add slope trend\n        y_gradient = np.tan(np.radians(slope_angle)) * np.linspace(-100, 100, size)\n        dem = dem + y_gradient[:, np.newaxis]\n        \n        # Add random terrain variation\n        noise = np.random.normal(0, 10, (size, size))\n        dem = dem + gaussian_filter(noise, sigma=5)\n        \n        # Add some realistic terrain features\n        # Random hills and valleys\n        for _ in range(np.random.randint(3, 8)):\n            center_x = np.random.randint(20, size-20)\n            center_y = np.random.randint(20, size-20)\n            radius = np.random.randint(10, 30)\n            amplitude = np.random.uniform(-50, 100)\n            \n            y, x = np.ogrid[:size, :size]\n            mask = (x - center_x)**2 + (y - center_y)**2 <= radius**2\n            dem[mask] += amplitude * np.exp(-(((x - center_x)**2 + (y - center_y)**2) / (2 * (radius/3)**2)))[mask]\n        \n        # Add ridge lines for high-risk areas\n        if slope_angle > 40:\n            ridge_y = np.random.randint(10, size-10)\n            ridge_amplitude = np.random.uniform(20, 60)\n            ridge_width = np.random.randint(5, 15)\n            \n            for x in range(size):\n                for y in range(max(0, ridge_y - ridge_width), min(size, ridge_y + ridge_width)):\n                    distance = abs(y - ridge_y)\n                    if distance <= ridge_width:\n                        dem[y, x] += ridge_amplitude * (1 - distance / ridge_width)\n        \n        return dem\n    \n    def save_dem_data(self, dem_data: np.ndarray, output_path: str):\n        \"\"\"Save DEM data as GeoTIFF file.\"\"\"\n        try:\n            # Define spatial reference (dummy coordinates)\n            bounds = (77.0, 28.0, 77.01, 28.01)  # Example bounds\n            transform = from_bounds(*bounds, dem_data.shape[1], dem_data.shape[0])\n            \n            with rasterio.open(\n                output_path,\n                'w',\n                driver='GTiff',\n                height=dem_data.shape[0],\n                width=dem_data.shape[1],\n                count=1,\n                dtype=dem_data.dtype,\n                crs='+proj=latlong',\n                transform=transform,\n            ) as dst:\n                dst.write(dem_data, 1)\n                \n        except Exception as e:\n            logger.warning(f\"Failed to save DEM data: {e}\")\n            # Save as numpy array instead\n            np.save(output_path.replace('.tif', '.npy'), dem_data)\n    \n    def generate_drone_image(\n        self,\n        terrain_type: str,\n        slope_angle: float,\n        risk_level: str,\n        weather: Dict[str, float]\n    ) -> Image.Image:\n        \"\"\"Generate synthetic drone image of terrain.\"\"\"\n        \n        width, height = self.image_size\n        image = Image.new('RGB', (width, height))\n        draw = ImageDraw.Draw(image)\n        \n        # Base terrain colors\n        terrain_colors = {\n            'granite': [(120, 120, 120), (140, 140, 140), (100, 100, 100)],\n            'limestone': [(200, 190, 170), (220, 210, 190), (180, 170, 150)],\n            'sandstone': [(210, 180, 140), (230, 200, 160), (190, 160, 120)],\n            'shale': [(80, 70, 60), (100, 90, 80), (60, 50, 40)],\n            'schist': [(90, 85, 80), (110, 105, 100), (70, 65, 60)]\n        }\n        \n        base_colors = terrain_colors.get(terrain_type, terrain_colors['granite'])\n        \n        # Create base terrain texture\n        for y in range(height):\n            for x in range(width):\n                # Add some randomness to color\n                color_idx = np.random.randint(0, len(base_colors))\n                base_color = base_colors[color_idx]\n                \n                # Add noise\n                noise = np.random.randint(-20, 20)\n                color = tuple(max(0, min(255, c + noise)) for c in base_color)\n                \n                image.putpixel((x, y), color)\n        \n        # Apply Gaussian blur for natural texture\n        image = image.filter(ImageFilter.GaussianBlur(radius=1))\n        \n        # Add risk-related features\n        if risk_level in ['high', 'critical']:\n            # Add cracks and unstable areas\n            self.add_cracks_to_image(image, draw, risk_level)\n            \n        if slope_angle > 30:\n            # Add steep terrain features\n            self.add_steep_terrain_features(image, draw, slope_angle)\n        \n        # Add vegetation based on cover\n        vegetation_cover = weather.get('vegetation_cover', 0.5)\n        if vegetation_cover > 0.3:\n            self.add_vegetation_to_image(image, draw, vegetation_cover)\n        \n        # Weather effects\n        if weather['rainfall'] > 20:\n            # Add water effects\n            self.add_water_effects(image, draw)\n        \n        # Convert to numpy for additional processing\n        img_array = np.array(image)\n        \n        # Add shadows and lighting based on slope\n        img_array = self.add_lighting_effects(img_array, slope_angle)\n        \n        return Image.fromarray(img_array.astype(np.uint8))\n    \n    def add_cracks_to_image(self, image: Image.Image, draw: ImageDraw.Draw, risk_level: str):\n        \"\"\"Add crack patterns to indicate instability.\"\"\"\n        width, height = image.size\n        \n        num_cracks = 3 if risk_level == 'high' else 6\n        \n        for _ in range(num_cracks):\n            # Random crack path\n            start_x = np.random.randint(0, width)\n            start_y = np.random.randint(0, height)\n            \n            crack_length = np.random.randint(20, 80)\n            angle = np.random.uniform(0, 2 * np.pi)\n            \n            points = []\n            x, y = start_x, start_y\n            \n            for step in range(crack_length):\n                points.append((int(x), int(y)))\n                \n                # Add some randomness to crack path\n                angle += np.random.normal(0, 0.2)\n                x += np.cos(angle) * 1.5\n                y += np.sin(angle) * 1.5\n                \n                if x < 0 or x >= width or y < 0 or y >= height:\n                    break\n            \n            # Draw crack\n            if len(points) > 1:\n                draw.line(points, fill=(40, 30, 20), width=2)\n    \n    def add_steep_terrain_features(self, image: Image.Image, draw: ImageDraw.Draw, slope_angle: float):\n        \"\"\"Add features typical of steep terrain.\"\"\"\n        width, height = image.size\n        \n        # Add rock face lines\n        intensity = min(slope_angle / 90.0, 1.0)\n        num_lines = int(5 * intensity)\n        \n        for _ in range(num_lines):\n            start_y = np.random.randint(0, height)\n            end_y = start_y + np.random.randint(-30, 30)\n            \n            x = np.random.randint(0, width)\n            \n            draw.line([(x, start_y), (x, min(max(end_y, 0), height-1))], \n                     fill=(60, 50, 40), width=1)\n    \n    def add_vegetation_to_image(self, image: Image.Image, draw: ImageDraw.Draw, vegetation_cover: float):\n        \"\"\"Add vegetation patches to the image.\"\"\"\n        width, height = image.size\n        \n        num_patches = int(vegetation_cover * 20)\n        \n        for _ in range(num_patches):\n            patch_size = np.random.randint(5, 15)\n            center_x = np.random.randint(patch_size, width - patch_size)\n            center_y = np.random.randint(patch_size, height - patch_size)\n            \n            # Green vegetation color with variation\n            green_base = np.random.randint(60, 120)\n            vegetation_color = (\n                np.random.randint(20, 60),\n                green_base,\n                np.random.randint(20, 50)\n            )\n            \n            # Draw irregular vegetation patch\n            points = []\n            for angle in np.linspace(0, 2*np.pi, 8):\n                radius = patch_size + np.random.randint(-3, 3)\n                x = center_x + radius * np.cos(angle)\n                y = center_y + radius * np.sin(angle)\n                points.append((x, y))\n            \n            draw.polygon(points, fill=vegetation_color)\n    \n    def add_water_effects(self, image: Image.Image, draw: ImageDraw.Draw):\n        \"\"\"Add water effects for wet conditions.\"\"\"\n        width, height = image.size\n        \n        # Add small water puddles\n        num_puddles = np.random.randint(2, 6)\n        \n        for _ in range(num_puddles):\n            puddle_size = np.random.randint(3, 10)\n            center_x = np.random.randint(puddle_size, width - puddle_size)\n            center_y = np.random.randint(puddle_size, height - puddle_size)\n            \n            # Dark blue-grey water color\n            water_color = (50, 70, 90)\n            \n            draw.ellipse([\n                center_x - puddle_size, center_y - puddle_size,\n                center_x + puddle_size, center_y + puddle_size\n            ], fill=water_color)\n    \n    def add_lighting_effects(self, img_array: np.ndarray, slope_angle: float) -> np.ndarray:\n        \"\"\"Add realistic lighting and shadow effects.\"\"\"\n        \n        # Simulate sun angle effect\n        light_angle = 45  # degrees\n        shadow_intensity = min(slope_angle / 90.0, 0.3)\n        \n        # Create gradient shadow effect\n        height, width = img_array.shape[:2]\n        \n        # Vertical shadow gradient\n        shadow_gradient = np.linspace(1.0, 1.0 - shadow_intensity, height)\n        shadow_gradient = shadow_gradient[:, np.newaxis, np.newaxis]\n        \n        # Apply shadow\n        img_array = img_array * shadow_gradient\n        \n        # Add some random lighting variation\n        light_variation = np.random.normal(1.0, 0.05, img_array.shape)\n        img_array = img_array * light_variation\n        \n        return np.clip(img_array, 0, 255)\n    \n    def generate_sensor_time_series(\n        self,\n        risk_level: str,\n        weather_influence: Dict[str, float],\n        geological_stability: float\n    ) -> Dict[str, List[float]]:\n        \"\"\"Generate synthetic sensor time series data.\"\"\"\n        \n        sensor_data = {}\n        \n        for sensor_type, config in self.sensor_configs.items():\n            # Base value based on risk level\n            risk_multipliers = {\n                'low': 0.2,\n                'medium': 0.5,\n                'high': 0.8,\n                'critical': 1.0\n            }\n            \n            base_multiplier = risk_multipliers[risk_level]\n            base_value = config['range'][1] * base_multiplier * (1 - geological_stability)\n            \n            # Generate time series\n            time_series = []\n            current_value = base_value\n            \n            for t in range(self.sequence_length):\n                # Add trend based on risk level\n                if risk_level in ['high', 'critical']:\n                    trend = np.random.normal(0.05, 0.02)  # Slight upward trend\n                else:\n                    trend = np.random.normal(0, 0.01)     # Stable\n                \n                # Weather influence\n                weather_effect = 0\n                if sensor_type == 'pore_pressure':\n                    weather_effect = weather_influence['rainfall'] * 0.1\n                elif sensor_type == 'displacement':\n                    weather_effect = weather_influence['rainfall'] * 0.05\n                \n                # Random noise\n                noise = np.random.normal(0, config['noise'] * 0.1)\n                \n                # Update value\n                current_value += trend * current_value + weather_effect + noise\n                \n                # Clamp to realistic range\n                current_value = max(config['range'][0], \n                                  min(config['range'][1], current_value))\n                \n                time_series.append(float(current_value))\n            \n            sensor_data[sensor_type] = time_series\n        \n        return sensor_data\n    \n    def create_data_loaders(\n        self,\n        train_df: pd.DataFrame,\n        val_df: pd.DataFrame,\n        test_df: pd.DataFrame,\n        batch_size: int = 32\n    ) -> Tuple[DataLoader, DataLoader, DataLoader]:\n        \"\"\"Create PyTorch DataLoaders from synthetic data.\"\"\"\n        \n        try:\n            # Load sensor data\n            sensor_data = {}\n            sensor_data_path = 'data/synthetic/sensor_data.json'\n            if os.path.exists(sensor_data_path):\n                with open(sensor_data_path, 'r') as f:\n                    sensor_data_raw = json.load(f)\n                    # Convert to numpy arrays\n                    for site_id, data in sensor_data_raw.items():\n                        sensor_data[site_id] = {\n                            sensor_type: np.array(values)\n                            for sensor_type, values in data.items()\n                        }\n            \n            # Initialize processors\n            image_processor = ImageProcessor()\n            sensor_processor = SensorDataProcessor()\n            \n            # Create datasets\n            train_dataset = RockfallDataset(\n                train_df,\n                image_dir='data/synthetic/images',\n                sensor_data=sensor_data,\n                image_transform=image_processor.train_transform,\n                sensor_processor=sensor_processor\n            )\n            \n            val_dataset = RockfallDataset(\n                val_df,\n                image_dir='data/synthetic/images',\n                sensor_data=sensor_data,\n                image_transform=image_processor.val_transform,\n                sensor_processor=sensor_processor\n            )\n            \n            test_dataset = RockfallDataset(\n                test_df,\n                image_dir='data/synthetic/images',\n                sensor_data=sensor_data,\n                image_transform=image_processor.val_transform,\n                sensor_processor=sensor_processor\n            )\n            \n            # Create data loaders\n            train_loader = DataLoader(\n                train_dataset,\n                batch_size=batch_size,\n                shuffle=True,\n                num_workers=2,\n                collate_fn=collate_fn\n            )\n            \n            val_loader = DataLoader(\n                val_dataset,\n                batch_size=batch_size,\n                shuffle=False,\n                num_workers=2,\n                collate_fn=collate_fn\n            )\n            \n            test_loader = DataLoader(\n                test_dataset,\n                batch_size=batch_size,\n                shuffle=False,\n                num_workers=2,\n                collate_fn=collate_fn\n            )\n            \n            return train_loader, val_loader, test_loader\n            \n        except Exception as e:\n            logger.error(f\"Failed to create data loaders: {e}\")\n            raise\n    \n    def generate_quick_demo_data(self, num_samples: int = 50) -> Dict[str, Any]:\n        \"\"\"Generate a small dataset for quick demonstration.\"\"\"\n        logger.info(f\"Generating {num_samples} demo samples...\")\n        \n        demo_data = {\n            'samples': [],\n            'sensor_data': {},\n            'images': []\n        }\n        \n        for i in range(num_samples):\n            sample = self.generate_single_sample(i, 'data/demo')\n            demo_data['samples'].append(sample['metadata'])\n            demo_data['sensor_data'][sample['site_id']] = sample['sensor_data']\n        \n        return demo_data\n\n\nif __name__ == '__main__':\n    # Example usage\n    config = {\n        'image_size': (224, 224),\n        'sequence_length': 48,\n        'random_seed': 42\n    }\n    \n    generator = SyntheticDataGenerator(config)\n    train_df, val_df, test_df = generator.generate_training_data(\n        num_samples=500,\n        output_dir='data/synthetic'\n    )\n    \n    print(\"Synthetic data generation completed!\")\n    print(f\"Generated {len(train_df) + len(val_df) + len(test_df)} total samples\")\n","size_bytes":26344},"server/services/alert-service.ts":{"content":"import { storage } from \"../storage\";\nimport type { Alert } from \"@shared/schema\";\n\ninterface NotificationChannel {\n  type: \"sms\" | \"email\" | \"whatsapp\" | \"push\";\n  recipients: string[];\n}\n\nclass AlertService {\n  private twilioAccountSid = process.env.TWILIO_ACCOUNT_SID;\n  private twilioAuthToken = process.env.TWILIO_AUTH_TOKEN;\n  private twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;\n  private smtpConfig = {\n    host: process.env.SMTP_HOST,\n    port: parseInt(process.env.SMTP_PORT || \"587\"),\n    user: process.env.SMTP_USER,\n    password: process.env.SMTP_PASSWORD\n  };\n\n  async sendAlert(alert: Alert): Promise<void> {\n    try {\n      // Get notification channels based on severity\n      const channels = this.getNotificationChannels(alert.severity);\n      \n      for (const channel of channels) {\n        await this.sendNotificationBatch(alert, channel);\n      }\n    } catch (error) {\n      console.error(\"Alert sending failed:\", error);\n    }\n  }\n\n  private getNotificationChannels(severity: string): NotificationChannel[] {\n    const channels: NotificationChannel[] = [];\n\n    switch (severity) {\n      case \"critical\":\n        channels.push(\n          { type: \"sms\", recipients: this.getCriticalContactsSMS() },\n          { type: \"email\", recipients: this.getCriticalContactsEmail() },\n          { type: \"whatsapp\", recipients: this.getCriticalContactsWhatsApp() },\n          { type: \"push\", recipients: this.getAllUsers() }\n        );\n        break;\n      \n      case \"high\":\n        channels.push(\n          { type: \"sms\", recipients: this.getHighPriorityContactsSMS() },\n          { type: \"email\", recipients: this.getAllContactsEmail() },\n          { type: \"push\", recipients: this.getAllUsers() }\n        );\n        break;\n      \n      case \"medium\":\n        channels.push(\n          { type: \"email\", recipients: this.getAllContactsEmail() },\n          { type: \"push\", recipients: this.getAllUsers() }\n        );\n        break;\n      \n      default: // low\n        channels.push(\n          { type: \"push\", recipients: this.getAllUsers() }\n        );\n    }\n\n    return channels;\n  }\n\n  private async sendNotificationBatch(alert: Alert, channel: NotificationChannel): Promise<void> {\n    for (const recipient of channel.recipients) {\n      try {\n        const notification = await storage.createAlertNotification({\n          alertId: alert.id,\n          channel: channel.type,\n          recipient,\n          status: \"pending\"\n        });\n\n        switch (channel.type) {\n          case \"sms\":\n            await this.sendSMS(recipient, alert);\n            break;\n          case \"email\":\n            await this.sendEmail(recipient, alert);\n            break;\n          case \"whatsapp\":\n            await this.sendWhatsApp(recipient, alert);\n            break;\n          case \"push\":\n            await this.sendPushNotification(recipient, alert);\n            break;\n        }\n\n        await storage.updateNotificationStatus(notification.id, \"sent\");\n      } catch (error) {\n        console.error(`Failed to send ${channel.type} to ${recipient}:`, error);\n        // Update status to failed if we have the notification ID\n      }\n    }\n  }\n\n  private async sendSMS(phoneNumber: string, alert: Alert): Promise<void> {\n    if (!this.twilioAccountSid || !this.twilioAuthToken) {\n      console.warn(\"Twilio credentials not configured\");\n      return;\n    }\n\n    const message = this.formatSMSMessage(alert);\n    \n    // Simulate Twilio SMS API call\n    const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${this.twilioAccountSid}/Messages.json`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${Buffer.from(`${this.twilioAccountSid}:${this.twilioAuthToken}`).toString('base64')}`,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        From: this.twilioPhoneNumber || \"\",\n        To: phoneNumber,\n        Body: message\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`SMS sending failed: ${response.statusText}`);\n    }\n  }\n\n  private async sendEmail(email: string, alert: Alert): Promise<void> {\n    const subject = `🚨 Rockfall Alert: ${alert.title}`;\n    const body = this.formatEmailMessage(alert);\n\n    // Simulate SMTP email sending\n    console.log(`Sending email to ${email}: ${subject}`);\n    \n    // In a real implementation, you would use nodemailer or similar\n    // const transporter = nodemailer.createTransporter(this.smtpConfig);\n    // await transporter.sendMail({ to: email, subject, html: body });\n  }\n\n  private async sendWhatsApp(phoneNumber: string, alert: Alert): Promise<void> {\n    if (!this.twilioAccountSid || !this.twilioAuthToken) {\n      console.warn(\"Twilio credentials not configured\");\n      return;\n    }\n\n    const message = this.formatWhatsAppMessage(alert);\n    \n    // Simulate Twilio WhatsApp API call\n    const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${this.twilioAccountSid}/Messages.json`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${Buffer.from(`${this.twilioAccountSid}:${this.twilioAuthToken}`).toString('base64')}`,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        From: `whatsapp:${this.twilioPhoneNumber}`,\n        To: `whatsapp:${phoneNumber}`,\n        Body: message\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`WhatsApp sending failed: ${response.statusText}`);\n    }\n  }\n\n  private async sendPushNotification(userId: string, alert: Alert): Promise<void> {\n    // Simulate web push notification\n    const payload = {\n      title: alert.title,\n      body: alert.message,\n      icon: '/icon-192x192.png',\n      badge: '/badge-72x72.png',\n      tag: `alert-${alert.id}`,\n      data: {\n        alertId: alert.id,\n        siteId: alert.siteId,\n        severity: alert.severity\n      }\n    };\n\n    console.log(`Sending push notification to user ${userId}:`, payload);\n    \n    // In a real implementation, you would use web-push library\n    // webpush.sendNotification(subscription, JSON.stringify(payload));\n  }\n\n  private formatSMSMessage(alert: Alert): string {\n    return `🚨 ROCKFALL ALERT\\n${alert.title}\\n${alert.message}\\nAction: ${alert.actionPlan?.split('\\n')[0] || 'Monitor situation'}`;\n  }\n\n  private formatEmailMessage(alert: Alert): string {\n    return `\n      <h2>🚨 Rockfall Prediction Alert</h2>\n      <h3>${alert.title}</h3>\n      <p><strong>Severity:</strong> ${alert.severity.toUpperCase()}</p>\n      <p><strong>Message:</strong> ${alert.message}</p>\n      ${alert.actionPlan ? `\n        <h4>Recommended Actions:</h4>\n        <pre>${alert.actionPlan}</pre>\n      ` : ''}\n      <p><small>Alert generated at: ${alert.createdAt}</small></p>\n      <p><em>RockWatch AI Prediction System</em></p>\n    `;\n  }\n\n  private formatWhatsAppMessage(alert: Alert): string {\n    return `🚨 *ROCKFALL ALERT*\\n\\n*${alert.title}*\\n\\n${alert.message}\\n\\n*Action Required:*\\n${alert.actionPlan?.split('\\n')[0] || 'Monitor situation'}\\n\\n_RockWatch AI System_`;\n  }\n\n  // Contact management methods (in real implementation, these would be configurable)\n  private getCriticalContactsSMS(): string[] {\n    return [\n      process.env.EMERGENCY_CONTACT_1 || \"+1234567890\",\n      process.env.EMERGENCY_CONTACT_2 || \"+1234567891\"\n    ];\n  }\n\n  private getCriticalContactsEmail(): string[] {\n    return [\n      process.env.EMERGENCY_EMAIL_1 || \"emergency@example.com\",\n      process.env.EMERGENCY_EMAIL_2 || \"supervisor@example.com\"\n    ];\n  }\n\n  private getCriticalContactsWhatsApp(): string[] {\n    return [\n      process.env.EMERGENCY_WHATSAPP_1 || \"+1234567890\",\n      process.env.EMERGENCY_WHATSAPP_2 || \"+1234567891\"\n    ];\n  }\n\n  private getHighPriorityContactsSMS(): string[] {\n    return [\n      ...this.getCriticalContactsSMS(),\n      process.env.SUPERVISOR_CONTACT || \"+1234567892\"\n    ];\n  }\n\n  private getAllContactsEmail(): string[] {\n    return [\n      ...this.getCriticalContactsEmail(),\n      process.env.TEAM_EMAIL || \"team@example.com\",\n      process.env.OPERATIONS_EMAIL || \"operations@example.com\"\n    ];\n  }\n\n  private getAllUsers(): string[] {\n    // In real implementation, fetch from database\n    return [\"user1\", \"user2\", \"user3\"];\n  }\n}\n\nexport const alertService = new AlertService();\n","size_bytes":8327},"server/services/ml-service.ts":{"content":"import { storage } from \"../storage\";\nimport type { InsertPrediction } from \"@shared/schema\";\n\ninterface PredictionInput {\n  siteId: string;\n  timestamp: Date;\n  sensorData?: any[];\n  imageUrl?: string;\n}\n\ninterface PredictionResult {\n  probability: number;\n  category: string;\n  explanation: {\n    topFeatures: string[];\n    confidence: number;\n  };\n  modelVersion: string;\n  uncertainty: number;\n}\n\nclass MLService {\n  private predictionQueue: Set<string> = new Set();\n  private imageProcessingQueue: Set<string> = new Set();\n\n  async predict(input: PredictionInput): Promise<PredictionResult> {\n    try {\n      // Get site data\n      const site = await storage.getSite(input.siteId);\n      if (!site) {\n        throw new Error(\"Site not found\");\n      }\n\n      // Get latest sensor readings\n      const sensorReadings = await storage.getLatestReadingsBySite(input.siteId);\n      \n      // Process features\n      const features = await this.extractFeatures(site, sensorReadings, input.sensorData);\n      \n      // Run prediction (simplified simulation)\n      const prediction = await this.runModel(features, input.imageUrl);\n      \n      // Create prediction record\n      const predictionData: InsertPrediction = {\n        siteId: input.siteId,\n        probability: prediction.probability,\n        confidence: prediction.explanation.confidence,\n        riskLevel: prediction.category,\n        modelVersion: prediction.modelVersion,\n        features: features,\n        explanation: prediction.explanation,\n        uncertainty: prediction.uncertainty\n      };\n\n      const savedPrediction = await storage.createPrediction(predictionData);\n      \n      // Update site risk level if needed\n      if (prediction.probability > 0.7) {\n        const newRiskLevel = prediction.probability > 0.9 ? \"critical\" : \"high\";\n        await storage.updateSiteRiskLevel(input.siteId, newRiskLevel);\n        \n        // Create alert if risk is high\n        if (prediction.probability > 0.8) {\n          await this.createHighRiskAlert(input.siteId, savedPrediction.id, prediction);\n        }\n      }\n\n      return prediction;\n    } catch (error) {\n      console.error(\"Prediction error:\", error);\n      throw new Error(\"Prediction failed\");\n    }\n  }\n\n  async queuePrediction(siteId: string): Promise<void> {\n    if (this.predictionQueue.has(siteId)) {\n      return; // Already queued\n    }\n\n    this.predictionQueue.add(siteId);\n    \n    // Process after a short delay to batch requests\n    setTimeout(async () => {\n      try {\n        await this.predict({\n          siteId,\n          timestamp: new Date()\n        });\n      } catch (error) {\n        console.error(`Queued prediction failed for site ${siteId}:`, error);\n      } finally {\n        this.predictionQueue.delete(siteId);\n      }\n    }, 5000);\n  }\n\n  async queueImageProcessing(imageId: string): Promise<void> {\n    if (this.imageProcessingQueue.has(imageId)) {\n      return;\n    }\n\n    this.imageProcessingQueue.add(imageId);\n    \n    // Simulate image processing\n    setTimeout(async () => {\n      try {\n        await storage.markImageProcessed(imageId);\n      } catch (error) {\n        console.error(`Image processing failed for ${imageId}:`, error);\n      } finally {\n        this.imageProcessingQueue.delete(imageId);\n      }\n    }, 10000);\n  }\n\n  private async extractFeatures(site: any, sensorReadings: any[], additionalData?: any[]): Promise<any> {\n    const features: any = {\n      siteFeatures: {\n        elevation: site.elevation || 0,\n        slopeAngle: site.slopeAngle || 0,\n        aspectAngle: site.aspectAngle || 0\n      },\n      sensorFeatures: {},\n      timeSeriesFeatures: {}\n    };\n\n    // Process sensor readings\n    const sensorTypes = ['strain', 'displacement', 'pore_pressure', 'tilt', 'vibration'];\n    \n    for (const type of sensorTypes) {\n      const typeReadings = sensorReadings.filter(r => r.sensor.type === type);\n      if (typeReadings.length > 0) {\n        const values = typeReadings.map(r => r.value);\n        features.sensorFeatures[type] = {\n          latest: values[0],\n          mean: values.reduce((a, b) => a + b, 0) / values.length,\n          std: this.calculateStd(values),\n          trend: this.calculateTrend(values)\n        };\n      }\n    }\n\n    // Add weather data (simulated)\n    features.weatherFeatures = {\n      rainfall: Math.random() * 50, // mm\n      temperature: 15 + Math.random() * 20, // °C\n      humidity: 40 + Math.random() * 40 // %\n    };\n\n    return features;\n  }\n\n  private async runModel(features: any, imageUrl?: string): Promise<PredictionResult> {\n    // Simulate ML model inference\n    const slopeRisk = Math.min(features.siteFeatures.slopeAngle / 45, 1);\n    const sensorRisk = this.calculateSensorRisk(features.sensorFeatures);\n    const weatherRisk = features.weatherFeatures.rainfall / 100;\n    \n    // Weighted combination\n    const probability = Math.min(\n      (slopeRisk * 0.4 + sensorRisk * 0.4 + weatherRisk * 0.2) * (0.8 + Math.random() * 0.4),\n      1\n    );\n\n    const category = this.getCategoryFromProbability(probability);\n    const confidence = 0.85 + Math.random() * 0.15;\n\n    // Generate explanation\n    const topFeatures = this.getTopFeatures(features, probability);\n\n    return {\n      probability,\n      category,\n      explanation: {\n        topFeatures,\n        confidence\n      },\n      modelVersion: \"v2.1.3\",\n      uncertainty: Math.random() * 0.1 + 0.05\n    };\n  }\n\n  private calculateSensorRisk(sensorFeatures: any): number {\n    let totalRisk = 0;\n    let count = 0;\n\n    for (const [type, data] of Object.entries(sensorFeatures)) {\n      const typedData = data as any;\n      let typeRisk = 0;\n\n      switch (type) {\n        case 'strain':\n          typeRisk = Math.min(typedData.latest / 1000, 1); // Normalize to microstrains\n          break;\n        case 'displacement':\n          typeRisk = Math.min(typedData.latest / 10, 1); // Normalize to mm\n          break;\n        case 'pore_pressure':\n          typeRisk = Math.min(typedData.latest / 500, 1); // Normalize to kPa\n          break;\n        case 'tilt':\n          typeRisk = Math.min(typedData.latest / 5, 1); // Normalize to degrees\n          break;\n        case 'vibration':\n          typeRisk = Math.min(typedData.latest / 50, 1); // Normalize to Hz\n          break;\n      }\n\n      // Factor in trend\n      if (typedData.trend > 0) {\n        typeRisk *= 1.5; // Increasing trend is more risky\n      }\n\n      totalRisk += typeRisk;\n      count++;\n    }\n\n    return count > 0 ? totalRisk / count : 0;\n  }\n\n  private getCategoryFromProbability(probability: number): string {\n    if (probability >= 0.8) return \"critical\";\n    if (probability >= 0.6) return \"high\";\n    if (probability >= 0.3) return \"medium\";\n    return \"low\";\n  }\n\n  private getTopFeatures(features: any, probability: number): string[] {\n    const featureImportance = [\n      { name: \"Slope angle\", value: features.siteFeatures.slopeAngle },\n      { name: \"Pore pressure\", value: features.sensorFeatures.pore_pressure?.latest || 0 },\n      { name: \"Displacement\", value: features.sensorFeatures.displacement?.latest || 0 },\n      { name: \"Recent rainfall\", value: features.weatherFeatures.rainfall },\n      { name: \"Strain readings\", value: features.sensorFeatures.strain?.latest || 0 }\n    ];\n\n    return featureImportance\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 3)\n      .map(f => f.name);\n  }\n\n  private async createHighRiskAlert(siteId: string, predictionId: string, prediction: PredictionResult): Promise<void> {\n    const severity = prediction.category === \"critical\" ? \"critical\" : \"high\";\n    \n    await storage.createAlert({\n      siteId,\n      predictionId,\n      type: \"threshold\",\n      severity,\n      title: `${prediction.category.charAt(0).toUpperCase() + prediction.category.slice(1)} Risk Detected`,\n      message: `Risk probability: ${(prediction.probability * 100).toFixed(1)}%`,\n      actionPlan: this.getActionPlan(prediction.category),\n      status: \"active\"\n    });\n  }\n\n  private getActionPlan(riskLevel: string): string {\n    switch (riskLevel) {\n      case \"critical\":\n        return \"1. Evacuate personnel immediately\\n2. Halt all operations\\n3. Contact emergency services\\n4. Increase monitoring to 1-minute intervals\";\n      case \"high\":\n        return \"1. Restrict access to danger zone\\n2. Pause blasting operations\\n3. Increase monitoring frequency\\n4. Prepare evacuation plan\";\n      case \"medium\":\n        return \"1. Monitor closely\\n2. Brief personnel on risk\\n3. Review safety protocols\\n4. Consider operational adjustments\";\n      default:\n        return \"Continue normal monitoring\";\n    }\n  }\n\n  private calculateStd(values: number[]): number {\n    const mean = values.reduce((a, b) => a + b, 0) / values.length;\n    const variance = values.reduce((a, b) => a + (b - mean) ** 2, 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  private calculateTrend(values: number[]): number {\n    if (values.length < 2) return 0;\n    \n    // Simple linear trend calculation\n    const n = values.length;\n    const x = Array.from({length: n}, (_, i) => i);\n    const meanX = x.reduce((a, b) => a + b, 0) / n;\n    const meanY = values.reduce((a, b) => a + b, 0) / n;\n    \n    const numerator = x.reduce((acc, xi, i) => acc + (xi - meanX) * (values[i] - meanY), 0);\n    const denominator = x.reduce((acc, xi) => acc + (xi - meanX) ** 2, 0);\n    \n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n}\n\nexport const mlService = new MLService();\n","size_bytes":9477},"server/services/websocket-service.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\ninterface ConnectedClient {\n  ws: WebSocket;\n  userId?: string;\n  subscribedSites?: string[];\n}\n\nclass WebSocketService {\n  private wss?: WebSocketServer;\n  private clients: Map<WebSocket, ConnectedClient> = new Map();\n\n  initialize(wss: WebSocketServer): void {\n    this.wss = wss;\n\n    wss.on('connection', (ws: WebSocket) => {\n      console.log('New WebSocket connection');\n      \n      this.clients.set(ws, { ws });\n\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString()) as WebSocketMessage;\n          this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('Invalid WebSocket message:', error);\n        }\n      });\n\n      ws.on('close', () => {\n        console.log('WebSocket connection closed');\n        this.clients.delete(ws);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.clients.delete(ws);\n      });\n\n      // Send welcome message\n      this.sendToClient(ws, {\n        type: 'connected',\n        data: { message: 'Connected to RockWatch AI real-time service' }\n      });\n    });\n  }\n\n  private handleMessage(ws: WebSocket, message: WebSocketMessage): void {\n    const client = this.clients.get(ws);\n    if (!client) return;\n\n    switch (message.type) {\n      case 'authenticate':\n        client.userId = message.data.userId;\n        this.sendToClient(ws, {\n          type: 'authenticated',\n          data: { userId: client.userId }\n        });\n        break;\n\n      case 'subscribe_sites':\n        client.subscribedSites = message.data.siteIds;\n        this.sendToClient(ws, {\n          type: 'subscribed',\n          data: { sites: client.subscribedSites }\n        });\n        break;\n\n      case 'ping':\n        this.sendToClient(ws, {\n          type: 'pong',\n          data: { timestamp: new Date().toISOString() }\n        });\n        break;\n\n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  }\n\n  broadcast(message: WebSocketMessage): void {\n    this.clients.forEach((client) => {\n      if (client.ws.readyState === WebSocket.OPEN) {\n        this.sendToClient(client.ws, message);\n      }\n    });\n  }\n\n  broadcastToSite(siteId: string, message: WebSocketMessage): void {\n    this.clients.forEach((client) => {\n      if (client.ws.readyState === WebSocket.OPEN && \n          client.subscribedSites?.includes(siteId)) {\n        this.sendToClient(client.ws, message);\n      }\n    });\n  }\n\n  broadcastToUser(userId: string, message: WebSocketMessage): void {\n    this.clients.forEach((client) => {\n      if (client.ws.readyState === WebSocket.OPEN && \n          client.userId === userId) {\n        this.sendToClient(client.ws, message);\n      }\n    });\n  }\n\n  private sendToClient(ws: WebSocket, message: WebSocketMessage): void {\n    try {\n      ws.send(JSON.stringify(message));\n    } catch (error) {\n      console.error('Failed to send WebSocket message:', error);\n    }\n  }\n\n  // Periodic status updates\n  startPeriodicUpdates(): void {\n    setInterval(() => {\n      this.broadcast({\n        type: 'system_status',\n        data: {\n          timestamp: new Date().toISOString(),\n          connectedClients: this.clients.size,\n          status: 'online'\n        }\n      });\n    }, 30000); // Every 30 seconds\n  }\n\n  getConnectionCount(): number {\n    return this.clients.size;\n  }\n\n  getConnectedUsers(): string[] {\n    const users: string[] = [];\n    this.clients.forEach((client) => {\n      if (client.userId) {\n        users.push(client.userId);\n      }\n    });\n    return users;\n  }\n}\n\nexport const websocketService = new WebSocketService();\n","size_bytes":3747},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useToast } from \"./use-toast\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const { toast } = useToast();\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log(\"WebSocket connected\");\n        reconnectAttempts.current = 0;\n        \n        // Send authentication if needed\n        wsRef.current?.send(JSON.stringify({\n          type: \"authenticate\",\n          data: { userId: \"current-user\" } // Replace with actual user ID\n        }));\n\n        // Subscribe to all sites\n        wsRef.current?.send(JSON.stringify({\n          type: \"subscribe_sites\",\n          data: { siteIds: [\"all\"] }\n        }));\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleMessage(message);\n        } catch (error) {\n          console.error(\"Failed to parse WebSocket message:\", error);\n        }\n      };\n\n      wsRef.current.onclose = (event) => {\n        console.log(\"WebSocket disconnected:\", event.code, event.reason);\n        wsRef.current = null;\n\n        // Attempt to reconnect if not a clean close\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          reconnectAttempts.current++;\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            console.log(`Attempting to reconnect (${reconnectAttempts.current}/${maxReconnectAttempts})...`);\n            connect();\n          }, delay);\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n    }\n  };\n\n  const handleMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case \"connected\":\n        console.log(\"WebSocket connection established:\", message.data.message);\n        break;\n\n      case \"alert\":\n        const alert = message.data;\n        const severity = alert.severity;\n        \n        toast({\n          title: `🚨 ${alert.title}`,\n          description: `${alert.site?.name || 'Unknown Site'} - ${alert.message}`,\n          variant: severity === \"critical\" || severity === \"high\" ? \"destructive\" : \"default\",\n          duration: severity === \"critical\" ? 0 : 5000, // Critical alerts don't auto-dismiss\n        });\n        break;\n\n      case \"alert_acknowledged\":\n        toast({\n          title: \"Alert Acknowledged\",\n          description: \"Alert has been acknowledged by team member.\",\n        });\n        break;\n\n      case \"system_status\":\n        // Handle system status updates\n        console.log(\"System status:\", message.data);\n        break;\n\n      case \"prediction_update\":\n        const prediction = message.data;\n        if (prediction.probability > 0.8) {\n          toast({\n            title: \"High Risk Detected\",\n            description: `Site ${prediction.siteId} shows elevated risk levels.`,\n            variant: \"destructive\",\n          });\n        }\n        break;\n\n      case \"sensor_offline\":\n        toast({\n          title: \"Sensor Offline\",\n          description: `Sensor ${message.data.sensorId} has gone offline.`,\n          variant: \"destructive\",\n        });\n        break;\n\n      case \"pong\":\n        // Response to ping, used for connection health check\n        break;\n\n      default:\n        console.log(\"Unknown WebSocket message type:\", message.type);\n    }\n  };\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn(\"WebSocket is not connected\");\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Component unmounting\");\n      wsRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    // Ping interval to keep connection alive\n    const pingInterval = setInterval(() => {\n      sendMessage({ type: \"ping\", data: {} });\n    }, 30000);\n\n    return () => {\n      clearInterval(pingInterval);\n      disconnect();\n    };\n  }, []);\n\n  return {\n    isConnected: wsRef.current?.readyState === WebSocket.OPEN,\n    sendMessage,\n    disconnect,\n  };\n}\n","size_bytes":4942},"client/src/lib/api-client.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface PredictionRequest {\n  siteId: string;\n  timestamp?: string;\n  sensorData?: any[];\n  imageUrl?: string;\n}\n\nexport interface PredictionResponse {\n  probability: number;\n  category: string;\n  explanation: {\n    topFeatures: string[];\n    confidence: number;\n  };\n  modelVersion: string;\n  uncertainty: number;\n}\n\nexport interface IngestionRequest {\n  type: \"sensor_reading\" | \"drone_image\";\n  data: any;\n}\n\nexport interface AlertRequest {\n  siteId: string;\n  predictionId?: string;\n  type: string;\n  severity: string;\n  title: string;\n  message: string;\n  actionPlan?: string;\n}\n\nexport class ApiClient {\n  // Prediction API\n  static async makePrediction(request: PredictionRequest): Promise<PredictionResponse> {\n    const response = await apiRequest(\"POST\", \"/api/v1/predict\", request);\n    return response.json();\n  }\n\n  // Data Ingestion API\n  static async ingestData(request: IngestionRequest) {\n    const response = await apiRequest(\"POST\", \"/api/v1/ingest\", request);\n    return response.json();\n  }\n\n  // Alert Management API\n  static async createAlert(request: AlertRequest) {\n    const response = await apiRequest(\"POST\", \"/api/v1/alert\", request);\n    return response.json();\n  }\n\n  static async acknowledgeAlert(alertId: string, userId: string) {\n    const response = await apiRequest(\"POST\", `/api/v1/alerts/${alertId}/acknowledge`, { userId });\n    return response.json();\n  }\n\n  // Model Management API\n  static async activateModel(modelId: string, type: string) {\n    const response = await apiRequest(\"POST\", `/api/v1/models/${modelId}/activate`, { type });\n    return response.json();\n  }\n\n  // Sites API\n  static async createSite(siteData: any) {\n    const response = await apiRequest(\"POST\", \"/api/v1/sites\", siteData);\n    return response.json();\n  }\n\n  static async createSensor(siteId: string, sensorData: any) {\n    const response = await apiRequest(\"POST\", `/api/v1/sites/${siteId}/sensors`, sensorData);\n    return response.json();\n  }\n\n  // Sensor Readings API\n  static async getSensorReadings(sensorId: string, from?: Date, to?: Date) {\n    const params = new URLSearchParams();\n    if (from) params.append(\"from\", from.toISOString());\n    if (to) params.append(\"to\", to.toISOString());\n    \n    const url = `/api/v1/sensors/${sensorId}/readings${params.toString() ? `?${params}` : ''}`;\n    const response = await apiRequest(\"GET\", url);\n    return response.json();\n  }\n\n  // Upload helpers\n  static async uploadSensorReading(sensorId: string, value: number, unit: string, quality = 1.0) {\n    return this.ingestData({\n      type: \"sensor_reading\",\n      data: {\n        sensorId,\n        value,\n        unit,\n        quality\n      }\n    });\n  }\n\n  static async uploadDroneImage(siteId: string, filename: string, fileUrl: string, captureTime: Date, metadata?: any) {\n    return this.ingestData({\n      type: \"drone_image\",\n      data: {\n        siteId,\n        filename,\n        fileUrl,\n        captureTime: captureTime.toISOString(),\n        metadata\n      }\n    });\n  }\n\n  // Utility methods\n  static async healthCheck() {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/v1/health\");\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n\n  static async getSystemStatus() {\n    const response = await apiRequest(\"GET\", \"/api/v1/status\");\n    return response.json();\n  }\n}\n\nexport default ApiClient;\n","size_bytes":3421},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport MetricsCards from \"@/components/dashboard/metrics-cards\";\nimport InteractiveMap from \"@/components/dashboard/interactive-map\";\nimport RealTimeAlerts from \"@/components/dashboard/real-time-alerts\";\nimport TimeSeriesChart from \"@/components/dashboard/time-series-chart\";\nimport ModelPerformance from \"@/components/dashboard/model-performance\";\nimport SiteDetailsPanel from \"@/components/dashboard/site-details-panel\";\nimport { useState } from \"react\";\nimport type { Site, Alert } from \"@shared/schema\";\n\ninterface DashboardMetrics {\n  highRisk: number;\n  mediumRisk: number;\n  lowRisk: number;\n  activeSensors: number;\n  modelAccuracy: string;\n}\n\nexport default function Dashboard() {\n  const [selectedSiteId, setSelectedSiteId] = useState<string | null>(null);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/v1/dashboard/metrics\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: sites = [], isLoading: sitesLoading } = useQuery<Site[]>({\n    queryKey: [\"/api/v1/sites\"],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  const { data: alerts = [], isLoading: alertsLoading } = useQuery<(Alert & { site: Site })[]>({\n    queryKey: [\"/api/v1/alerts\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  return (\n    <div className=\"flex flex-col\">\n      <Header \n        title=\"Risk Assessment Dashboard\"\n        subtitle=\"Real-time rockfall monitoring and prediction\"\n      />\n      \n      <div className=\"flex-1 p-6 space-y-6\">\n        {/* Key Metrics Cards */}\n        <MetricsCards \n          metrics={metrics} \n          isLoading={metricsLoading} \n        />\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Interactive Map */}\n          <div className=\"lg:col-span-2\">\n            <InteractiveMap\n              sites={sites}\n              isLoading={sitesLoading}\n              onSiteSelect={setSelectedSiteId}\n            />\n          </div>\n\n          {/* Real-time Alerts */}\n          <RealTimeAlerts\n            alerts={alerts}\n            isLoading={alertsLoading}\n          />\n        </div>\n\n        {/* Additional Dashboard Sections */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <TimeSeriesChart />\n          <ModelPerformance />\n        </div>\n\n        {/* Site Details Panel */}\n        {selectedSiteId && (\n          <SiteDetailsPanel\n            siteId={selectedSiteId}\n            onClose={() => setSelectedSiteId(null)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2712},"client/src/pages/data-upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/layout/header\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, Image, Database, Satellite } from \"lucide-react\";\n\nexport default function DataUpload() {\n  const { toast } = useToast();\n  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({});\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/v1/ingest\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Upload Successful\",\n        description: \"Data has been successfully uploaded and processed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload data. Please check the format and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (file: File, type: string) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n\n    // Simulate upload progress\n    const uploadId = Math.random().toString(36).substr(2, 9);\n    setUploadProgress(prev => ({ ...prev, [uploadId]: 0 }));\n\n    const interval = setInterval(() => {\n      setUploadProgress(prev => {\n        const current = prev[uploadId] || 0;\n        if (current >= 100) {\n          clearInterval(interval);\n          return prev;\n        }\n        return { ...prev, [uploadId]: current + 10 };\n      });\n    }, 200);\n\n    // Simulate completion after 2 seconds\n    setTimeout(() => {\n      setUploadProgress(prev => ({ ...prev, [uploadId]: 100 }));\n      clearInterval(interval);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <Header title=\"Data Upload\" subtitle=\"Upload sensor data, drone images, and DEM files\" />\n      \n      <div className=\"flex-1 p-6\">\n        <Tabs defaultValue=\"sensor\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"sensor\" data-testid=\"tab-sensor\">\n              <Database className=\"h-4 w-4 mr-2\" />\n              Sensor Data\n            </TabsTrigger>\n            <TabsTrigger value=\"drone\" data-testid=\"tab-drone\">\n              <Image className=\"h-4 w-4 mr-2\" />\n              Drone Images\n            </TabsTrigger>\n            <TabsTrigger value=\"dem\" data-testid=\"tab-dem\">\n              <Satellite className=\"h-4 w-4 mr-2\" />\n              DEM Files\n            </TabsTrigger>\n            <TabsTrigger value=\"batch\" data-testid=\"tab-batch\">\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Batch Upload\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"sensor\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Manual Entry */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Manual Sensor Reading</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sensor-id\">Sensor ID</Label>\n                      <Input id=\"sensor-id\" placeholder=\"Enter sensor ID\" data-testid=\"input-sensor-id\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"sensor-type\">Sensor Type</Label>\n                      <Select>\n                        <SelectTrigger data-testid=\"select-sensor-type\">\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"strain\">Strain</SelectItem>\n                          <SelectItem value=\"displacement\">Displacement</SelectItem>\n                          <SelectItem value=\"pore_pressure\">Pore Pressure</SelectItem>\n                          <SelectItem value=\"tilt\">Tilt</SelectItem>\n                          <SelectItem value=\"vibration\">Vibration</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"value\">Value</Label>\n                      <Input id=\"value\" type=\"number\" placeholder=\"Reading value\" data-testid=\"input-value\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"unit\">Unit</Label>\n                      <Input id=\"unit\" placeholder=\"e.g., µε, mm, kPa\" data-testid=\"input-unit\" />\n                    </div>\n                  </div>\n                  <Button \n                    className=\"w-full\" \n                    disabled={uploadMutation.isPending}\n                    data-testid=\"button-submit-reading\"\n                  >\n                    Submit Reading\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* CSV Upload */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>CSV File Upload</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                    <Database className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Drop CSV file here or click to upload\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Format: sensor_id, timestamp, value, unit, quality\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-upload-csv\">\n                    Choose CSV File\n                  </Button>\n                  \n                  {/* Progress indicators */}\n                  {Object.entries(uploadProgress).map(([id, progress]) => (\n                    <div key={id} className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Uploading...</span>\n                        <span>{progress}%</span>\n                      </div>\n                      <Progress value={progress} />\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"drone\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Image Upload */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Drone Image Upload</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"site-select\">Site</Label>\n                    <Select>\n                      <SelectTrigger data-testid=\"select-site\">\n                        <SelectValue placeholder=\"Select site\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"site-a127\">Site A-127</SelectItem>\n                        <SelectItem value=\"site-b089\">Site B-089</SelectItem>\n                        <SelectItem value=\"site-c045\">Site C-045</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                    <Image className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Drop images here or click to upload\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Supported: JPG, PNG, TIFF (max 50MB each)\n                    </p>\n                  </div>\n                  \n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-upload-images\">\n                    Choose Images\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Metadata */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Image Metadata</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"altitude\">Altitude (m)</Label>\n                      <Input id=\"altitude\" type=\"number\" placeholder=\"Flight altitude\" data-testid=\"input-altitude\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"weather\">Weather</Label>\n                      <Select>\n                        <SelectTrigger data-testid=\"select-weather\">\n                          <SelectValue placeholder=\"Select weather\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"clear\">Clear</SelectItem>\n                          <SelectItem value=\"cloudy\">Cloudy</SelectItem>\n                          <SelectItem value=\"rainy\">Rainy</SelectItem>\n                          <SelectItem value=\"foggy\">Foggy</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"notes\">Notes</Label>\n                    <Textarea \n                      id=\"notes\" \n                      placeholder=\"Additional observations...\" \n                      data-testid=\"textarea-notes\"\n                    />\n                  </div>\n                  \n                  <Button className=\"w-full\" data-testid=\"button-save-metadata\">\n                    Save Metadata\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"dem\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* DEM Upload */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>DEM File Upload</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                    <Satellite className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Drop DEM files here or click to upload\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Supported: GeoTIFF, ASCII Grid (max 500MB)\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-upload-dem\">\n                    Choose DEM Files\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Processing Options */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Processing Options</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Auto-process features</Label>\n                    <div className=\"space-y-2\">\n                      <label className=\"flex items-center space-x-2\">\n                        <input type=\"checkbox\" className=\"rounded\" defaultChecked />\n                        <span className=\"text-sm\">Calculate slope</span>\n                      </label>\n                      <label className=\"flex items-center space-x-2\">\n                        <input type=\"checkbox\" className=\"rounded\" defaultChecked />\n                        <span className=\"text-sm\">Calculate aspect</span>\n                      </label>\n                      <label className=\"flex items-center space-x-2\">\n                        <input type=\"checkbox\" className=\"rounded\" />\n                        <span className=\"text-sm\">Generate contours</span>\n                      </label>\n                      <label className=\"flex items-center space-x-2\">\n                        <input type=\"checkbox\" className=\"rounded\" />\n                        <span className=\"text-sm\">Calculate hillshade</span>\n                      </label>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"resolution\">Output Resolution (m)</Label>\n                    <Input id=\"resolution\" type=\"number\" defaultValue=\"1\" data-testid=\"input-resolution\" />\n                  </div>\n                  \n                  <Button className=\"w-full\" data-testid=\"button-start-processing\">\n                    Start Processing\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"batch\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Batch Data Upload</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Sensor Data Batch */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-medium\">Sensor Data</h3>\n                    <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-4 text-center\">\n                      <Database className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">CSV files</p>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-batch-sensor\">\n                      Upload Sensor CSVs\n                    </Button>\n                  </div>\n\n                  {/* Images Batch */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-medium\">Drone Images</h3>\n                    <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-4 text-center\">\n                      <Image className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">Image files</p>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-batch-images\">\n                      Upload Images\n                    </Button>\n                  </div>\n\n                  {/* DEM Batch */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-medium\">DEM Files</h3>\n                    <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-4 text-center\">\n                      <Satellite className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">GeoTIFF files</p>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-batch-dem\">\n                      Upload DEM Files\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Upload Queue */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Upload Queue</h3>\n                  <div className=\"border rounded-lg p-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      No files in queue\n                    </p>\n                  </div>\n                </div>\n\n                <Button className=\"w-full\" data-testid=\"button-process-batch\">\n                  Process All Files\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17069},"client/src/pages/model-management.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/layout/header\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Brain, CheckCircle, Clock, TrendingUp, Upload } from \"lucide-react\";\n\nexport default function ModelManagement() {\n  const { toast } = useToast();\n  const [selectedModel, setSelectedModel] = useState<string | null>(null);\n\n  const { data: models, isLoading } = useQuery({\n    queryKey: [\"/api/v1/models\"],\n    refetchInterval: 60000,\n  });\n\n  const activateModelMutation = useMutation({\n    mutationFn: async ({ modelId, type }: { modelId: string; type: string }) => {\n      return apiRequest(\"POST\", `/api/v1/models/${modelId}/activate`, { type });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/models\"] });\n      toast({\n        title: \"Model Activated\",\n        description: \"The model has been successfully activated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Activation Failed\",\n        description: \"Failed to activate the model. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getModelTypeColor = (type: string) => {\n    switch (type) {\n      case \"fusion\": return \"default\";\n      case \"cnn\": return \"secondary\";\n      case \"lstm\": return \"outline\";\n      case \"ensemble\": return \"destructive\";\n      default: return \"secondary\";\n    }\n  };\n\n  const formatMetrics = (metrics: any) => {\n    if (!metrics) return null;\n    return {\n      accuracy: (metrics.accuracy * 100).toFixed(1),\n      precision: (metrics.precision * 100).toFixed(1),\n      recall: (metrics.recall * 100).toFixed(1),\n      f1Score: (metrics.f1Score * 100).toFixed(1),\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col\">\n        <Header title=\"Model Management\" subtitle=\"Manage ML models and performance\" />\n        <div className=\"flex-1 p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-muted rounded\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      <Header title=\"Model Management\" subtitle=\"Manage ML models and performance\" />\n      \n      <div className=\"flex-1 p-6\">\n        <Tabs defaultValue=\"models\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"models\" data-testid=\"tab-models\">Models</TabsTrigger>\n            <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">Performance</TabsTrigger>\n            <TabsTrigger value=\"training\" data-testid=\"tab-training\">Training</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"models\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {models?.map((model) => (\n                <Card key={model.id} className={`${model.isActive ? 'ring-2 ring-primary' : ''}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Brain className=\"h-5 w-5\" />\n                        <span>{model.name}</span>\n                      </CardTitle>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={getModelTypeColor(model.type)}>\n                          {model.type.toUpperCase()}\n                        </Badge>\n                        {model.isActive && (\n                          <Badge variant=\"default\" className=\"bg-green-500\">\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            Active\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Version {model.version} • Trained {new Date(model.trainedAt).toLocaleDateString()}\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {/* Performance Metrics */}\n                      {formatMetrics(model.metrics) && (\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Accuracy</span>\n                              <span className=\"font-medium\">{formatMetrics(model.metrics)?.accuracy}%</span>\n                            </div>\n                            <Progress value={parseFloat(formatMetrics(model.metrics)?.accuracy || \"0\")} />\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Precision</span>\n                              <span className=\"font-medium\">{formatMetrics(model.metrics)?.precision}%</span>\n                            </div>\n                            <Progress value={parseFloat(formatMetrics(model.metrics)?.precision || \"0\")} />\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Actions */}\n                      <div className=\"flex items-center space-x-2 pt-4 border-t\">\n                        {!model.isActive && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => activateModelMutation.mutate({ modelId: model.id, type: model.type })}\n                            disabled={activateModelMutation.isPending}\n                            data-testid={`button-activate-${model.id}`}\n                          >\n                            {activateModelMutation.isPending ? \"Activating...\" : \"Activate\"}\n                          </Button>\n                        )}\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-details-${model.id}`}>\n                          View Details\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-export-${model.id}`}>\n                          Export\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Overall Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"h-5 w-5\" />\n                    <span>Overall Performance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-primary\">94.7%</div>\n                      <div className=\"text-sm text-muted-foreground\">Average Accuracy</div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Precision</span>\n                        <span className=\"font-medium\">91.2%</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Recall</span>\n                        <span className=\"font-medium\">89.8%</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>F1-Score</span>\n                        <span className=\"font-medium\">90.5%</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Model Comparison */}\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle>Model Comparison</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {models?.slice(0, 3).map((model) => (\n                      <div key={model.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant={getModelTypeColor(model.type)}>{model.type}</Badge>\n                          <span className=\"font-medium\">{model.name}</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium\">\n                            {formatMetrics(model.metrics)?.accuracy || 'N/A'}%\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Accuracy</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"training\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Training Status */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Clock className=\"h-5 w-5\" />\n                    <span>Training Status</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">No active training jobs</span>\n                      <Badge variant=\"secondary\">Idle</Badge>\n                    </div>\n                    <Button className=\"w-full\" data-testid=\"button-start-training\">\n                      <Brain className=\"h-4 w-4 mr-2\" />\n                      Start New Training\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Upload Model */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Upload className=\"h-5 w-5\" />\n                    <span>Upload Model</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                      <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Drop model files here or click to upload\n                      </p>\n                    </div>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-upload-model\">\n                      Choose Files\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12460},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/site-monitoring.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Header from \"@/components/layout/header\";\nimport { MapPin, Activity, Battery, Signal } from \"lucide-react\";\nimport type { Site } from \"@shared/schema\";\n\nexport default function SiteMonitoring() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [riskFilter, setRiskFilter] = useState(\"all\");\n\n  const { data: sites = [], isLoading } = useQuery<Site[]>({\n    queryKey: [\"/api/v1/sites\"],\n    refetchInterval: 30000,\n  });\n\n  const filteredSites = sites.filter((site: Site) => {\n    const matchesSearch = site.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRisk = riskFilter === \"all\" || site.riskLevel === riskFilter;\n    return matchesSearch && matchesRisk;\n  });\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"critical\": return \"destructive\";\n      case \"high\": return \"destructive\";\n      case \"medium\": return \"default\";\n      case \"low\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col\">\n        <Header title=\"Site Monitoring\" subtitle=\"Monitor all rockfall detection sites\" />\n        <div className=\"flex-1 p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-muted rounded\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      <Header title=\"Site Monitoring\" subtitle=\"Monitor all rockfall detection sites\" />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <Input\n            placeholder=\"Search sites...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-xs\"\n            data-testid=\"input-search-sites\"\n          />\n          <Select value={riskFilter} onValueChange={setRiskFilter}>\n            <SelectTrigger className=\"max-w-xs\" data-testid=\"select-risk-filter\">\n              <SelectValue placeholder=\"Filter by risk level\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Risk Levels</SelectItem>\n              <SelectItem value=\"critical\">Critical</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"low\">Low</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Sites Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredSites.map((site) => (\n            <Card key={site.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">{site.name}</CardTitle>\n                  <Badge variant={getRiskColor(site.riskLevel)} data-testid={`badge-risk-${site.id}`}>\n                    {site.riskLevel}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{site.description}</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Location */}\n                  <div className=\"flex items-center space-x-2\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">\n                      {site.location?.x?.toFixed(4)}, {site.location?.y?.toFixed(4)}\n                    </span>\n                  </div>\n\n                  {/* Site Details */}\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Elevation:</span>\n                      <br />\n                      <span className=\"font-medium\">{site.elevation || 'N/A'} m</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Slope:</span>\n                      <br />\n                      <span className=\"font-medium\">{site.slopeAngle || 'N/A'}°</span>\n                    </div>\n                  </div>\n\n                  {/* Status Indicators */}\n                  <div className=\"flex items-center justify-between pt-2 border-t\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Activity className=\"h-4 w-4 text-green-500\" />\n                        <span className=\"text-xs text-muted-foreground\">Active</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Signal className=\"h-4 w-4 text-blue-500\" />\n                        <span className=\"text-xs text-muted-foreground\">Online</span>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-details-${site.id}`}>\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredSites.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No sites found matching your criteria.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6503},"client/src/components/dashboard/interactive-map.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertTriangle, MapPin, Zap } from \"lucide-react\";\nimport type { Site } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n// Import heatmap plugin\nimport \"leaflet.heat\";\n\n// Fix Leaflet icon issue with bundlers\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',\n});\n\ninterface InteractiveMapProps {\n  sites: Site[];\n  isLoading: boolean;\n  onSiteSelect: (siteId: string) => void;\n}\n\n// Memoized risk icons to avoid recreation on every render\nconst riskIcons = {\n  critical: L.divIcon({\n    html: `<div style=\"\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background-color: #ef4444;\n      border: 2px solid white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n      animation: pulse 2s infinite;\n    \"></div>`,\n    className: 'custom-marker',\n    iconSize: [20, 20],\n    iconAnchor: [10, 10],\n  }),\n  high: L.divIcon({\n    html: `<div style=\"\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background-color: #ef4444;\n      border: 2px solid white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n      animation: pulse 2s infinite;\n    \"></div>`,\n    className: 'custom-marker',\n    iconSize: [20, 20],\n    iconAnchor: [10, 10],\n  }),\n  medium: L.divIcon({\n    html: `<div style=\"\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background-color: #f59e0b;\n      border: 2px solid white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n    \"></div>`,\n    className: 'custom-marker',\n    iconSize: [20, 20],\n    iconAnchor: [10, 10],\n  }),\n  low: L.divIcon({\n    html: `<div style=\"\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background-color: #10b981;\n      border: 2px solid white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n    \"></div>`,\n    className: 'custom-marker',\n    iconSize: [20, 20],\n    iconAnchor: [10, 10],\n  }),\n} as const;\n\n// Get risk icon by level\nconst getRiskIcon = (riskLevel: string): L.DivIcon => {\n  return riskIcons[riskLevel as keyof typeof riskIcons] || riskIcons.low;\n};\n\n// Component to handle map view switching and heatmap\nfunction MapController({ mapView, sites }: { mapView: string; sites: Site[] }) {\n  const map = useMap();\n  \n  useEffect(() => {\n    // Remove existing heatmap layer if it exists\n    map.eachLayer((layer) => {\n      if (layer instanceof (L as any).HeatLayer) {\n        map.removeLayer(layer);\n      }\n    });\n\n    // Add heatmap layer for heatmap view\n    if (mapView === 'heatmap' && sites.length > 0) {\n      // Convert sites to heatmap points with weights based on risk level\n      const heatmapData = sites.map(site => {\n        const riskWeights = {\n          critical: 1.0,\n          high: 0.8,\n          medium: 0.5,\n          low: 0.2\n        };\n        const weight = riskWeights[site.riskLevel as keyof typeof riskWeights] || 0.2;\n        return [site.location.y, site.location.x, weight] as [number, number, number];\n      });\n\n      // Create and add heatmap layer\n      const heatLayer = (L as any).heatLayer(heatmapData, {\n        radius: 50,\n        blur: 25,\n        maxZoom: 18,\n        gradient: {\n          0.2: '#10b981', // green for low risk\n          0.5: '#f59e0b', // amber for medium risk\n          0.8: '#ef4444', // red for high/critical risk\n          1.0: '#dc2626'  // darker red for critical\n        }\n      });\n      \n      map.addLayer(heatLayer);\n    }\n\n    // Invalidate map size when view changes\n    map.invalidateSize();\n  }, [mapView, map, sites]);\n  \n  return null;\n}\n\nexport default function InteractiveMap({ sites, isLoading, onSiteSelect }: InteractiveMapProps) {\n  const [mapView, setMapView] = useState<\"satellite\" | \"terrain\" | \"heatmap\">(\"satellite\");\n  const [isSimulating, setIsSimulating] = useState(false);\n  const { toast } = useToast();\n\n  // Default center position (India - suitable for rockfall monitoring)\n  const defaultCenter: [number, number] = [28.6139, 77.2090]; // Delhi coordinates\n  const defaultZoom = 6;\n\n  // Memoize tile layer configuration\n  const tileConfig = useMemo(() => {\n    switch (mapView) {\n      case 'satellite':\n        return {\n          url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n          attribution: '&copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid'\n        };\n      case 'terrain':\n        return {\n          url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n          attribution: 'Map data: &copy; OpenTopoMap contributors'\n        };\n      case 'heatmap':\n      default:\n        return {\n          url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n          attribution: '&copy; OpenStreetMap contributors'\n        };\n    }\n  }, [mapView]);\n\n  const handleSimulateEvent = async () => {\n    setIsSimulating(true);\n    \n    try {\n      // Use random site if available, otherwise use default coordinates\n      const targetSite = sites.length > 0 ? sites[Math.floor(Math.random() * sites.length)] : null;\n      const lat = targetSite ? targetSite.location.y : 28.7;\n      const lon = targetSite ? targetSite.location.x : 77.1;\n\n      // Simulate prediction with location data\n      const predictionData = {\n        lat,\n        lon,\n        sensorData: {\n          strain: Math.random() * 100,\n          displacement: Math.random() * 50,\n          vibration: Math.random() * 25\n        }\n      };\n\n      // Use apiRequest instead of fetch\n      const response = await apiRequest(\"POST\", \"/api/v1/predict\", predictionData);\n      const result = await response.json();\n\n      toast({\n        title: \"Event Simulated\",\n        description: `Risk prediction generated: ${result.probability?.toFixed(2) || 'N/A'}% probability`,\n      });\n\n      // Invalidate relevant cache keys\n      queryClient.invalidateQueries({ queryKey: ['/api/v1/alerts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/v1/predictions'] });\n\n    } catch (error) {\n      console.error('Simulation error:', error);\n      toast({\n        title: \"Simulation Error\",\n        description: error instanceof Error ? error.message : \"Network error during simulation\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSimulating(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-48\" />\n            <div className=\"flex space-x-2\">\n              <Skeleton className=\"h-8 w-20\" />\n              <Skeleton className=\"h-8 w-20\" />\n              <Skeleton className=\"h-8 w-20\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-96 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Live Risk Assessment Map</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant={mapView === \"satellite\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setMapView(\"satellite\")}\n              data-testid=\"button-map-satellite\"\n            >\n              Satellite\n            </Button>\n            <Button\n              variant={mapView === \"terrain\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setMapView(\"terrain\")}\n              data-testid=\"button-map-terrain\"\n            >\n              Terrain\n            </Button>\n            <Button\n              variant={mapView === \"heatmap\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setMapView(\"heatmap\")}\n              data-testid=\"button-map-heatmap\"\n            >\n              Heatmap\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"relative h-96\">\n          {/* Simulate Event Button */}\n          <div className=\"absolute top-2 left-2 z-[1000]\">\n            <Button\n              onClick={handleSimulateEvent}\n              disabled={isSimulating}\n              size=\"sm\"\n              className=\"bg-orange-500 hover:bg-orange-600 text-white\"\n              data-testid=\"button-simulate-event\"\n            >\n              <Zap className=\"w-4 h-4 mr-2\" />\n              {isSimulating ? \"Simulating...\" : \"Simulate Event\"}\n            </Button>\n          </div>\n\n          <MapContainer\n            center={defaultCenter}\n            zoom={defaultZoom}\n            style={{ height: '100%', width: '100%' }}\n          >\n            <TileLayer\n              url={tileConfig.url}\n              attribution={tileConfig.attribution}\n            />\n            \n            <MapController mapView={mapView} sites={sites} />\n            \n            {/* Render site markers only if not in heatmap view */}\n            {mapView !== 'heatmap' && sites.map((site) => (\n              <Marker\n                key={site.id}\n                position={[site.location.y, site.location.x] as [number, number]}\n                icon={getRiskIcon(site.riskLevel)}\n                eventHandlers={{\n                  click: () => {\n                    onSiteSelect(site.id);\n                  },\n                }}\n              >\n                <Popup>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"w-4 h-4\" />\n                      <h3 className=\"font-semibold\">{site.name}</h3>\n                    </div>\n                    <div className=\"space-y-1 text-sm\">\n                      <p><strong>Risk Level:</strong> \n                        <Badge \n                          variant={site.riskLevel === 'critical' || site.riskLevel === 'high' ? 'destructive' : \n                                 site.riskLevel === 'medium' ? 'secondary' : 'default'}\n                          className=\"ml-2\"\n                        >\n                          {site.riskLevel.toUpperCase()}\n                        </Badge>\n                      </p>\n                      <p><strong>Elevation:</strong> {site.elevation}m</p>\n                      <p><strong>Slope:</strong> {site.slopeAngle}°</p>\n                      <p><strong>Status:</strong> {site.isActive ? 'Active' : 'Inactive'}</p>\n                      <p className=\"text-muted-foreground\">{site.description}</p>\n                    </div>\n                  </div>\n                </Popup>\n              </Marker>\n            ))}\n          </MapContainer>\n        </div>\n        \n        {/* Map Legend */}\n        <div className=\"p-4 border-t border-border bg-muted/30\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                <span>Critical/High Risk</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                <span>Medium Risk</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <span>Low Risk</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Zap className=\"w-3 h-3 text-orange-500\" />\n                <span>Simulate Event</span>\n              </div>\n              {mapView === 'heatmap' && (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-gradient-to-r from-green-500 via-yellow-500 to-red-500\"></div>\n                  <span>Risk Intensity</span>\n                </div>\n              )}\n            </div>\n            <span className=\"text-muted-foreground\">\n              Live data • {sites.length} {mapView === 'heatmap' ? 'heat zones' : 'sites'} • Updated now\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13089},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertTriangle, TriangleAlert, Satellite, CheckCircle, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface MetricsCardsProps {\n  metrics?: {\n    highRisk: number;\n    mediumRisk: number;\n    lowRisk: number;\n    activeSensors: number;\n    modelAccuracy: string;\n  };\n  isLoading: boolean;\n}\n\nexport default function MetricsCards({ metrics, isLoading }: MetricsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n                <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              </div>\n              <div className=\"mt-4\">\n                <Skeleton className=\"h-4 w-32\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const metricsData = [\n    {\n      title: \"High Risk Sites\",\n      value: metrics?.highRisk || 0,\n      icon: AlertTriangle,\n      iconBg: \"bg-destructive/10\",\n      iconColor: \"text-destructive\",\n      valueColor: \"text-destructive\",\n      change: \"+2 from yesterday\",\n      changeIcon: TrendingUp,\n      changeColor: \"text-destructive\",\n      testId: \"metric-high-risk\"\n    },\n    {\n      title: \"Medium Risk Sites\", \n      value: metrics?.mediumRisk || 0,\n      icon: TriangleAlert,\n      iconBg: \"bg-yellow-100 dark:bg-yellow-900/20\",\n      iconColor: \"text-yellow-600\",\n      valueColor: \"text-yellow-600\",\n      change: \"-1 from yesterday\",\n      changeIcon: TrendingDown,\n      changeColor: \"text-green-600\",\n      testId: \"metric-medium-risk\"\n    },\n    {\n      title: \"Active Sensors\",\n      value: metrics?.activeSensors || 0,\n      icon: Satellite,\n      iconBg: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n      valueColor: \"text-primary\",\n      change: \"98.2% uptime\",\n      changeIcon: TrendingUp,\n      changeColor: \"text-green-600\",\n      testId: \"metric-active-sensors\"\n    },\n    {\n      title: \"Model Accuracy\",\n      value: `${metrics?.modelAccuracy || '94.7'}%`,\n      icon: CheckCircle,\n      iconBg: \"bg-green-100 dark:bg-green-900/20\",\n      iconColor: \"text-green-600\",\n      valueColor: \"text-green-600\",\n      change: \"+0.3% this week\",\n      changeIcon: TrendingUp,\n      changeColor: \"text-green-600\",\n      testId: \"metric-model-accuracy\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n      {metricsData.map((metric) => (\n        <Card key={metric.title} className=\"border border-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{metric.title}</p>\n                <p className={`text-3xl font-bold ${metric.valueColor}`} data-testid={metric.testId}>\n                  {metric.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${metric.iconBg} rounded-lg flex items-center justify-center`}>\n                <metric.icon className={`h-6 w-6 ${metric.iconColor}`} />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <metric.changeIcon className={`h-4 w-4 ${metric.changeColor} mr-1`} />\n              <span className={metric.changeColor}>{metric.change}</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3781},"client/src/components/dashboard/model-performance.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Brain } from \"lucide-react\";\n\nexport default function ModelPerformance() {\n  const { data: models, isLoading } = useQuery({\n    queryKey: [\"/api/v1/models\"],\n    refetchInterval: 300000, // Refresh every 5 minutes\n  });\n\n  const activeModel = models?.find(model => model.isActive);\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-40\" />\n            <div className=\"flex items-center space-x-2\">\n              <Skeleton className=\"w-2 h-2 rounded-full\" />\n              <Skeleton className=\"h-4 w-12\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"text-center space-y-2\">\n                  <Skeleton className=\"h-8 w-12 mx-auto\" />\n                  <Skeleton className=\"h-4 w-16 mx-auto\" />\n                </div>\n              ))}\n            </div>\n            <div className=\"space-y-3\">\n              <Skeleton className=\"h-5 w-32\" />\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-4 w-20\" />\n                    <Skeleton className=\"h-4 w-8\" />\n                  </div>\n                  <Skeleton className=\"h-2 w-full\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatMetrics = (metrics: any) => {\n    if (!metrics) return null;\n    return {\n      accuracy: (metrics.accuracy * 100).toFixed(1),\n      precision: (metrics.precision * 100).toFixed(1),\n      recall: (metrics.recall * 100).toFixed(1),\n      f1Score: (metrics.f1Score * 100).toFixed(1),\n    };\n  };\n\n  const topFeatures = [\n    { name: \"Slope angle\", importance: 80 },\n    { name: \"Pore pressure\", importance: 65 },\n    { name: \"Displacement\", importance: 52 }\n  ];\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Model Performance</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n            <span className=\"text-sm text-muted-foreground\">\n              {activeModel?.version || 'v2.1.3'}\n            </span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 space-y-6\">\n        {/* Performance Metrics */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\">\n              {formatMetrics(activeModel?.metrics)?.accuracy || '94.7'}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Accuracy</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {formatMetrics(activeModel?.metrics)?.precision || '91.2'}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Precision</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {formatMetrics(activeModel?.metrics)?.recall || '89.8'}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Recall</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {formatMetrics(activeModel?.metrics)?.f1Score || '90.5'}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">F1-Score</div>\n          </div>\n        </div>\n        \n        {/* Model Features */}\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium\">Top Contributing Features</h4>\n          <div className=\"space-y-2\">\n            {topFeatures.map((feature) => (\n              <div key={feature.name} className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">{feature.name}</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-16 h-2 bg-muted rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-primary transition-all duration-300\"\n                      style={{ width: `${feature.importance}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground w-8 text-right\">\n                    {feature.importance}%\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Model Actions */}\n        <div className=\"flex items-center space-x-2 pt-4 border-t border-border\">\n          <Button \n            size=\"sm\" \n            className=\"flex-1\"\n            data-testid=\"button-retrain-model\"\n          >\n            <Brain className=\"h-4 w-4 mr-2\" />\n            Retrain Model\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            data-testid=\"button-export-model\"\n          >\n            Export\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5870},"client/src/components/dashboard/real-time-alerts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertTriangle, TriangleAlert, Info, Settings } from \"lucide-react\";\nimport type { Alert, Site } from \"@shared/schema\";\n\ninterface RealTimeAlertsProps {\n  alerts: (Alert & { site: Site })[];\n  isLoading: boolean;\n}\n\nexport default function RealTimeAlerts({ alerts, isLoading }: RealTimeAlertsProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-32\" />\n            <div className=\"flex items-center space-x-2\">\n              <Skeleton className=\"w-2 h-2 rounded-full\" />\n              <Skeleton className=\"h-4 w-8\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"p-3 border rounded-lg animate-pulse\">\n                <div className=\"flex items-start space-x-3\">\n                  <Skeleton className=\"w-3 h-3 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-3 w-16\" />\n                    </div>\n                    <Skeleton className=\"h-3 w-48\" />\n                    <Skeleton className=\"h-3 w-40\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getAlertIcon = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n      case \"high\":\n        return AlertTriangle;\n      case \"medium\":\n        return TriangleAlert;\n      default:\n        return Info;\n    }\n  };\n\n  const getAlertStyles = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return {\n          bg: \"bg-red-50 dark:bg-red-900/20\",\n          border: \"border-red-200 dark:border-red-800\",\n          dot: \"bg-red-500\",\n          title: \"text-red-800 dark:text-red-200\",\n          message: \"text-red-700 dark:text-red-300\",\n          time: \"text-red-600 dark:text-red-400\",\n          pulse: \"pulse-dot\"\n        };\n      case \"high\":\n        return {\n          bg: \"bg-red-50 dark:bg-red-900/20\",\n          border: \"border-red-200 dark:border-red-800\",\n          dot: \"bg-red-500\",\n          title: \"text-red-800 dark:text-red-200\",\n          message: \"text-red-700 dark:text-red-300\",\n          time: \"text-red-600 dark:text-red-400\",\n          pulse: \"\"\n        };\n      case \"medium\":\n        return {\n          bg: \"bg-yellow-50 dark:bg-yellow-900/20\",\n          border: \"border-yellow-200 dark:border-yellow-800\",\n          dot: \"bg-yellow-500\",\n          title: \"text-yellow-800 dark:text-yellow-200\",\n          message: \"text-yellow-700 dark:text-yellow-300\",\n          time: \"text-yellow-600 dark:text-yellow-400\",\n          pulse: \"\"\n        };\n      default:\n        return {\n          bg: \"bg-blue-50 dark:bg-blue-900/20\",\n          border: \"border-blue-200 dark:border-blue-800\",\n          dot: \"bg-blue-500\",\n          title: \"text-blue-800 dark:text-blue-200\", \n          message: \"text-blue-700 dark:text-blue-300\",\n          time: \"text-blue-600 dark:text-blue-400\",\n          pulse: \"\"\n        };\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const alertTime = new Date(timestamp);\n    const diffMs = now.getTime() - alertTime.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMins < 1) return \"Just now\";\n    if (diffMins < 60) return `${diffMins} min ago`;\n    if (diffMins < 1440) return `${Math.floor(diffMins / 60)} hr ago`;\n    return `${Math.floor(diffMins / 1440)} day ago`;\n  };\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Real-time Alerts</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full pulse-dot\"></div>\n            <span className=\"text-xs text-muted-foreground\">Live</span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"p-6 space-y-4 max-h-96 overflow-y-auto\">\n          {alerts.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Info className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No active alerts</p>\n            </div>\n          ) : (\n            alerts.slice(0, 10).map((alert) => {\n              const styles = getAlertStyles(alert.severity);\n              const Icon = getAlertIcon(alert.severity);\n              \n              return (\n                <div \n                  key={alert.id} \n                  className={`flex items-start space-x-3 p-3 ${styles.bg} border ${styles.border} rounded-lg`}\n                  data-testid={`alert-${alert.id}`}\n                >\n                  <div className={`w-3 h-3 ${styles.dot} rounded-full mt-1 ${styles.pulse}`}></div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className={`text-sm font-medium ${styles.title}`}>{alert.title}</p>\n                      <span className={`text-xs ${styles.time}`}>\n                        {formatTimeAgo(alert.createdAt || new Date())}\n                      </span>\n                    </div>\n                    <p className={`text-sm ${styles.message}`}>\n                      {alert.site?.name} - {alert.message}\n                    </p>\n                    {alert.severity === \"critical\" && (\n                      <p className={`text-xs ${styles.time} mt-1`}>\n                        Action Required: {alert.actionPlan?.split('\\n')[0] || 'Immediate response needed'}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n        \n        {alerts.length > 0 && (\n          <div className=\"p-4 border-t border-border\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full text-center text-sm text-primary hover:text-primary/80\"\n              data-testid=\"button-view-all-alerts\"\n            >\n              View All Alerts\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6850},"client/src/components/dashboard/site-details-panel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { X, MapPin, TrendingUp, AlertTriangle } from \"lucide-react\";\n\ninterface SiteDetailsPanelProps {\n  siteId: string;\n  onClose: () => void;\n}\n\nexport default function SiteDetailsPanel({ siteId, onClose }: SiteDetailsPanelProps) {\n  const { data: siteDetails, isLoading } = useQuery({\n    queryKey: [\"/api/v1/sites\", siteId],\n    enabled: !!siteId,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-6 w-48\" />\n              <Skeleton className=\"h-4 w-64\" />\n            </div>\n            <Skeleton className=\"h-8 w-24\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-5 w-32\" />\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-12 w-full\" />\n              ))}\n            </div>\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-5 w-32\" />\n              <Skeleton className=\"h-48 w-full\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const site = siteDetails;\n  const latestPrediction = site?.predictions?.[0];\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"critical\": return \"destructive\";\n      case \"high\": return \"destructive\";\n      case \"medium\": return \"default\";\n      case \"low\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getRiskFactors = () => {\n    if (!latestPrediction) return [];\n    \n    return [\n      {\n        factor: \"Slope angle exceeds threshold\",\n        impact: \"High Impact\",\n        severity: \"high\"\n      },\n      {\n        factor: \"Elevated pore pressure\",\n        impact: \"Med Impact\", \n        severity: \"medium\"\n      },\n      {\n        factor: \"Recent rainfall detected\",\n        impact: \"Med Impact\",\n        severity: \"medium\"\n      }\n    ];\n  };\n\n  const getRecommendedActions = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"critical\":\n        return [\n          \"Evacuate personnel from danger zone\",\n          \"Halt blasting operations immediately\",\n          \"Contact emergency services\"\n        ];\n      case \"high\":\n        return [\n          \"Evacuate personnel from danger zone\", \n          \"Halt blasting operations immediately\",\n          \"Increase monitoring to 5 min intervals\"\n        ];\n      default:\n        return [\n          \"Monitor closely\",\n          \"Brief personnel on risk\",\n          \"Review safety protocols\"\n        ];\n    }\n  };\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MapPin className=\"h-5 w-5\" />\n              <span>{site?.name || 'Site Details'}</span>\n            </CardTitle>\n            <p className=\"text-muted-foreground\">\n              GPS: {site?.location?.x?.toFixed(4)}° N, {site?.location?.y?.toFixed(4)}° E\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant={getRiskColor(site?.riskLevel || 'low')}>\n              {site?.riskLevel || 'Unknown'} Risk\n            </Badge>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onClose}\n              data-testid=\"button-close-site-details\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Explainability Panel */}\n          <div>\n            <h4 className=\"font-medium mb-4 flex items-center space-x-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>Risk Explanation</span>\n            </h4>\n            \n            {/* Risk Factors */}\n            <div className=\"space-y-3 mb-6\">\n              {getRiskFactors().map((factor, index) => (\n                <div \n                  key={index}\n                  className={`flex items-center justify-between p-3 rounded border\n                    ${factor.severity === 'high' ? 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800' : ''}\n                    ${factor.severity === 'medium' ? 'bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800' : ''}\n                  `}\n                >\n                  <span className={`text-sm \n                    ${factor.severity === 'high' ? 'text-red-800 dark:text-red-200' : ''}\n                    ${factor.severity === 'medium' ? 'text-yellow-800 dark:text-yellow-200' : ''}\n                  `}>\n                    {factor.factor}\n                  </span>\n                  <span className={`text-sm font-medium\n                    ${factor.severity === 'high' ? 'text-red-600 dark:text-red-400' : ''}\n                    ${factor.severity === 'medium' ? 'text-yellow-600 dark:text-yellow-400' : ''}\n                  `}>\n                    {factor.impact}\n                  </span>\n                </div>\n              ))}\n            </div>\n            \n            {/* Recommended Actions */}\n            <div>\n              <h5 className=\"font-medium mb-3\">Recommended Actions</h5>\n              <div className=\"space-y-2\">\n                {getRecommendedActions(site?.riskLevel || 'low').map((action, index) => (\n                  <div key={index} className=\"flex items-start space-x-2\">\n                    <div className={`w-2 h-2 rounded-full mt-2 \n                      ${site?.riskLevel === 'critical' || site?.riskLevel === 'high' ? 'bg-red-500' : 'bg-yellow-500'}\n                    `}></div>\n                    <p className=\"text-sm\">{action}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          {/* GradCAM Visualization */}\n          <div>\n            <h4 className=\"font-medium mb-4\">Visual Analysis (GradCAM)</h4>\n            <div className=\"relative\">\n              {/* Simulated drone image */}\n              <div className=\"w-full h-48 bg-gradient-to-br from-green-600 via-yellow-600 to-red-600 rounded-lg relative overflow-hidden\">\n                {/* Simulated terrain texture */}\n                <div className=\"absolute inset-0 bg-black/20\"></div>\n                \n                {/* Risk highlight overlay */}\n                <div className=\"absolute inset-0 rounded-lg overflow-hidden\">\n                  <div className=\"absolute top-6 left-8 w-16 h-12 bg-red-500/40 rounded-lg border-2 border-red-400\"></div>\n                  <div className=\"absolute top-12 right-12 w-12 h-8 bg-yellow-400/30 rounded-lg border border-yellow-400\"></div>\n                </div>\n                \n                {/* Analysis overlay */}\n                <div className=\"absolute bottom-2 left-2 bg-black/70 text-white text-xs px-2 py-1 rounded\">\n                  Risk areas highlighted\n                </div>\n              </div>\n              \n              {/* Analysis Details */}\n              <div className=\"mt-4 space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Confidence Score:</span>\n                  <span className=\"font-medium\">\n                    {latestPrediction?.confidence ? `${(latestPrediction.confidence * 100).toFixed(1)}%` : '94.7%'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Risk Level:</span>\n                  <span className={`font-medium \n                    ${site?.riskLevel === 'critical' || site?.riskLevel === 'high' ? 'text-red-600' : ''}\n                    ${site?.riskLevel === 'medium' ? 'text-yellow-600' : ''}\n                    ${site?.riskLevel === 'low' ? 'text-green-600' : ''}\n                  `}>\n                    {site?.riskLevel?.charAt(0).toUpperCase() + site?.riskLevel?.slice(1) || 'Unknown'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Model Version:</span>\n                  <span className=\"font-medium\">\n                    {latestPrediction?.modelVersion || 'v2.1.3'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8959},"client/src/components/dashboard/time-series-chart.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function TimeSeriesChart() {\n  const [timeRange, setTimeRange] = useState(\"24h\");\n\n  const { data: trendData, isLoading } = useQuery({\n    queryKey: [\"/api/v1/dashboard/trends\", timeRange],\n    refetchInterval: 300000, // Refresh every 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-40\" />\n            <Skeleton className=\"h-8 w-32\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-48 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-border\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Risk Trend Analysis</CardTitle>\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-time-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"24h\">Last 24 Hours</SelectItem>\n              <SelectItem value=\"7d\">Last 7 Days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 Days</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"h-48 bg-muted/30 rounded-lg flex items-center justify-center relative overflow-hidden\">\n          {/* Simulated chart background */}\n          <div className=\"absolute inset-0 p-4\">\n            <div className=\"h-full w-full relative\">\n              {/* Y-axis labels */}\n              <div className=\"absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-muted-foreground\">\n                <span>High</span>\n                <span>Med</span>\n                <span>Low</span>\n              </div>\n              \n              {/* Chart area */}\n              <div className=\"ml-8 h-full relative\">\n                {/* Risk level visualization */}\n                <div className=\"absolute bottom-0 left-0 w-full h-full\">\n                  {/* Simulated line chart */}\n                  <svg className=\"w-full h-full\" viewBox=\"0 0 300 120\">\n                    {/* High risk trend line */}\n                    <polyline \n                      points=\"0,80 50,85 100,70 150,60 200,45 250,40 300,35\" \n                      fill=\"none\" \n                      stroke=\"hsl(210, 83%, 53%)\" \n                      strokeWidth=\"2\"\n                    />\n                    {/* Medium risk trend line */}\n                    <polyline \n                      points=\"0,90 50,95 100,90 150,85 200,80 250,75 300,70\" \n                      fill=\"none\" \n                      stroke=\"hsl(38, 92%, 50%)\" \n                      strokeWidth=\"2\"\n                    />\n                    {/* Low risk trend line */}\n                    <polyline \n                      points=\"0,100 50,105 100,100 150,95 200,90 250,88 300,85\" \n                      fill=\"none\" \n                      stroke=\"hsl(142, 71%, 45%)\" \n                      strokeWidth=\"2\"\n                    />\n                    \n                    {/* Data points */}\n                    <circle cx=\"300\" cy=\"35\" r=\"3\" fill=\"hsl(210, 83%, 53%)\" />\n                    <circle cx=\"300\" cy=\"70\" r=\"3\" fill=\"hsl(38, 92%, 50%)\" />\n                    <circle cx=\"300\" cy=\"85\" r=\"3\" fill=\"hsl(142, 71%, 45%)\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Chart overlay info */}\n          <div className=\"absolute bottom-4 right-4 bg-card/80 backdrop-blur-sm border border-border rounded p-2\">\n            <p className=\"text-xs text-muted-foreground\">Updated every 5 minutes</p>\n          </div>\n        </div>\n        \n        {/* Chart legend */}\n        <div className=\"mt-4 flex items-center justify-center space-x-6 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-0.5 bg-primary\"></div>\n            <span>High Risk Sites</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-0.5 bg-yellow-500\"></div>\n            <span>Medium Risk Sites</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-0.5 bg-green-500\"></div>\n            <span>Low Risk Sites</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4947},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, AlertTriangle } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">{title}</h2>\n          {subtitle && (\n            <p className=\"text-muted-foreground\">{subtitle}</p>\n          )}\n        </div>\n        \n        {/* Alert Status & Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {/* System Status */}\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full pulse-dot\"></div>\n            <span className=\"text-sm text-muted-foreground\">System Online</span>\n          </div>\n\n          {/* Real-time Alert Badge */}\n          <div className=\"relative\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"relative p-2 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-alerts\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <Badge \n                variant=\"destructive\" \n                className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n              >\n                3\n              </Badge>\n            </Button>\n          </div>\n\n          {/* Emergency Button */}\n          <Button \n            variant=\"destructive\" \n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-emergency\"\n          >\n            <AlertTriangle className=\"h-4 w-4\" />\n            <span>Emergency Alert</span>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1935},"client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  LayoutDashboard, \n  MapPin, \n  Brain, \n  Upload, \n  Bell, \n  BarChart3, \n  Settings, \n  Mountain \n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Site Monitoring\", href: \"/sites\", icon: MapPin },\n  { name: \"Model Management\", href: \"/models\", icon: Brain },\n  { name: \"Data Upload\", href: \"/upload\", icon: Upload },\n  { name: \"Alert Settings\", href: \"/alerts\", icon: Bell },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col\">\n      {/* Logo & Title */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Mountain className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold\">RockWatch AI</h1>\n            <p className=\"text-sm text-muted-foreground\">Prediction System</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href || (item.href === \"/dashboard\" && location === \"/\");\n          return (\n            <Link key={item.name} href={item.href}>\n              <Button\n                variant={isActive ? \"default\" : \"ghost\"}\n                className={cn(\n                  \"w-full justify-start\",\n                  isActive && \"bg-primary text-primary-foreground\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(\" \", \"-\")}`}\n              >\n                <item.icon className=\"mr-3 h-4 w-4\" />\n                {item.name}\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarFallback className=\"bg-muted\">SC</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium\">Dr. Sarah Chen</p>\n            <p className=\"text-xs text-muted-foreground\">Site Engineer</p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-user-settings\">\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2856},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/dashboard/live-tracking-map.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  MapPin, \n  Navigation, \n  Search, \n  Users, \n  AlertTriangle, \n  Thermometer,\n  Wind,\n  Droplets,\n  Eye,\n  Loader2\n} from \"lucide-react\";\n// import { useWebSocket } from \"@/hooks/use-websocket\";\n\n/**\n * Live Tracking Map Component\n * Features:\n * - Real-time user/tourist location tracking via WebSocket\n * - Location search with live weather and risk data\n * - Route deviation alerts\n * - Tourist cluster heatmap\n * - Live environmental data display\n */\nexport default function LiveTrackingMap() {\n  const { toast } = useToast();\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState<any>(null);\n  const [weatherData, setWeatherData] = useState<any>(null);\n  const [riskData, setRiskData] = useState<any>(null);\n  const [tourists, setTourists] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Simulated tourist locations (in real implementation, this would come from WebSocket)\n  useEffect(() => {\n    // Simulate live tourist tracking data\n    const simulatedTourists = [\n      {\n        id: \"tourist_1\",\n        name: \"Tourist Group A\",\n        lat: 32.2432,\n        lng: 77.1892,\n        status: \"safe\",\n        lastUpdate: new Date(),\n        route: \"Manali to Leh\",\n        groupSize: 4\n      },\n      {\n        id: \"tourist_2\", \n        name: \"Solo Traveler B\",\n        lat: 34.0837,\n        lng: 74.7973,\n        status: \"deviation\",\n        lastUpdate: new Date(),\n        route: \"Srinagar Valley\",\n        groupSize: 1\n      },\n      {\n        id: \"tourist_3\",\n        name: \"Family Group C\",\n        lat: 30.0668,\n        lng: 79.0193,\n        status: \"safe\",\n        lastUpdate: new Date(),\n        route: \"Nainital Hills\",\n        groupSize: 6\n      }\n    ];\n\n    setTourists(simulatedTourists);\n\n    // Simulate real-time updates\n    const interval = setInterval(() => {\n      setTourists(prev => prev.map(tourist => ({\n        ...tourist,\n        lat: tourist.lat + (Math.random() - 0.5) * 0.01,\n        lng: tourist.lng + (Math.random() - 0.5) * 0.01,\n        lastUpdate: new Date()\n      })));\n    }, 10000); // Update every 10 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Initialize map (using a simple div for now, in real implementation would use Mapbox/Leaflet)\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      // Simulated map initialization\n      setMap({ initialized: true });\n    }\n  }, [map]);\n\n  // Handle location search\n  const handleLocationSearch = async (query: string) => {\n    if (!query.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      // Simulate location search API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const mockLocation = {\n        name: query,\n        lat: 32.2432 + Math.random() * 0.1,\n        lng: 77.1892 + Math.random() * 0.1,\n        address: `${query}, Himachal Pradesh, India`\n      };\n\n      setSelectedLocation(mockLocation);\n      \n      // Fetch weather data for selected location\n      await fetchWeatherData(mockLocation.lat, mockLocation.lng);\n      \n      // Fetch risk assessment data\n      await fetchRiskData(mockLocation);\n      \n      toast({\n        title: \"Location Found\",\n        description: `Displaying live data for ${mockLocation.name}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Search Error\",\n        description: \"Could not find location or fetch data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch weather data from OpenWeatherMap API (simulated)\n  const fetchWeatherData = async (lat: number, lng: number) => {\n    try {\n      // In real implementation, use actual OpenWeatherMap API\n      // const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`);\n      \n      // Simulated weather data\n      const mockWeatherData = {\n        temperature: Math.round(15 + Math.random() * 20),\n        humidity: Math.round(40 + Math.random() * 40),\n        windSpeed: Math.round(5 + Math.random() * 15),\n        pressure: Math.round(1000 + Math.random() * 50),\n        visibility: Math.round(5 + Math.random() * 15),\n        conditions: [\"Clear\", \"Cloudy\", \"Rainy\", \"Foggy\"][Math.floor(Math.random() * 4)],\n        airQuality: {\n          index: Math.round(1 + Math.random() * 4),\n          description: [\"Good\", \"Fair\", \"Moderate\", \"Poor\", \"Very Poor\"][Math.floor(Math.random() * 5)]\n        }\n      };\n      \n      setWeatherData(mockWeatherData);\n    } catch (error) {\n      console.error(\"Weather data fetch error:\", error);\n    }\n  };\n\n  // Fetch risk assessment data\n  const fetchRiskData = async (location: any) => {\n    try {\n      // Simulate risk assessment based on location\n      const riskLevel = Math.random();\n      const mockRiskData = {\n        overall: riskLevel > 0.7 ? \"high\" : riskLevel > 0.4 ? \"medium\" : \"low\",\n        crime: {\n          level: Math.random() > 0.8 ? \"high\" : Math.random() > 0.6 ? \"medium\" : \"low\",\n          incidents: Math.floor(Math.random() * 5)\n        },\n        natural: {\n          level: Math.random() > 0.7 ? \"high\" : Math.random() > 0.5 ? \"medium\" : \"low\",\n          warnings: Math.floor(Math.random() * 3)\n        },\n        medical: {\n          facilities: Math.floor(1 + Math.random() * 5),\n          distance: Math.round(1 + Math.random() * 20)\n        },\n        connectivity: {\n          mobile: Math.random() > 0.3 ? \"good\" : \"poor\",\n          internet: Math.random() > 0.4 ? \"available\" : \"limited\"\n        }\n      };\n      \n      setRiskData(mockRiskData);\n    } catch (error) {\n      console.error(\"Risk data fetch error:\", error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Location Search Bar */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5\" />\n            Location Search & Live Data\n          </CardTitle>\n          <CardDescription>\n            Search for any location to view real-time weather, risk alerts, and safety information\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search for a location (e.g., Manali, Delhi, Mumbai)...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleLocationSearch(searchQuery)}\n                className=\"pl-8\"\n                data-testid=\"input-location-search\"\n              />\n            </div>\n            <Button \n              onClick={() => handleLocationSearch(searchQuery)}\n              disabled={isLoading || !searchQuery.trim()}\n              data-testid=\"button-search-location\"\n            >\n              {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : \"Search\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Map Display */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"h-[600px]\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" />\n                  Live Tourist Tracking Map\n                </span>\n                <Badge variant=\"secondary\">\n                  {tourists.length} Active Tourists\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0 h-[500px]\">\n              {/* Simulated Map Display */}\n              <div \n                ref={mapRef}\n                className=\"w-full h-full bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 relative overflow-hidden rounded-lg\"\n                data-testid=\"map-container\"\n              >\n                {/* Simulated map markers for tourists */}\n                {tourists.map((tourist, index) => (\n                  <div\n                    key={tourist.id}\n                    className={`absolute w-4 h-4 rounded-full border-2 border-white shadow-lg transform -translate-x-1/2 -translate-y-1/2 ${\n                      tourist.status === \"safe\" ? \"bg-green-500\" :\n                      tourist.status === \"deviation\" ? \"bg-orange-500\" :\n                      \"bg-red-500\"\n                    }`}\n                    style={{\n                      left: `${20 + index * 25}%`,\n                      top: `${30 + index * 20}%`\n                    }}\n                    title={`${tourist.name} (${tourist.groupSize} people)`}\n                    data-testid={`tourist-marker-${tourist.id}`}\n                  />\n                ))}\n\n                {/* Selected location marker */}\n                {selectedLocation && (\n                  <div\n                    className=\"absolute w-6 h-6 bg-blue-600 rounded-full border-2 border-white shadow-lg transform -translate-x-1/2 -translate-y-1/2 animate-pulse\"\n                    style={{\n                      left: \"50%\",\n                      top: \"50%\"\n                    }}\n                    title={selectedLocation.name}\n                  />\n                )}\n\n                {/* Map Controls */}\n                <div className=\"absolute bottom-4 right-4 space-y-2\">\n                  <Button size=\"sm\" variant=\"outline\" className=\"bg-background/80\">\n                    <Navigation className=\"w-4 h-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" className=\"bg-background/80\">\n                    <Users className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Route Deviation Alert */}\n                {tourists.some(t => t.status === \"deviation\") && (\n                  <div className=\"absolute top-4 left-4 right-4\">\n                    <div className=\"bg-orange-100 dark:bg-orange-950 border border-orange-200 dark:border-orange-800 rounded-lg p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"w-4 h-4 text-orange-600\" />\n                        <span className=\"text-sm font-medium text-orange-800 dark:text-orange-200\">\n                          Route Deviation Detected\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-orange-700 dark:text-orange-300 mt-1\">\n                        Tourist group has deviated from planned route. Auto-alert sent.\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Live Data Panel */}\n        <div className=\"space-y-6\">\n          {/* Tourist Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Active Tourists\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {tourists.map((tourist) => (\n                <div key={tourist.id} className=\"flex items-center justify-between p-2 rounded-lg bg-muted/50\">\n                  <div>\n                    <p className=\"text-sm font-medium\">{tourist.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{tourist.route}</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge\n                      variant={\n                        tourist.status === \"safe\" ? \"secondary\" :\n                        tourist.status === \"deviation\" ? \"default\" :\n                        \"destructive\"\n                      }\n                      className=\"text-xs\"\n                    >\n                      {tourist.status}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {tourist.groupSize}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Selected Location Info */}\n          {selectedLocation && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" />\n                  Location Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">{selectedLocation.name}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{selectedLocation.address}</p>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {selectedLocation.lat.toFixed(4)}, {selectedLocation.lng.toFixed(4)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Live Weather Data */}\n          {weatherData && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Thermometer className=\"w-5 h-5\" />\n                  Live Weather\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold\">{weatherData.temperature}°C</div>\n                    <div className=\"text-sm text-muted-foreground\">{weatherData.conditions}</div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Droplets className=\"w-4 h-4 text-blue-500\" />\n                      <span className=\"text-sm\">{weatherData.humidity}%</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Wind className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-sm\">{weatherData.windSpeed} km/h</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Eye className=\"w-4 h-4 text-purple-500\" />\n                      <span className=\"text-sm\">{weatherData.visibility} km</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"pt-2 border-t\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Air Quality</span>\n                    <Badge\n                      variant={\n                        weatherData.airQuality.index <= 2 ? \"secondary\" :\n                        weatherData.airQuality.index <= 3 ? \"default\" :\n                        \"destructive\"\n                      }\n                    >\n                      {weatherData.airQuality.description}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Risk Assessment */}\n          {riskData && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-5 h-5\" />\n                  Risk Assessment\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Overall Risk</span>\n                  <Badge\n                    variant={\n                      riskData.overall === \"low\" ? \"secondary\" :\n                      riskData.overall === \"medium\" ? \"default\" :\n                      \"destructive\"\n                    }\n                  >\n                    {riskData.overall.toUpperCase()}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Crime Safety</span>\n                    <span className={`font-medium ${\n                      riskData.crime.level === \"low\" ? \"text-green-600\" :\n                      riskData.crime.level === \"medium\" ? \"text-orange-600\" :\n                      \"text-red-600\"\n                    }`}>\n                      {riskData.crime.level}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span>Natural Hazards</span>\n                    <span className={`font-medium ${\n                      riskData.natural.level === \"low\" ? \"text-green-600\" :\n                      riskData.natural.level === \"medium\" ? \"text-orange-600\" :\n                      \"text-red-600\"\n                    }`}>\n                      {riskData.natural.level}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span>Medical Facilities</span>\n                    <span className=\"text-muted-foreground\">\n                      {riskData.medical.facilities} within {riskData.medical.distance}km\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span>Connectivity</span>\n                    <span className={`font-medium ${\n                      riskData.connectivity.mobile === \"good\" ? \"text-green-600\" : \"text-orange-600\"\n                    }`}>\n                      {riskData.connectivity.mobile}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18676},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef } from \"react\";\n\n/**\n * WebSocket hook for real-time updates\n * Connects to the WebSocket server for live alerts and data updates\n */\nexport function useWebSocket() {\n  const ws = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    // Connect to WebSocket server\n    const connectWebSocket = () => {\n      try {\n        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        \n        ws.current = new WebSocket(wsUrl);\n        \n        ws.current.onopen = () => {\n          console.log('WebSocket connected');\n        };\n        \n        ws.current.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('WebSocket message received:', data);\n            \n            // Handle different types of real-time updates\n            if (data.type === 'alert') {\n              // Handle real-time alerts\n              console.log('New alert received:', data.payload);\n            } else if (data.type === 'location_update') {\n              // Handle tourist location updates\n              console.log('Location update:', data.payload);\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        \n        ws.current.onclose = () => {\n          console.log('WebSocket disconnected');\n          // Attempt to reconnect after a delay\n          setTimeout(connectWebSocket, 5000);\n        };\n        \n        ws.current.onerror = (error) => {\n          console.error('WebSocket error:', error);\n        };\n      } catch (error) {\n        console.error('Failed to connect WebSocket:', error);\n      }\n    };\n\n    connectWebSocket();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  return ws.current;\n}","size_bytes":1905},"client/src/pages/alert-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, MapPin, Bell, Mail, MessageSquare, Save } from \"lucide-react\";\nimport Header from \"@/components/layout/header\";\n\n/**\n * Alert Settings Page Component\n * Allows users to configure alert preferences including:\n * - Geo-fence radius for location-based alerts\n * - Alert types and severity filters\n * - Notification methods (SMS, email, push)\n * - Emergency contact preferences\n */\nexport default function AlertSettings() {\n  const { toast } = useToast();\n  \n  // Alert settings state\n  const [settings, setSettings] = useState({\n    geoFence: {\n      enabled: true,\n      radius: 5, // kilometers\n      alertOnExit: true,\n      alertOnEntry: false,\n    },\n    alertTypes: {\n      medical: true,\n      weather: true,\n      crime: false,\n      naturalDisaster: true,\n      wildlife: true,\n      accident: true,\n      other: false,\n    },\n    severityFilter: {\n      critical: true,\n      high: true,\n      medium: false,\n      low: false,\n    },\n    notifications: {\n      pushNotifications: true,\n      emailAlerts: false,\n      smsAlerts: false,\n      soundEnabled: true,\n      vibrationEnabled: true,\n    },\n    contacts: {\n      emergencyContact1: \"\",\n      emergencyContact2: \"\",\n      medicalInfo: \"\",\n      bloodType: \"\",\n      allergies: \"\",\n    },\n    location: {\n      shareLocation: true,\n      highAccuracyMode: false,\n      locationHistory: true,\n      batteryOptimization: true,\n    }\n  });\n\n  // Load settings from localStorage on component mount\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('tourist-safety-settings');\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        setSettings(prev => ({ ...prev, ...parsed }));\n      } catch (error) {\n        console.error('Error loading saved settings:', error);\n      }\n    }\n  }, []);\n\n  // Save settings to backend and localStorage\n  const handleSaveSettings = async () => {\n    try {\n      // Save to localStorage for immediate persistence\n      localStorage.setItem('tourist-safety-settings', JSON.stringify(settings));\n      \n      // Save to backend API (assuming we have this endpoint)\n      const response = await fetch(\"/api/v1/user/settings\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(settings),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Settings Saved\",\n          description: \"Your alert preferences have been updated successfully.\",\n        });\n      } else {\n        throw new Error('Failed to save settings');\n      }\n    } catch (error) {\n      // Still save locally even if backend fails\n      toast({\n        title: \"Settings Saved Locally\",\n        description: \"Settings saved on your device. Will sync when connection is restored.\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Header \n        title=\"Alert Settings\" \n        subtitle=\"Configure your safety alert preferences and notification settings\"\n      />\n      \n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Tabs defaultValue=\"geofence\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"geofence\">Geo-fence</TabsTrigger>\n            <TabsTrigger value=\"alerts\">Alert Types</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"contacts\">Contacts</TabsTrigger>\n            <TabsTrigger value=\"location\">Location</TabsTrigger>\n          </TabsList>\n\n          {/* Geo-fence Settings */}\n          <TabsContent value=\"geofence\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" />\n                  Geo-fence Configuration\n                </CardTitle>\n                <CardDescription>\n                  Set up location-based alerts for when you enter or leave safe areas\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Enable Geo-fence Alerts</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Get notified when entering or leaving designated safe zones\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.geoFence.enabled}\n                    onCheckedChange={(checked) =>\n                      setSettings(prev => ({\n                        ...prev,\n                        geoFence: { ...prev.geoFence, enabled: checked }\n                      }))\n                    }\n                    data-testid=\"switch-geofence-enabled\"\n                  />\n                </div>\n\n                {settings.geoFence.enabled && (\n                  <>\n                    <div className=\"space-y-3\">\n                      <Label>Safety Radius: {settings.geoFence.radius} km</Label>\n                      <Slider\n                        value={[settings.geoFence.radius]}\n                        onValueChange={([value]) =>\n                          setSettings(prev => ({\n                            ...prev,\n                            geoFence: { ...prev.geoFence, radius: value }\n                          }))\n                        }\n                        max={50}\n                        min={1}\n                        step={1}\n                        className=\"w-full\"\n                        data-testid=\"slider-geofence-radius\"\n                      />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Alert radius around your current location or designated safe areas\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label>Alert when leaving safe area</Label>\n                        <Switch\n                          checked={settings.geoFence.alertOnExit}\n                          onCheckedChange={(checked) =>\n                            setSettings(prev => ({\n                              ...prev,\n                              geoFence: { ...prev.geoFence, alertOnExit: checked }\n                            }))\n                          }\n                          data-testid=\"switch-alert-on-exit\"\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label>Alert when entering new area</Label>\n                        <Switch\n                          checked={settings.geoFence.alertOnEntry}\n                          onCheckedChange={(checked) =>\n                            setSettings(prev => ({\n                              ...prev,\n                              geoFence: { ...prev.geoFence, alertOnEntry: checked }\n                            }))\n                          }\n                          data-testid=\"switch-alert-on-entry\"\n                        />\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alert Types Settings */}\n          <TabsContent value=\"alerts\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Alert Types & Severity</CardTitle>\n                <CardDescription>\n                  Choose which types of alerts you want to receive and their minimum severity levels\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Emergency Alert Types</h4>\n                  <div className=\"space-y-3\">\n                    {Object.entries(settings.alertTypes).map(([type, enabled]) => (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <Label className=\"capitalize\">\n                          {type.replace(/([A-Z])/g, ' $1').trim()}\n                        </Label>\n                        <Switch\n                          checked={enabled}\n                          onCheckedChange={(checked) =>\n                            setSettings(prev => ({\n                              ...prev,\n                              alertTypes: { ...prev.alertTypes, [type]: checked }\n                            }))\n                          }\n                          data-testid={`switch-alert-type-${type}`}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Minimum Severity Level</h4>\n                  <div className=\"space-y-3\">\n                    {Object.entries(settings.severityFilter).map(([severity, enabled]) => (\n                      <div key={severity} className=\"flex items-center justify-between\">\n                        <Label className=\"capitalize\">\n                          {severity} Priority Alerts\n                        </Label>\n                        <Switch\n                          checked={enabled}\n                          onCheckedChange={(checked) =>\n                            setSettings(prev => ({\n                              ...prev,\n                              severityFilter: { ...prev.severityFilter, [severity]: checked }\n                            }))\n                          }\n                          data-testid={`switch-severity-${severity}`}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notification Settings */}\n          <TabsContent value=\"notifications\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bell className=\"w-5 h-5\" />\n                  Notification Methods\n                </CardTitle>\n                <CardDescription>\n                  Configure how you want to receive emergency alerts and notifications\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Push Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Instant notifications on your device\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.notifications.pushNotifications}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          notifications: { ...prev.notifications, pushNotifications: checked }\n                        }))\n                      }\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Email Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Detailed alerts sent to your email\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.notifications.emailAlerts}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          notifications: { ...prev.notifications, emailAlerts: checked }\n                        }))\n                      }\n                      data-testid=\"switch-email-alerts\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>SMS Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Text message alerts for critical emergencies\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.notifications.smsAlerts}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          notifications: { ...prev.notifications, smsAlerts: checked }\n                        }))\n                      }\n                      data-testid=\"switch-sms-alerts\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Alert Sound</Label>\n                    <Switch\n                      checked={settings.notifications.soundEnabled}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          notifications: { ...prev.notifications, soundEnabled: checked }\n                        }))\n                      }\n                      data-testid=\"switch-sound-enabled\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Vibration</Label>\n                    <Switch\n                      checked={settings.notifications.vibrationEnabled}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          notifications: { ...prev.notifications, vibrationEnabled: checked }\n                        }))\n                      }\n                      data-testid=\"switch-vibration-enabled\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Emergency Contacts */}\n          <TabsContent value=\"contacts\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Emergency Contacts & Medical Info</CardTitle>\n                <CardDescription>\n                  Set up emergency contacts and important medical information for first responders\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Emergency Contact 1</Label>\n                    <Input\n                      placeholder=\"Phone number or contact info\"\n                      value={settings.contacts.emergencyContact1}\n                      onChange={(e) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          contacts: { ...prev.contacts, emergencyContact1: e.target.value }\n                        }))\n                      }\n                      data-testid=\"input-emergency-contact-1\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Emergency Contact 2</Label>\n                    <Input\n                      placeholder=\"Phone number or contact info\"\n                      value={settings.contacts.emergencyContact2}\n                      onChange={(e) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          contacts: { ...prev.contacts, emergencyContact2: e.target.value }\n                        }))\n                      }\n                      data-testid=\"input-emergency-contact-2\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Blood Type</Label>\n                    <Select\n                      value={settings.contacts.bloodType}\n                      onValueChange={(value) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          contacts: { ...prev.contacts, bloodType: value }\n                        }))\n                      }\n                    >\n                      <SelectTrigger data-testid=\"select-blood-type\">\n                        <SelectValue placeholder=\"Select blood type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"A+\">A+</SelectItem>\n                        <SelectItem value=\"A-\">A-</SelectItem>\n                        <SelectItem value=\"B+\">B+</SelectItem>\n                        <SelectItem value=\"B-\">B-</SelectItem>\n                        <SelectItem value=\"AB+\">AB+</SelectItem>\n                        <SelectItem value=\"AB-\">AB-</SelectItem>\n                        <SelectItem value=\"O+\">O+</SelectItem>\n                        <SelectItem value=\"O-\">O-</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Medical Information</Label>\n                    <Input\n                      placeholder=\"Conditions, medications, etc.\"\n                      value={settings.contacts.medicalInfo}\n                      onChange={(e) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          contacts: { ...prev.contacts, medicalInfo: e.target.value }\n                        }))\n                      }\n                      data-testid=\"input-medical-info\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Allergies</Label>\n                  <Input\n                    placeholder=\"List any known allergies\"\n                    value={settings.contacts.allergies}\n                    onChange={(e) =>\n                      setSettings(prev => ({\n                        ...prev,\n                        contacts: { ...prev.contacts, allergies: e.target.value }\n                      }))\n                    }\n                    data-testid=\"input-allergies\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Location Settings */}\n          <TabsContent value=\"location\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Location & Privacy Settings</CardTitle>\n                <CardDescription>\n                  Configure location sharing and tracking preferences for safety features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Share Location for Safety</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Allow emergency services to locate you during alerts\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.location.shareLocation}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          location: { ...prev.location, shareLocation: checked }\n                        }))\n                      }\n                      data-testid=\"switch-share-location\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>High Accuracy Mode</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        More precise location tracking (uses more battery)\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.location.highAccuracyMode}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          location: { ...prev.location, highAccuracyMode: checked }\n                        }))\n                      }\n                      data-testid=\"switch-high-accuracy\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Keep Location History</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Store location history for route analysis and safety insights\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.location.locationHistory}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          location: { ...prev.location, locationHistory: checked }\n                        }))\n                      }\n                      data-testid=\"switch-location-history\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Battery Optimization</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Reduce location update frequency to save battery\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.location.batteryOptimization}\n                      onCheckedChange={(checked) =>\n                        setSettings(prev => ({\n                          ...prev,\n                          location: { ...prev.location, batteryOptimization: checked }\n                        }))\n                      }\n                      data-testid=\"switch-battery-optimization\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Save Button */}\n        <div className=\"flex justify-end pt-6 border-t\">\n          <Button \n            onClick={handleSaveSettings}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-save-settings\"\n          >\n            <Save className=\"w-4 h-4\" />\n            Save Settings\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":23613},"client/src/pages/emergency-alert.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertTriangle, MapPin, Phone, Send } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\n\n/**\n * Emergency Alert Page Component\n * Allows users to send emergency alerts with location and contact information\n * Integrates with backend API for alert creation and notification dispatch\n */\nexport default function EmergencyAlert() {\n  const { toast } = useToast();\n  const [alertData, setAlertData] = useState({\n    type: \"\",\n    description: \"\",\n    location: \"\",\n    contact: \"\",\n    severity: \"high\"\n  });\n\n  // Get user's current location\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n\n  // Fetch user's current location on component mount\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          setAlertData(prev => ({\n            ...prev,\n            location: `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`\n          }));\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n          toast({\n            title: \"Location Error\",\n            description: \"Could not get your current location. Please enter manually.\",\n            variant: \"destructive\",\n          });\n        }\n      );\n    }\n  }, [toast]);\n\n  // Mutation for creating emergency alert\n  const createAlertMutation = useMutation({\n    mutationFn: async (alertData: any) => {\n      const response = await fetch(\"/api/v1/alerts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(alertData),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create alert');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Emergency Alert Sent!\",\n        description: \"Your emergency alert has been dispatched to relevant authorities.\",\n      });\n      // Reset form\n      setAlertData({\n        type: \"\",\n        description: \"\",\n        location: userLocation ? `${userLocation.lat.toFixed(6)}, ${userLocation.lng.toFixed(6)}` : \"\",\n        contact: \"\",\n        severity: \"high\"\n      });\n      // Invalidate alerts cache to refresh notifications\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/alerts\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Send Alert\",\n        description: \"There was an error sending your emergency alert. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle form submission\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!alertData.type || !alertData.description) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in alert type and description.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create alert with tourist safety context\n    createAlertMutation.mutate({\n      siteId: \"emergency\", // Special site ID for tourist emergencies\n      type: \"emergency\",\n      severity: alertData.severity,\n      title: `Tourist Emergency: ${alertData.type}`,\n      message: `${alertData.description}${alertData.location ? ` | Location: ${alertData.location}` : ''}${alertData.contact ? ` | Contact: ${alertData.contact}` : ''}`,\n      actionPlan: getTouristEmergencyActionPlan(alertData.type, alertData.severity),\n      status: \"active\"\n    });\n  };\n\n  return (\n    <>\n      <Header \n        title=\"Emergency Alert\" \n        subtitle=\"Report emergencies and get immediate assistance\"\n      />\n      \n      <div className=\"p-6 max-w-2xl mx-auto\">\n        <Card className=\"border-red-200 bg-red-50 dark:bg-red-950/20\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mb-4\">\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <CardTitle className=\"text-red-700 dark:text-red-300\">Emergency Alert System</CardTitle>\n            <CardDescription>\n              Send immediate alerts for emergencies, medical situations, or safety concerns\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Alert Type Selection */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"alert-type\">Emergency Type *</Label>\n                <Select \n                  value={alertData.type} \n                  onValueChange={(value) => setAlertData(prev => ({...prev, type: value}))}\n                >\n                  <SelectTrigger data-testid=\"select-emergency-type\">\n                    <SelectValue placeholder=\"Select emergency type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"medical\">Medical Emergency</SelectItem>\n                    <SelectItem value=\"accident\">Accident</SelectItem>\n                    <SelectItem value=\"lost\">Lost/Missing Person</SelectItem>\n                    <SelectItem value=\"natural_disaster\">Natural Disaster</SelectItem>\n                    <SelectItem value=\"crime\">Crime/Security</SelectItem>\n                    <SelectItem value=\"weather\">Severe Weather</SelectItem>\n                    <SelectItem value=\"wildlife\">Wildlife Encounter</SelectItem>\n                    <SelectItem value=\"other\">Other Emergency</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Severity Level */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"severity\">Severity Level</Label>\n                <Select \n                  value={alertData.severity} \n                  onValueChange={(value) => setAlertData(prev => ({...prev, severity: value}))}\n                >\n                  <SelectTrigger data-testid=\"select-severity\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"critical\">Critical - Life Threatening</SelectItem>\n                    <SelectItem value=\"high\">High - Immediate Assistance Needed</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Assistance Required</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Description */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Describe the emergency situation in detail...\"\n                  value={alertData.description}\n                  onChange={(e) => setAlertData(prev => ({...prev, description: e.target.value}))}\n                  className=\"min-h-24\"\n                  data-testid=\"input-description\"\n                />\n              </div>\n\n              {/* Location */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\" className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4\" />\n                  Current Location\n                </Label>\n                <Input\n                  id=\"location\"\n                  placeholder=\"Auto-detected location or enter manually\"\n                  value={alertData.location}\n                  onChange={(e) => setAlertData(prev => ({...prev, location: e.target.value}))}\n                  data-testid=\"input-location\"\n                />\n                {userLocation && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    📍 Location auto-detected from GPS\n                  </p>\n                )}\n              </div>\n\n              {/* Contact Information */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"contact\" className=\"flex items-center gap-2\">\n                  <Phone className=\"w-4 h-4\" />\n                  Contact Information\n                </Label>\n                <Input\n                  id=\"contact\"\n                  placeholder=\"Phone number or alternative contact method\"\n                  value={alertData.contact}\n                  onChange={(e) => setAlertData(prev => ({...prev, contact: e.target.value}))}\n                  data-testid=\"input-contact\"\n                />\n              </div>\n\n              {/* Submit Button */}\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n                disabled={createAlertMutation.isPending}\n                data-testid=\"button-send-alert\"\n              >\n                {createAlertMutation.isPending ? (\n                  <>Sending Alert...</>\n                ) : (\n                  <>\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    Send Emergency Alert\n                  </>\n                )}\n              </Button>\n            </form>\n\n            {/* Emergency Instructions */}\n            <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n              <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">\n                Emergency Instructions:\n              </h4>\n              <ul className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n                <li>• For life-threatening emergencies, call local emergency services first</li>\n                <li>• This alert will notify relevant authorities and nearby safety coordinators</li>\n                <li>• Stay calm and follow any instructions received</li>\n                <li>• Keep your phone available for follow-up contact</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n\n/**\n * Generate appropriate action plan based on emergency type and severity\n */\nfunction getTouristEmergencyActionPlan(type: string, severity: string): string {\n  const plans: Record<string, Record<string, string>> = {\n    medical: {\n      critical: \"1. Call local emergency services immediately\\n2. Dispatch nearest medical team\\n3. Coordinate with hospitals\\n4. Notify embassy if foreign tourist\",\n      high: \"1. Send medical assistance\\n2. Contact nearest clinic\\n3. Provide first aid guidance\\n4. Monitor situation\",\n      medium: \"1. Connect with local medical support\\n2. Provide medical advice\\n3. Arrange transportation if needed\"\n    },\n    lost: {\n      critical: \"1. Launch immediate search operation\\n2. Alert all rescue teams\\n3. Coordinate with local authorities\\n4. Set up communication center\",\n      high: \"1. Initiate search protocols\\n2. Contact local guides\\n3. Alert nearby tourists\\n4. Monitor last known location\",\n      medium: \"1. Verify location details\\n2. Provide navigation assistance\\n3. Contact local support\"\n    },\n    accident: {\n      critical: \"1. Send emergency response team\\n2. Clear evacuation route\\n3. Alert medical services\\n4. Secure accident site\",\n      high: \"1. Dispatch first responders\\n2. Provide immediate assistance\\n3. Document incident\\n4. Contact insurance\",\n      medium: \"1. Assess situation remotely\\n2. Provide guidance\\n3. Arrange local assistance\"\n    }\n  };\n\n  return plans[type]?.[severity] || \"1. Assess situation\\n2. Provide appropriate assistance\\n3. Monitor developments\\n4. Follow up with tourist\";\n}","size_bytes":12200},"client/src/pages/notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bell, CheckCircle, AlertTriangle, Info, X, Filter } from \"lucide-react\";\nimport Header from \"@/components/layout/header\";\nimport { formatDistanceToNow } from \"date-fns\";\n\n/**\n * Notifications Page Component\n * Displays all alerts and notifications from the system\n * Allows filtering by type, severity, and status\n * Connected to the bell icon in the navigation header\n */\nexport default function Notifications() {\n  const [filter, setFilter] = useState(\"all\");\n  \n  // Fetch alerts from backend\n  const { data: alerts = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/v1/alerts\"],\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates\n  });\n\n  // Filter alerts based on selected filter\n  const filteredAlerts = alerts.filter((alert: any) => {\n    switch (filter) {\n      case \"active\":\n        return alert.status === \"active\";\n      case \"acknowledged\":\n        return alert.status === \"acknowledged\";\n      case \"critical\":\n        return alert.severity === \"critical\";\n      case \"emergency\":\n        return alert.type === \"emergency\";\n      default:\n        return true;\n    }\n  });\n\n  // Group alerts by status for better organization\n  const activeAlerts = alerts.filter((alert: any) => alert.status === \"active\");\n  const acknowledgedAlerts = alerts.filter((alert: any) => alert.status === \"acknowledged\");\n  \n  return (\n    <>\n      <Header \n        title=\"Notifications & Alerts\" \n        subtitle={`${activeAlerts.length} active alerts, ${acknowledgedAlerts.length} acknowledged`}\n      />\n      \n      <div className=\"p-6\">\n        {/* Filter Controls */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground\">Filter:</span>\n            <div className=\"flex space-x-2\">\n              {[\"all\", \"active\", \"critical\", \"emergency\", \"acknowledged\"].map((filterOption) => (\n                <Button\n                  key={filterOption}\n                  variant={filter === filterOption ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilter(filterOption)}\n                  data-testid={`filter-${filterOption}`}\n                >\n                  {filterOption.charAt(0).toUpperCase() + filterOption.slice(1)}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"text-sm text-muted-foreground\">\n            Last updated: {new Date().toLocaleTimeString()}\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"all\">All Notifications</TabsTrigger>\n            <TabsTrigger value=\"active\">\n              Active Alerts\n              {activeAlerts.length > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {activeAlerts.length}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"acknowledged\">Acknowledged</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"space-y-4\">\n            <NotificationList \n              alerts={filteredAlerts} \n              isLoading={isLoading}\n              showAll={true}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"active\" className=\"space-y-4\">\n            <NotificationList \n              alerts={activeAlerts} \n              isLoading={isLoading}\n              showAll={false}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"acknowledged\" className=\"space-y-4\">\n            <NotificationList \n              alerts={acknowledgedAlerts} \n              isLoading={isLoading}\n              showAll={false}\n            />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </>\n  );\n}\n\n/**\n * NotificationList Component\n * Renders a list of notification cards with alert details\n */\ninterface NotificationListProps {\n  alerts: any[];\n  isLoading: boolean;\n  showAll: boolean;\n}\n\nfunction NotificationList({ alerts, isLoading, showAll }: NotificationListProps) {\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n              <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-3 bg-muted rounded w-full mb-2\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (alerts.length === 0) {\n    return (\n      <Card className=\"text-center py-12\">\n        <CardContent>\n          <Bell className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <CardTitle className=\"text-muted-foreground mb-2\">No notifications</CardTitle>\n          <CardDescription>\n            {showAll ? \"All caught up! No new notifications.\" : \"No notifications in this category.\"}\n          </CardDescription>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {alerts.map((alert: any) => (\n        <NotificationCard key={alert.id} alert={alert} />\n      ))}\n    </div>\n  );\n}\n\n/**\n * Individual Notification Card Component\n * Displays alert details with appropriate styling based on severity\n */\ninterface NotificationCardProps {\n  alert: any;\n}\n\nfunction NotificationCard({ alert }: NotificationCardProps) {\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"border-red-500 bg-red-50 dark:bg-red-950/20\";\n      case \"high\":\n        return \"border-orange-500 bg-orange-50 dark:bg-orange-950/20\";\n      case \"medium\":\n        return \"border-yellow-500 bg-yellow-50 dark:bg-yellow-950/20\";\n      default:\n        return \"border-blue-500 bg-blue-50 dark:bg-blue-950/20\";\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return <AlertTriangle className=\"w-5 h-5 text-red-600\" />;\n      case \"high\":\n        return <AlertTriangle className=\"w-5 h-5 text-orange-600\" />;\n      case \"medium\":\n        return <Info className=\"w-5 h-5 text-yellow-600\" />;\n      default:\n        return <Info className=\"w-5 h-5 text-blue-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge variant=\"destructive\">Active</Badge>;\n      case \"acknowledged\":\n        return <Badge variant=\"secondary\">Acknowledged</Badge>;\n      case \"resolved\":\n        return <Badge variant=\"outline\">Resolved</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <Card \n      className={`${getSeverityColor(alert.severity)} transition-all hover:shadow-md`}\n      data-testid={`alert-card-${alert.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start space-x-3\">\n            {getSeverityIcon(alert.severity)}\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-base font-medium\">\n                {alert.title}\n              </CardTitle>\n              <CardDescription className=\"mt-1\">\n                {alert.site?.name && `Site: ${alert.site.name} • `}\n                {formatDistanceToNow(new Date(alert.createdAt), { addSuffix: true })}\n              </CardDescription>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {getStatusBadge(alert.status)}\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {alert.severity.toUpperCase()}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          {/* Alert Message */}\n          <p className=\"text-sm text-foreground\">\n            {alert.message}\n          </p>\n\n          {/* Action Plan - if available */}\n          {alert.actionPlan && (\n            <div className=\"bg-background/50 rounded-lg p-3\">\n              <h4 className=\"text-xs font-medium text-muted-foreground mb-1\">\n                RECOMMENDED ACTIONS:\n              </h4>\n              <pre className=\"text-xs text-foreground whitespace-pre-wrap font-sans\">\n                {alert.actionPlan}\n              </pre>\n            </div>\n          )}\n\n          {/* Acknowledgment Info */}\n          {alert.status === \"acknowledged\" && alert.acknowledgedBy && (\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n              <CheckCircle className=\"w-3 h-3\" />\n              <span>\n                Acknowledged by {alert.acknowledgedBy}\n                {alert.acknowledgedAt && ` on ${new Date(alert.acknowledgedAt).toLocaleString()}`}\n              </span>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          {alert.status === \"active\" && (\n            <div className=\"flex space-x-2 pt-2 border-t\">\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                data-testid={`acknowledge-alert-${alert.id}`}\n                onClick={() => {\n                  // TODO: Implement acknowledge functionality\n                  console.log(\"Acknowledge alert:\", alert.id);\n                }}\n              >\n                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                Acknowledge\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"ghost\"\n                data-testid={`dismiss-alert-${alert.id}`}\n                onClick={() => {\n                  // TODO: Implement dismiss functionality\n                  console.log(\"Dismiss alert:\", alert.id);\n                }}\n              >\n                <X className=\"w-3 h-3 mr-1\" />\n                Dismiss\n              </Button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10555},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Download, Search, Filter, MapPin, Clock, AlertTriangle } from \"lucide-react\";\nimport { format, parseISO, startOfDay, endOfDay } from \"date-fns\";\nimport Header from \"@/components/layout/header\";\n\n/**\n * Reports Page Component\n * Displays historical alerts and reports with search/filter functionality\n * Includes data export capabilities and detailed incident analysis\n */\nexport default function Reports() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateRange, setDateRange] = useState<{from?: Date; to?: Date}>({});\n  \n  // Fetch historical alerts and reports\n  const { data: reports = [], isLoading, error } = useQuery<any[]>({\n    queryKey: [\"/api/v1/alerts\", searchTerm, typeFilter, severityFilter, statusFilter, dateRange],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Apply filters to reports\n  const filteredReports = reports.filter((report: any) => {\n    // Search filter\n    if (searchTerm && !report.title.toLowerCase().includes(searchTerm.toLowerCase()) && \n        !report.message.toLowerCase().includes(searchTerm.toLowerCase())) {\n      return false;\n    }\n    \n    // Type filter\n    if (typeFilter !== \"all\" && report.type !== typeFilter) {\n      return false;\n    }\n    \n    // Severity filter\n    if (severityFilter !== \"all\" && report.severity !== severityFilter) {\n      return false;\n    }\n    \n    // Status filter\n    if (statusFilter !== \"all\" && report.status !== statusFilter) {\n      return false;\n    }\n    \n    // Date range filter\n    if (dateRange.from && dateRange.to) {\n      const reportDate = parseISO(report.createdAt);\n      if (reportDate < startOfDay(dateRange.from) || reportDate > endOfDay(dateRange.to)) {\n        return false;\n      }\n    }\n    \n    return true;\n  });\n\n  // Export reports to CSV\n  const handleExportReports = () => {\n    const csvContent = generateCSV(filteredReports);\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `tourist-safety-reports-${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <>\n      <Header \n        title=\"Safety Reports\" \n        subtitle={`${filteredReports.length} incidents found across all locations`}\n      />\n      \n      <div className=\"p-6\">\n        {/* Filter Controls */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Filter & Search Reports\n            </CardTitle>\n            <CardDescription>\n              Find specific incidents or analyze patterns in tourist safety data\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {/* Search */}\n              <div className=\"space-y-2\">\n                <Label>Search</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search incidents...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-8\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n              </div>\n\n              {/* Type Filter */}\n              <div className=\"space-y-2\">\n                <Label>Alert Type</Label>\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger data-testid=\"select-type-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency</SelectItem>\n                    <SelectItem value=\"medical\">Medical</SelectItem>\n                    <SelectItem value=\"accident\">Accident</SelectItem>\n                    <SelectItem value=\"weather\">Weather</SelectItem>\n                    <SelectItem value=\"crime\">Crime/Security</SelectItem>\n                    <SelectItem value=\"natural_disaster\">Natural Disaster</SelectItem>\n                    <SelectItem value=\"wildlife\">Wildlife</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Severity Filter */}\n              <div className=\"space-y-2\">\n                <Label>Severity</Label>\n                <Select value={severityFilter} onValueChange={setSeverityFilter}>\n                  <SelectTrigger data-testid=\"select-severity-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Severities</SelectItem>\n                    <SelectItem value=\"critical\">Critical</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Status Filter */}\n              <div className=\"space-y-2\">\n                <Label>Status</Label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"acknowledged\">Acknowledged</SelectItem>\n                    <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Date Range Picker */}\n            <div className=\"mt-4 flex items-center gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Date Range</Label>\n                <div className=\"flex gap-2\">\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button variant=\"outline\" className=\"w-[240px] justify-start text-left font-normal\">\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {dateRange.from ? (\n                          dateRange.to ? (\n                            <>\n                              {format(dateRange.from, \"LLL dd, y\")} -{\" \"}\n                              {format(dateRange.to, \"LLL dd, y\")}\n                            </>\n                          ) : (\n                            format(dateRange.from, \"LLL dd, y\")\n                          )\n                        ) : (\n                          <span>Pick a date range</span>\n                        )}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        initialFocus\n                        mode=\"range\"\n                        defaultMonth={dateRange.from}\n                        selected={dateRange as any}\n                        onSelect={(range) => setDateRange(range || {})}\n                        numberOfMonths={2}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  \n                  {(dateRange.from || dateRange.to) && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setDateRange({})}\n                    >\n                      Clear\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"ml-auto\">\n                <Button \n                  onClick={handleExportReports}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-export-reports\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                  Export CSV\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reports Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Incident Reports</CardTitle>\n            <CardDescription>\n              Comprehensive history of all safety alerts and emergency incidents\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading reports...</p>\n                </div>\n              </div>\n            ) : error ? (\n              <div className=\"text-center py-8\">\n                <AlertTriangle className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n                <p className=\"text-destructive\">Failed to load reports</p>\n              </div>\n            ) : filteredReports.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No reports found matching your criteria</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date & Time</TableHead>\n                      <TableHead>Incident Type</TableHead>\n                      <TableHead>Severity</TableHead>\n                      <TableHead>Location</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredReports.map((report: any) => (\n                      <TableRow key={report.id} data-testid={`report-row-${report.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                            <div>\n                              <div className=\"font-medium\">\n                                {format(parseISO(report.createdAt), \"MMM dd, yyyy\")}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {format(parseISO(report.createdAt), \"HH:mm\")}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {report.type.replace('_', ' ')}\n                          </Badge>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Badge \n                            variant={\n                              report.severity === \"critical\" ? \"destructive\" :\n                              report.severity === \"high\" ? \"default\" :\n                              \"secondary\"\n                            }\n                          >\n                            {report.severity.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"flex items-center gap-2 max-w-[200px]\">\n                            <MapPin className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n                            <span className=\"truncate\">\n                              {report.site?.name || \"Unknown Location\"}\n                            </span>\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <div className=\"max-w-[300px]\">\n                            <p className=\"font-medium truncate\">{report.title}</p>\n                            <p className=\"text-sm text-muted-foreground truncate\">\n                              {report.message}\n                            </p>\n                          </div>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Badge \n                            variant={\n                              report.status === \"active\" ? \"destructive\" :\n                              report.status === \"acknowledged\" ? \"default\" :\n                              \"outline\"\n                            }\n                          >\n                            {report.status}\n                          </Badge>\n                        </TableCell>\n                        \n                        <TableCell>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => {\n                              // TODO: Implement view details functionality\n                              console.log(\"View report details:\", report.id);\n                            }}\n                            data-testid={`button-view-details-${report.id}`}\n                          >\n                            View Details\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Summary Statistics */}\n        {filteredReports.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-destructive\">\n                  {filteredReports.filter(r => r.severity === \"critical\").length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Critical Incidents</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {filteredReports.filter(r => r.severity === \"high\").length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">High Priority</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {filteredReports.filter(r => r.status === \"resolved\").length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Resolved</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold\">\n                  {Math.round((filteredReports.filter(r => r.status === \"resolved\").length / filteredReports.length) * 100)}%\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Resolution Rate</p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\n/**\n * Generate CSV content from reports data\n */\nfunction generateCSV(reports: any[]): string {\n  const headers = [\n    \"Date\",\n    \"Time\", \n    \"Type\",\n    \"Severity\",\n    \"Title\",\n    \"Description\",\n    \"Location\",\n    \"Status\",\n    \"Acknowledged By\",\n    \"Acknowledged At\"\n  ];\n\n  const rows = reports.map(report => [\n    format(parseISO(report.createdAt), \"yyyy-MM-dd\"),\n    format(parseISO(report.createdAt), \"HH:mm:ss\"),\n    report.type,\n    report.severity,\n    report.title,\n    report.message.replace(/\"/g, '\"\"'), // Escape quotes for CSV\n    report.site?.name || \"\",\n    report.status,\n    report.acknowledgedBy || \"\",\n    report.acknowledgedAt ? format(parseISO(report.acknowledgedAt), \"yyyy-MM-dd HH:mm:ss\") : \"\"\n  ]);\n\n  const csvContent = [headers, ...rows]\n    .map(row => row.map(field => `\"${field}\"`).join(\",\"))\n    .join(\"\\n\");\n\n  return csvContent;\n}","size_bytes":17780}},"version":1}